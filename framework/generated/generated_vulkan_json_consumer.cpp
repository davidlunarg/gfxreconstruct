/*
** Copyright (c) 2018-2019 Valve Corporation
** Copyright (c) 2018-2019 LunarG, Inc.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/

/*
** This file is generated from the Khronos Vulkan XML API Registry.
**
*/

#include "format/platform_types.h"
#include "generated/generated_vulkan_enum_output_util.h"
#include "generated/generated_vulkan_json_consumer.h"
#include "generated/generated_vulkan_json_struct_util.h"
#include "util/defines.h"
#include "util/json_utils.h"
#include "vulkan/vulkan.h"
#include <functional>
#include <inttypes.h>
#include <string>

GFXRECON_BEGIN_NAMESPACE(gfxrecon)
GFXRECON_BEGIN_NAMESPACE(decode)

// Bool to keep track of when a function needs to start with a ','
// because we print the comma closing a function at the start of the
// next function. We need to do this to avoid putting a comma
// after the last function in a frame.
static bool need_function_comma = false;

void VulkanJsonConsumer::Process_vkCreateInstance(
    VkResult                                    returnValue,
    const StructPointerDecoder<Decoded_VkInstanceCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkInstance>*           pInstance)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateInstance\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: const VkInstanceCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkInstanceCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkInstance* pInstance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInstance\",\n");
    if (pInstance->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInstance->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pInstance->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyInstance(
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyInstance\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkEnumeratePhysicalDevices(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    PointerDecoder<uint32_t>*                   pPhysicalDeviceCount,
    HandlePointerDecoder<VkPhysicalDevice>*     pPhysicalDevices)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkEnumeratePhysicalDevices\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPhysicalDeviceCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPhysicalDeviceCount\",\n");
    if (pPhysicalDeviceCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPhysicalDeviceCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPhysicalDeviceCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDevice* pPhysicalDevices
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPhysicalDevices\",\n");
    if (pPhysicalDevices->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPhysicalDevices->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pPhysicalDevices = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "VkPhysicalDevice*", pPhysicalDevices, "pPhysicalDevices", *pPhysicalDeviceCount->GetPointer(), vinfo_pPhysicalDevices); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceFeatures(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkPhysicalDeviceFeatures>* pFeatures)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceFeatures\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceFeatures* pFeatures
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceFeatures*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFeatures\",\n");
    if (pFeatures->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFeatures->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pFeatures->GetMetaStructPointer(), indent, pFeatures->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceFormatProperties(
    format::HandleId                            physicalDevice,
    VkFormat                                    format,
    StructPointerDecoder<Decoded_VkFormatProperties>* pFormatProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceFormatProperties\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFormat format
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFormat"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"format\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkFormat(outputFile, format); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFormatProperties* pFormatProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFormatProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFormatProperties\",\n");
    if (pFormatProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFormatProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pFormatProperties->GetMetaStructPointer(), indent, pFormatProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceImageFormatProperties(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkImageTiling                               tiling,
    VkImageUsageFlags                           usage,
    VkImageCreateFlags                          flags,
    StructPointerDecoder<Decoded_VkImageFormatProperties>* pImageFormatProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceImageFormatProperties\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFormat format
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFormat"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"format\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkFormat(outputFile, format); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageType type
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageType"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"type\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageType(outputFile, type); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageTiling tiling
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageTiling"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"tiling\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageTiling(outputFile, tiling); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageUsageFlags usage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageUsageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"usage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, usage, EnumToStringVkImageUsageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageCreateFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageCreateFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, flags, EnumToStringVkImageCreateFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageFormatProperties* pImageFormatProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageFormatProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImageFormatProperties\",\n");
    if (pImageFormatProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImageFormatProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pImageFormatProperties->GetMetaStructPointer(), indent, pImageFormatProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceProperties(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkPhysicalDeviceProperties>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceProperties\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceProperties* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pProperties->GetMetaStructPointer(), indent, pProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceQueueFamilyProperties(
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pQueueFamilyPropertyCount,
    StructPointerDecoder<Decoded_VkQueueFamilyProperties>* pQueueFamilyProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceQueueFamilyProperties\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pQueueFamilyPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueueFamilyPropertyCount\",\n");
    if (pQueueFamilyPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueueFamilyPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pQueueFamilyPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueueFamilyProperties* pQueueFamilyProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueueFamilyProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueueFamilyProperties\",\n");
    if (pQueueFamilyProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueueFamilyProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkQueueFamilyProperties>(outputFile, indent, "VkQueueFamilyProperties", pQueueFamilyProperties->GetMetaStructPointer(), "pQueueFamilyProperties", *pQueueFamilyPropertyCount->GetPointer(), false, pQueueFamilyProperties->GetAddress(), sizeof(VkQueueFamilyProperties)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceMemoryProperties(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkPhysicalDeviceMemoryProperties>* pMemoryProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceMemoryProperties\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceMemoryProperties* pMemoryProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceMemoryProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryProperties\",\n");
    if (pMemoryProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryProperties->GetMetaStructPointer(), indent, pMemoryProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateDevice(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkDeviceCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkDevice>*             pDevice)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateDevice\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDeviceCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDeviceCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDevice* pDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDevice\",\n");
    if (pDevice->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDevice->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pDevice->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyDevice(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyDevice\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDeviceQueue(
    format::HandleId                            device,
    uint32_t                                    queueFamilyIndex,
    uint32_t                                    queueIndex,
    HandlePointerDecoder<VkQueue>*              pQueue)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDeviceQueue\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queueFamilyIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queueFamilyIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queueFamilyIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queueIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queueIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queueIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueue* pQueue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueue\",\n");
    if (pQueue->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueue->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pQueue->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkQueueSubmit(
    VkResult                                    returnValue,
    format::HandleId                            queue,
    uint32_t                                    submitCount,
    const StructPointerDecoder<Decoded_VkSubmitInfo>& pSubmits,
    format::HandleId                            fence)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkQueueSubmit\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkQueue queue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queue\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queue); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t submitCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"submitCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, submitCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSubmitInfo* pSubmits
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSubmitInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSubmits\",\n");
    if (pSubmits.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSubmits.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSubmitInfo>(outputFile, indent, "VkSubmitInfo", pSubmits.GetMetaStructPointer(), "pSubmits", submitCount, false, pSubmits.GetAddress(), sizeof(VkSubmitInfo)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFence fence
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFence"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"fence\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, fence); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkQueueWaitIdle(
    VkResult                                    returnValue,
    format::HandleId                            queue)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkQueueWaitIdle\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkQueue queue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queue\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queue); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDeviceWaitIdle(
    VkResult                                    returnValue,
    format::HandleId                            device)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDeviceWaitIdle\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkAllocateMemory(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkMemoryAllocateInfo>& pAllocateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkDeviceMemory>*       pMemory)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkAllocateMemory\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMemoryAllocateInfo* pAllocateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMemoryAllocateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocateInfo\",\n");
    if (pAllocateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocateInfo.GetMetaStructPointer(), indent, pAllocateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceMemory* pMemory
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceMemory*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemory\",\n");
    if (pMemory->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemory->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pMemory->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkFreeMemory(
    format::HandleId                            device,
    format::HandleId                            memory,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkFreeMemory\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceMemory memory
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceMemory"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memory\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, memory); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkMapMemory(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            memory,
    VkDeviceSize                                offset,
    VkDeviceSize                                size,
    VkMemoryMapFlags                            flags,
    PointerDecoder<uint64_t, void*>*            ppData)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkMapMemory\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceMemory memory
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceMemory"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memory\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, memory); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize size
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"size\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, size); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryMapFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryMapFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, flags); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void** ppData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void**"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"ppData\",\n");
    if (ppData->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, ppData->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *(static_cast<uint64_t*>(ppData->GetPointer()))); // PXA
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkUnmapMemory(
    format::HandleId                            device,
    format::HandleId                            memory)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkUnmapMemory\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceMemory memory
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceMemory"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memory\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, memory); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkFlushMappedMemoryRanges(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    memoryRangeCount,
    const StructPointerDecoder<Decoded_VkMappedMemoryRange>& pMemoryRanges)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkFlushMappedMemoryRanges\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t memoryRangeCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memoryRangeCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, memoryRangeCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMappedMemoryRange* pMemoryRanges
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMappedMemoryRange*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryRanges\",\n");
    if (pMemoryRanges.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryRanges.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkMappedMemoryRange>(outputFile, indent, "VkMappedMemoryRange", pMemoryRanges.GetMetaStructPointer(), "pMemoryRanges", memoryRangeCount, false, pMemoryRanges.GetAddress(), sizeof(VkMappedMemoryRange)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkInvalidateMappedMemoryRanges(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    memoryRangeCount,
    const StructPointerDecoder<Decoded_VkMappedMemoryRange>& pMemoryRanges)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkInvalidateMappedMemoryRanges\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t memoryRangeCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memoryRangeCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, memoryRangeCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMappedMemoryRange* pMemoryRanges
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMappedMemoryRange*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryRanges\",\n");
    if (pMemoryRanges.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryRanges.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkMappedMemoryRange>(outputFile, indent, "VkMappedMemoryRange", pMemoryRanges.GetMetaStructPointer(), "pMemoryRanges", memoryRangeCount, false, pMemoryRanges.GetAddress(), sizeof(VkMappedMemoryRange)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDeviceMemoryCommitment(
    format::HandleId                            device,
    format::HandleId                            memory,
    PointerDecoder<VkDeviceSize>*               pCommittedMemoryInBytes)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDeviceMemoryCommitment\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceMemory memory
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceMemory"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memory\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, memory); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize* pCommittedMemoryInBytes
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCommittedMemoryInBytes\",\n");
    if (pCommittedMemoryInBytes->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCommittedMemoryInBytes->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pCommittedMemoryInBytes = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pCommittedMemoryInBytes->GetPointer(), vinfo_pCommittedMemoryInBytes); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkBindBufferMemory(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            buffer,
    format::HandleId                            memory,
    VkDeviceSize                                memoryOffset)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkBindBufferMemory\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceMemory memory
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceMemory"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memory\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, memory); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize memoryOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memoryOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, memoryOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkBindImageMemory(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            image,
    format::HandleId                            memory,
    VkDeviceSize                                memoryOffset)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkBindImageMemory\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage image
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"image\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, image); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceMemory memory
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceMemory"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memory\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, memory); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize memoryOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memoryOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, memoryOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetBufferMemoryRequirements(
    format::HandleId                            device,
    format::HandleId                            buffer,
    StructPointerDecoder<Decoded_VkMemoryRequirements>* pMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetBufferMemoryRequirements\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryRequirements* pMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryRequirements*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryRequirements\",\n");
    if (pMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryRequirements->GetMetaStructPointer(), indent, pMemoryRequirements->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetImageMemoryRequirements(
    format::HandleId                            device,
    format::HandleId                            image,
    StructPointerDecoder<Decoded_VkMemoryRequirements>* pMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetImageMemoryRequirements\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage image
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"image\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, image); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryRequirements* pMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryRequirements*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryRequirements\",\n");
    if (pMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryRequirements->GetMetaStructPointer(), indent, pMemoryRequirements->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetImageSparseMemoryRequirements(
    format::HandleId                            device,
    format::HandleId                            image,
    PointerDecoder<uint32_t>*                   pSparseMemoryRequirementCount,
    StructPointerDecoder<Decoded_VkSparseImageMemoryRequirements>* pSparseMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetImageSparseMemoryRequirements\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage image
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"image\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, image); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pSparseMemoryRequirementCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSparseMemoryRequirementCount\",\n");
    if (pSparseMemoryRequirementCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSparseMemoryRequirementCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pSparseMemoryRequirementCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSparseImageMemoryRequirements* pSparseMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSparseImageMemoryRequirements*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSparseMemoryRequirements\",\n");
    if (pSparseMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSparseMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSparseImageMemoryRequirements>(outputFile, indent, "VkSparseImageMemoryRequirements", pSparseMemoryRequirements->GetMetaStructPointer(), "pSparseMemoryRequirements", *pSparseMemoryRequirementCount->GetPointer(), false, pSparseMemoryRequirements->GetAddress(), sizeof(VkSparseImageMemoryRequirements)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSparseImageFormatProperties(
    format::HandleId                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkSampleCountFlagBits                       samples,
    VkImageUsageFlags                           usage,
    VkImageTiling                               tiling,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkSparseImageFormatProperties>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSparseImageFormatProperties\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFormat format
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFormat"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"format\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkFormat(outputFile, format); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageType type
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageType"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"type\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageType(outputFile, type); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSampleCountFlagBits samples
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSampleCountFlagBits"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"samples\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, samples, EnumToStringVkSampleCountFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageUsageFlags usage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageUsageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"usage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, usage, EnumToStringVkImageUsageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageTiling tiling
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageTiling"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"tiling\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageTiling(outputFile, tiling); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSparseImageFormatProperties* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSparseImageFormatProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSparseImageFormatProperties>(outputFile, indent, "VkSparseImageFormatProperties", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkSparseImageFormatProperties)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkQueueBindSparse(
    VkResult                                    returnValue,
    format::HandleId                            queue,
    uint32_t                                    bindInfoCount,
    const StructPointerDecoder<Decoded_VkBindSparseInfo>& pBindInfo,
    format::HandleId                            fence)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkQueueBindSparse\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkQueue queue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queue\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queue); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bindInfoCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bindInfoCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bindInfoCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBindSparseInfo* pBindInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBindSparseInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBindInfo\",\n");
    if (pBindInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBindInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBindSparseInfo>(outputFile, indent, "VkBindSparseInfo", pBindInfo.GetMetaStructPointer(), "pBindInfo", bindInfoCount, false, pBindInfo.GetAddress(), sizeof(VkBindSparseInfo)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFence fence
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFence"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"fence\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, fence); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateFence(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkFenceCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkFence>*              pFence)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateFence\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkFenceCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkFenceCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFence* pFence
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFence*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFence\",\n");
    if (pFence->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFence->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pFence->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyFence(
    format::HandleId                            device,
    format::HandleId                            fence,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyFence\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFence fence
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFence"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"fence\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, fence); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkResetFences(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    fenceCount,
    const HandlePointerDecoder<VkFence>&        pFences)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkResetFences\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t fenceCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"fenceCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, fenceCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkFence* pFences
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkFence*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFences\",\n");
    if (pFences.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFences.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pFences = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkFence*", &pFences, "pFences", fenceCount, vinfo_pFences); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetFenceStatus(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            fence)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetFenceStatus\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFence fence
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFence"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"fence\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, fence); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkWaitForFences(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    fenceCount,
    const HandlePointerDecoder<VkFence>&        pFences,
    VkBool32                                    waitAll,
    uint64_t                                    timeout)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkWaitForFences\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t fenceCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"fenceCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, fenceCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkFence* pFences
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkFence*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFences\",\n");
    if (pFences.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFences.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pFences = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkFence*", &pFences, "pFences", fenceCount, vinfo_pFences); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBool32 waitAll
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBool32"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"waitAll\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, waitAll); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint64_t timeout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint64_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"timeout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, timeout); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateSemaphore(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkSemaphoreCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSemaphore>*          pSemaphore)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateSemaphore\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSemaphoreCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSemaphoreCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSemaphore* pSemaphore
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSemaphore*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSemaphore\",\n");
    if (pSemaphore->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSemaphore->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSemaphore->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroySemaphore(
    format::HandleId                            device,
    format::HandleId                            semaphore,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroySemaphore\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSemaphore semaphore
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSemaphore"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"semaphore\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, semaphore); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateEvent(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkEventCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkEvent>*              pEvent)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateEvent\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkEventCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkEventCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkEvent* pEvent
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkEvent*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pEvent\",\n");
    if (pEvent->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pEvent->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pEvent->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyEvent(
    format::HandleId                            device,
    format::HandleId                            event,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyEvent\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkEvent event
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkEvent"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"event\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, event); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetEventStatus(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            event)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetEventStatus\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkEvent event
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkEvent"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"event\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, event); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkSetEvent(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            event)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkSetEvent\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkEvent event
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkEvent"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"event\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, event); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkResetEvent(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            event)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkResetEvent\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkEvent event
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkEvent"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"event\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, event); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateQueryPool(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkQueryPoolCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkQueryPool>*          pQueryPool)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateQueryPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkQueryPoolCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkQueryPoolCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool* pQueryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueryPool\",\n");
    if (pQueryPool->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueryPool->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pQueryPool->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyQueryPool(
    format::HandleId                            device,
    format::HandleId                            queryPool,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyQueryPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetQueryPoolResults(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount,
    size_t                                      dataSize,
    PointerDecoder<uint8_t>*                    pData,
    VkDeviceSize                                stride,
    VkQueryResultFlags                          flags)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetQueryPoolResults\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstQuery
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstQuery\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstQuery); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queryCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queryCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: size_t dataSize
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"size_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dataSize\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, dataSize); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* pData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pData\",\n");
    if (pData->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pData->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pData = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "void*", pData, "pData", dataSize, vinfo_pData); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, stride); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryResultFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryResultFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, flags, EnumToStringVkQueryResultFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateBuffer(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkBufferCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkBuffer>*             pBuffer)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer* pBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBuffer\",\n");
    if (pBuffer->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBuffer->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pBuffer->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyBuffer(
    format::HandleId                            device,
    format::HandleId                            buffer,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateBufferView(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkBufferViewCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkBufferView>*         pView)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateBufferView\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferViewCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferViewCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBufferView* pView
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBufferView*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pView\",\n");
    if (pView->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pView->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pView->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyBufferView(
    format::HandleId                            device,
    format::HandleId                            bufferView,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyBufferView\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBufferView bufferView
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBufferView"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bufferView\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, bufferView); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateImage(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImageCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkImage>*              pImage)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateImage\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage* pImage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImage\",\n");
    if (pImage->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImage->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pImage->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyImage(
    format::HandleId                            device,
    format::HandleId                            image,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyImage\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage image
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"image\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, image); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetImageSubresourceLayout(
    format::HandleId                            device,
    format::HandleId                            image,
    const StructPointerDecoder<Decoded_VkImageSubresource>& pSubresource,
    StructPointerDecoder<Decoded_VkSubresourceLayout>* pLayout)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetImageSubresourceLayout\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage image
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"image\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, image); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageSubresource* pSubresource
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageSubresource*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSubresource\",\n");
    if (pSubresource.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSubresource.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSubresource.GetMetaStructPointer(), indent, pSubresource.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSubresourceLayout* pLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSubresourceLayout*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pLayout\",\n");
    if (pLayout->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pLayout->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pLayout->GetMetaStructPointer(), indent, pLayout->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateImageView(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImageViewCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkImageView>*          pView)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateImageView\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageViewCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageViewCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageView* pView
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageView*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pView\",\n");
    if (pView->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pView->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pView->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyImageView(
    format::HandleId                            device,
    format::HandleId                            imageView,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyImageView\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageView imageView
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageView"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"imageView\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, imageView); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateShaderModule(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkShaderModuleCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkShaderModule>*       pShaderModule)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateShaderModule\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkShaderModuleCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkShaderModuleCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkShaderModule* pShaderModule
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkShaderModule*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pShaderModule\",\n");
    if (pShaderModule->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pShaderModule->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pShaderModule->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyShaderModule(
    format::HandleId                            device,
    format::HandleId                            shaderModule,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyShaderModule\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkShaderModule shaderModule
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkShaderModule"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"shaderModule\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, shaderModule); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreatePipelineCache(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkPipelineCacheCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkPipelineCache>*      pPipelineCache)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreatePipelineCache\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPipelineCacheCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPipelineCacheCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineCache* pPipelineCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineCache*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPipelineCache\",\n");
    if (pPipelineCache->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPipelineCache->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pPipelineCache->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyPipelineCache(
    format::HandleId                            device,
    format::HandleId                            pipelineCache,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyPipelineCache\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineCache pipelineCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineCache"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineCache\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipelineCache); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPipelineCacheData(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            pipelineCache,
    PointerDecoder<size_t>*                     pDataSize,
    PointerDecoder<uint8_t>*                    pData)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPipelineCacheData\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineCache pipelineCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineCache"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineCache\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipelineCache); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: size_t* pDataSize
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"size_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDataSize\",\n");
    if (pDataSize->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDataSize->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pDataSize->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* pData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pData\",\n");
    if (pData->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pData->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pData = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "void*", pData, "pData", *pDataSize->GetPointer(), vinfo_pData); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkMergePipelineCaches(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            dstCache,
    uint32_t                                    srcCacheCount,
    const HandlePointerDecoder<VkPipelineCache>& pSrcCaches)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkMergePipelineCaches\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineCache dstCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineCache"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstCache\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstCache); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t srcCacheCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcCacheCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, srcCacheCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPipelineCache* pSrcCaches
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPipelineCache*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSrcCaches\",\n");
    if (pSrcCaches.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSrcCaches.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pSrcCaches = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkPipelineCache*", &pSrcCaches, "pSrcCaches", srcCacheCount, vinfo_pSrcCaches); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateGraphicsPipelines(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            pipelineCache,
    uint32_t                                    createInfoCount,
    const StructPointerDecoder<Decoded_VkGraphicsPipelineCreateInfo>& pCreateInfos,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkPipeline>*           pPipelines)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateGraphicsPipelines\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineCache pipelineCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineCache"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineCache\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipelineCache); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t createInfoCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"createInfoCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, createInfoCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkGraphicsPipelineCreateInfo* pCreateInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkGraphicsPipelineCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfos\",\n");
    if (pCreateInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkGraphicsPipelineCreateInfo>(outputFile, indent, "VkGraphicsPipelineCreateInfo", pCreateInfos.GetMetaStructPointer(), "pCreateInfos", createInfoCount, false, pCreateInfos.GetAddress(), sizeof(VkGraphicsPipelineCreateInfo)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipeline* pPipelines
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipeline*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPipelines\",\n");
    if (pPipelines->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPipelines->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pPipelines = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "VkPipeline*", pPipelines, "pPipelines", createInfoCount, vinfo_pPipelines); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateComputePipelines(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            pipelineCache,
    uint32_t                                    createInfoCount,
    const StructPointerDecoder<Decoded_VkComputePipelineCreateInfo>& pCreateInfos,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkPipeline>*           pPipelines)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateComputePipelines\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineCache pipelineCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineCache"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineCache\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipelineCache); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t createInfoCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"createInfoCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, createInfoCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkComputePipelineCreateInfo* pCreateInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkComputePipelineCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfos\",\n");
    if (pCreateInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkComputePipelineCreateInfo>(outputFile, indent, "VkComputePipelineCreateInfo", pCreateInfos.GetMetaStructPointer(), "pCreateInfos", createInfoCount, false, pCreateInfos.GetAddress(), sizeof(VkComputePipelineCreateInfo)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipeline* pPipelines
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipeline*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPipelines\",\n");
    if (pPipelines->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPipelines->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pPipelines = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "VkPipeline*", pPipelines, "pPipelines", createInfoCount, vinfo_pPipelines); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyPipeline(
    format::HandleId                            device,
    format::HandleId                            pipeline,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyPipeline\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipeline pipeline
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipeline"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipeline\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipeline); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreatePipelineLayout(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkPipelineLayoutCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkPipelineLayout>*     pPipelineLayout)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreatePipelineLayout\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPipelineLayoutCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPipelineLayoutCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineLayout* pPipelineLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineLayout*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPipelineLayout\",\n");
    if (pPipelineLayout->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPipelineLayout->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pPipelineLayout->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyPipelineLayout(
    format::HandleId                            device,
    format::HandleId                            pipelineLayout,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyPipelineLayout\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineLayout pipelineLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipelineLayout); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateSampler(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkSamplerCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSampler>*            pSampler)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateSampler\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSamplerCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSamplerCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSampler* pSampler
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSampler*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSampler\",\n");
    if (pSampler->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSampler->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSampler->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroySampler(
    format::HandleId                            device,
    format::HandleId                            sampler,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroySampler\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSampler sampler
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSampler"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"sampler\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, sampler); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateDescriptorSetLayout(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDescriptorSetLayoutCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkDescriptorSetLayout>* pSetLayout)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateDescriptorSetLayout\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDescriptorSetLayoutCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDescriptorSetLayoutCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorSetLayout* pSetLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorSetLayout*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSetLayout\",\n");
    if (pSetLayout->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSetLayout->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSetLayout->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyDescriptorSetLayout(
    format::HandleId                            device,
    format::HandleId                            descriptorSetLayout,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyDescriptorSetLayout\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorSetLayout descriptorSetLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorSetLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorSetLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, descriptorSetLayout); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateDescriptorPool(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDescriptorPoolCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkDescriptorPool>*     pDescriptorPool)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateDescriptorPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDescriptorPoolCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDescriptorPoolCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorPool* pDescriptorPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorPool*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDescriptorPool\",\n");
    if (pDescriptorPool->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDescriptorPool->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pDescriptorPool->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyDescriptorPool(
    format::HandleId                            device,
    format::HandleId                            descriptorPool,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyDescriptorPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorPool descriptorPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, descriptorPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkResetDescriptorPool(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            descriptorPool,
    VkDescriptorPoolResetFlags                  flags)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkResetDescriptorPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorPool descriptorPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, descriptorPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorPoolResetFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorPoolResetFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, flags); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkAllocateDescriptorSets(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDescriptorSetAllocateInfo>& pAllocateInfo,
    HandlePointerDecoder<VkDescriptorSet>*      pDescriptorSets)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkAllocateDescriptorSets\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDescriptorSetAllocateInfo* pAllocateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDescriptorSetAllocateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocateInfo\",\n");
    if (pAllocateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocateInfo.GetMetaStructPointer(), indent, pAllocateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorSet* pDescriptorSets
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorSet*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDescriptorSets\",\n");
    if (pDescriptorSets->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDescriptorSets->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pDescriptorSets = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "VkDescriptorSet*", pDescriptorSets, "pDescriptorSets", pAllocateInfo.GetPointer()->descriptorSetCount, vinfo_pDescriptorSets); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkFreeDescriptorSets(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            descriptorPool,
    uint32_t                                    descriptorSetCount,
    const HandlePointerDecoder<VkDescriptorSet>& pDescriptorSets)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkFreeDescriptorSets\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorPool descriptorPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, descriptorPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t descriptorSetCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorSetCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, descriptorSetCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDescriptorSet* pDescriptorSets
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDescriptorSet*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDescriptorSets\",\n");
    if (pDescriptorSets.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDescriptorSets.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pDescriptorSets = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkDescriptorSet*", &pDescriptorSets, "pDescriptorSets", descriptorSetCount, vinfo_pDescriptorSets); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkUpdateDescriptorSets(
    format::HandleId                            device,
    uint32_t                                    descriptorWriteCount,
    const StructPointerDecoder<Decoded_VkWriteDescriptorSet>& pDescriptorWrites,
    uint32_t                                    descriptorCopyCount,
    const StructPointerDecoder<Decoded_VkCopyDescriptorSet>& pDescriptorCopies)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkUpdateDescriptorSets\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t descriptorWriteCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorWriteCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, descriptorWriteCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkWriteDescriptorSet* pDescriptorWrites
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkWriteDescriptorSet*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDescriptorWrites\",\n");
    if (pDescriptorWrites.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDescriptorWrites.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkWriteDescriptorSet>(outputFile, indent, "VkWriteDescriptorSet", pDescriptorWrites.GetMetaStructPointer(), "pDescriptorWrites", descriptorWriteCount, false, pDescriptorWrites.GetAddress(), sizeof(VkWriteDescriptorSet)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t descriptorCopyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorCopyCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, descriptorCopyCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCopyDescriptorSet* pDescriptorCopies
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCopyDescriptorSet*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDescriptorCopies\",\n");
    if (pDescriptorCopies.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDescriptorCopies.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkCopyDescriptorSet>(outputFile, indent, "VkCopyDescriptorSet", pDescriptorCopies.GetMetaStructPointer(), "pDescriptorCopies", descriptorCopyCount, false, pDescriptorCopies.GetAddress(), sizeof(VkCopyDescriptorSet)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateFramebuffer(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkFramebufferCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkFramebuffer>*        pFramebuffer)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateFramebuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkFramebufferCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkFramebufferCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFramebuffer* pFramebuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFramebuffer*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFramebuffer\",\n");
    if (pFramebuffer->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFramebuffer->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pFramebuffer->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyFramebuffer(
    format::HandleId                            device,
    format::HandleId                            framebuffer,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyFramebuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFramebuffer framebuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFramebuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"framebuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, framebuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateRenderPass(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkRenderPassCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkRenderPass>*         pRenderPass)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateRenderPass\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkRenderPassCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkRenderPassCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkRenderPass* pRenderPass
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkRenderPass*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRenderPass\",\n");
    if (pRenderPass->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRenderPass->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pRenderPass->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyRenderPass(
    format::HandleId                            device,
    format::HandleId                            renderPass,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyRenderPass\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkRenderPass renderPass
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkRenderPass"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"renderPass\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, renderPass); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetRenderAreaGranularity(
    format::HandleId                            device,
    format::HandleId                            renderPass,
    StructPointerDecoder<Decoded_VkExtent2D>*   pGranularity)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetRenderAreaGranularity\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkRenderPass renderPass
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkRenderPass"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"renderPass\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, renderPass); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExtent2D* pGranularity
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExtent2D*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pGranularity\",\n");
    if (pGranularity->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pGranularity->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pGranularity->GetMetaStructPointer(), indent, pGranularity->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateCommandPool(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkCommandPoolCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkCommandPool>*        pCommandPool)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateCommandPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCommandPoolCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCommandPoolCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandPool* pCommandPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandPool*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCommandPool\",\n");
    if (pCommandPool->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCommandPool->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pCommandPool->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyCommandPool(
    format::HandleId                            device,
    format::HandleId                            commandPool,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyCommandPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandPool commandPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkResetCommandPool(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            commandPool,
    VkCommandPoolResetFlags                     flags)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkResetCommandPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandPool commandPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandPoolResetFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandPoolResetFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, flags, EnumToStringVkCommandPoolResetFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkAllocateCommandBuffers(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkCommandBufferAllocateInfo>& pAllocateInfo,
    HandlePointerDecoder<VkCommandBuffer>*      pCommandBuffers)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkAllocateCommandBuffers\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCommandBufferAllocateInfo* pAllocateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCommandBufferAllocateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocateInfo\",\n");
    if (pAllocateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocateInfo.GetMetaStructPointer(), indent, pAllocateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandBuffer* pCommandBuffers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCommandBuffers\",\n");
    if (pCommandBuffers->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCommandBuffers->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pCommandBuffers = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "VkCommandBuffer*", pCommandBuffers, "pCommandBuffers", pAllocateInfo.GetPointer()->commandBufferCount, vinfo_pCommandBuffers); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkFreeCommandBuffers(
    format::HandleId                            device,
    format::HandleId                            commandPool,
    uint32_t                                    commandBufferCount,
    const HandlePointerDecoder<VkCommandBuffer>& pCommandBuffers)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkFreeCommandBuffers\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandPool commandPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t commandBufferCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBufferCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, commandBufferCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCommandBuffer* pCommandBuffers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCommandBuffer*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCommandBuffers\",\n");
    if (pCommandBuffers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCommandBuffers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pCommandBuffers = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkCommandBuffer*", &pCommandBuffers, "pCommandBuffers", commandBufferCount, vinfo_pCommandBuffers); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkBeginCommandBuffer(
    VkResult                                    returnValue,
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkCommandBufferBeginInfo>& pBeginInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkBeginCommandBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCommandBufferBeginInfo* pBeginInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCommandBufferBeginInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBeginInfo\",\n");
    if (pBeginInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBeginInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pBeginInfo.GetMetaStructPointer(), indent, pBeginInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkEndCommandBuffer(
    VkResult                                    returnValue,
    format::HandleId                            commandBuffer)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkEndCommandBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkResetCommandBuffer(
    VkResult                                    returnValue,
    format::HandleId                            commandBuffer,
    VkCommandBufferResetFlags                   flags)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkResetCommandBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandBufferResetFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBufferResetFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, flags, EnumToStringVkCommandBufferResetFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBindPipeline(
    format::HandleId                            commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    format::HandleId                            pipeline)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBindPipeline\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineBindPoint pipelineBindPoint
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineBindPoint"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineBindPoint\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkPipelineBindPoint(outputFile, pipelineBindPoint); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipeline pipeline
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipeline"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipeline\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipeline); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetViewport(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    const StructPointerDecoder<Decoded_VkViewport>& pViewports)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetViewport\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstViewport
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstViewport\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstViewport); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t viewportCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"viewportCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, viewportCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkViewport* pViewports
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkViewport*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pViewports\",\n");
    if (pViewports.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pViewports.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkViewport>(outputFile, indent, "VkViewport", pViewports.GetMetaStructPointer(), "pViewports", viewportCount, false, pViewports.GetAddress(), sizeof(VkViewport)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetScissor(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstScissor,
    uint32_t                                    scissorCount,
    const StructPointerDecoder<Decoded_VkRect2D>& pScissors)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetScissor\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstScissor
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstScissor\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstScissor); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t scissorCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"scissorCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, scissorCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkRect2D* pScissors
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkRect2D*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pScissors\",\n");
    if (pScissors.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pScissors.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkRect2D>(outputFile, indent, "VkRect2D", pScissors.GetMetaStructPointer(), "pScissors", scissorCount, false, pScissors.GetAddress(), sizeof(VkRect2D)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetLineWidth(
    format::HandleId                            commandBuffer,
    float                                       lineWidth)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetLineWidth\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: float lineWidth
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"float"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"lineWidth\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    DoubleToStringJson(outputFile, lineWidth); // PEZ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetDepthBias(
    format::HandleId                            commandBuffer,
    float                                       depthBiasConstantFactor,
    float                                       depthBiasClamp,
    float                                       depthBiasSlopeFactor)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetDepthBias\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: float depthBiasConstantFactor
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"float"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"depthBiasConstantFactor\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    DoubleToStringJson(outputFile, depthBiasConstantFactor); // PEZ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: float depthBiasClamp
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"float"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"depthBiasClamp\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    DoubleToStringJson(outputFile, depthBiasClamp); // PEZ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: float depthBiasSlopeFactor
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"float"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"depthBiasSlopeFactor\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    DoubleToStringJson(outputFile, depthBiasSlopeFactor); // PEZ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetBlendConstants(
    format::HandleId                            commandBuffer,
    const PointerDecoder<float>&                blendConstants)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetBlendConstants\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const float blendConstants
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const float"); // NUN
    OutputStringJson(outputFile, "[");
    UnsignedDecimalToStringJson(outputFile, 4); // IAV
    OutputStringJson(outputFile, "]");
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"blendConstants\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"address\" : \""); // EAC
    AddrToStringJson(outputFile, blendConstants.GetAddress() /* UYA */ );
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"elements\" : ");
    ScalarValueToStringStruct vinfo_blendConstants = {false, false, false, nullptr};
    ArrayToStringJson(outputFile, indent, "const float", &blendConstants, "blendConstants", 4, vinfo_blendConstants); // AUA
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetDepthBounds(
    format::HandleId                            commandBuffer,
    float                                       minDepthBounds,
    float                                       maxDepthBounds)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetDepthBounds\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: float minDepthBounds
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"float"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"minDepthBounds\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    DoubleToStringJson(outputFile, minDepthBounds); // PEZ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: float maxDepthBounds
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"float"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"maxDepthBounds\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    DoubleToStringJson(outputFile, maxDepthBounds); // PEZ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetStencilCompareMask(
    format::HandleId                            commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    compareMask)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetStencilCompareMask\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkStencilFaceFlags faceMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkStencilFaceFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"faceMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, faceMask, EnumToStringVkStencilFaceFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t compareMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"compareMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, compareMask); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetStencilWriteMask(
    format::HandleId                            commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    writeMask)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetStencilWriteMask\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkStencilFaceFlags faceMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkStencilFaceFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"faceMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, faceMask, EnumToStringVkStencilFaceFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t writeMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"writeMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, writeMask); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetStencilReference(
    format::HandleId                            commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    reference)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetStencilReference\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkStencilFaceFlags faceMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkStencilFaceFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"faceMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, faceMask, EnumToStringVkStencilFaceFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t reference
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"reference\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, reference); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBindDescriptorSets(
    format::HandleId                            commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    format::HandleId                            layout,
    uint32_t                                    firstSet,
    uint32_t                                    descriptorSetCount,
    const HandlePointerDecoder<VkDescriptorSet>& pDescriptorSets,
    uint32_t                                    dynamicOffsetCount,
    const PointerDecoder<uint32_t>&             pDynamicOffsets)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBindDescriptorSets\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineBindPoint pipelineBindPoint
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineBindPoint"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineBindPoint\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkPipelineBindPoint(outputFile, pipelineBindPoint); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineLayout layout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"layout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, layout); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstSet
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstSet\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstSet); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t descriptorSetCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorSetCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, descriptorSetCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDescriptorSet* pDescriptorSets
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDescriptorSet*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDescriptorSets\",\n");
    if (pDescriptorSets.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDescriptorSets.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pDescriptorSets = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkDescriptorSet*", &pDescriptorSets, "pDescriptorSets", descriptorSetCount, vinfo_pDescriptorSets); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t dynamicOffsetCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dynamicOffsetCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, dynamicOffsetCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const uint32_t* pDynamicOffsets
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDynamicOffsets\",\n");
    if (pDynamicOffsets.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDynamicOffsets.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pDynamicOffsets = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const uint32_t*", &pDynamicOffsets, "pDynamicOffsets", dynamicOffsetCount, vinfo_pDynamicOffsets); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBindIndexBuffer(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset,
    VkIndexType                                 indexType)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBindIndexBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkIndexType indexType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkIndexType"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"indexType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkIndexType(outputFile, indexType); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBindVertexBuffers(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    const HandlePointerDecoder<VkBuffer>&       pBuffers,
    const PointerDecoder<VkDeviceSize>&         pOffsets)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBindVertexBuffers\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstBinding
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstBinding\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstBinding); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bindingCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bindingCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bindingCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBuffer* pBuffers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBuffer*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBuffers\",\n");
    if (pBuffers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBuffers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pBuffers = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkBuffer*", &pBuffers, "pBuffers", bindingCount, vinfo_pBuffers); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDeviceSize* pOffsets
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDeviceSize*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pOffsets\",\n");
    if (pOffsets.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pOffsets.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pOffsets = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkDeviceSize*", &pOffsets, "pOffsets", bindingCount, vinfo_pOffsets); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDraw(
    format::HandleId                            commandBuffer,
    uint32_t                                    vertexCount,
    uint32_t                                    instanceCount,
    uint32_t                                    firstVertex,
    uint32_t                                    firstInstance)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDraw\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t vertexCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"vertexCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, vertexCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t instanceCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instanceCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, instanceCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstVertex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstVertex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstVertex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstInstance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstInstance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstInstance); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDrawIndexed(
    format::HandleId                            commandBuffer,
    uint32_t                                    indexCount,
    uint32_t                                    instanceCount,
    uint32_t                                    firstIndex,
    int32_t                                     vertexOffset,
    uint32_t                                    firstInstance)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawIndexed\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t indexCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"indexCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, indexCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t instanceCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instanceCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, instanceCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: int32_t vertexOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"int32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"vertexOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, vertexOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstInstance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstInstance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstInstance); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDrawIndirect(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawIndirect\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t drawCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"drawCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, drawCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, stride); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDrawIndexedIndirect(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawIndexedIndirect\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t drawCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"drawCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, drawCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, stride); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDispatch(
    format::HandleId                            commandBuffer,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDispatch\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCountX
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCountX\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCountX); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCountY
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCountY\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCountY); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCountZ
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCountZ\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCountZ); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDispatchIndirect(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDispatchIndirect\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdCopyBuffer(
    format::HandleId                            commandBuffer,
    format::HandleId                            srcBuffer,
    format::HandleId                            dstBuffer,
    uint32_t                                    regionCount,
    const StructPointerDecoder<Decoded_VkBufferCopy>& pRegions)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdCopyBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer srcBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, srcBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer dstBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t regionCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"regionCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, regionCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferCopy* pRegions
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferCopy*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRegions\",\n");
    if (pRegions.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRegions.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBufferCopy>(outputFile, indent, "VkBufferCopy", pRegions.GetMetaStructPointer(), "pRegions", regionCount, false, pRegions.GetAddress(), sizeof(VkBufferCopy)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdCopyImage(
    format::HandleId                            commandBuffer,
    format::HandleId                            srcImage,
    VkImageLayout                               srcImageLayout,
    format::HandleId                            dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const StructPointerDecoder<Decoded_VkImageCopy>& pRegions)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdCopyImage\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage srcImage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcImage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, srcImage); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout srcImageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcImageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, srcImageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage dstImage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstImage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstImage); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout dstImageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstImageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, dstImageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t regionCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"regionCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, regionCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageCopy* pRegions
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageCopy*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRegions\",\n");
    if (pRegions.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRegions.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkImageCopy>(outputFile, indent, "VkImageCopy", pRegions.GetMetaStructPointer(), "pRegions", regionCount, false, pRegions.GetAddress(), sizeof(VkImageCopy)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBlitImage(
    format::HandleId                            commandBuffer,
    format::HandleId                            srcImage,
    VkImageLayout                               srcImageLayout,
    format::HandleId                            dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const StructPointerDecoder<Decoded_VkImageBlit>& pRegions,
    VkFilter                                    filter)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBlitImage\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage srcImage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcImage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, srcImage); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout srcImageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcImageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, srcImageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage dstImage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstImage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstImage); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout dstImageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstImageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, dstImageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t regionCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"regionCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, regionCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageBlit* pRegions
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageBlit*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRegions\",\n");
    if (pRegions.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRegions.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkImageBlit>(outputFile, indent, "VkImageBlit", pRegions.GetMetaStructPointer(), "pRegions", regionCount, false, pRegions.GetAddress(), sizeof(VkImageBlit)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFilter filter
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFilter"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"filter\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkFilter(outputFile, filter); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdCopyBufferToImage(
    format::HandleId                            commandBuffer,
    format::HandleId                            srcBuffer,
    format::HandleId                            dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const StructPointerDecoder<Decoded_VkBufferImageCopy>& pRegions)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdCopyBufferToImage\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer srcBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, srcBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage dstImage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstImage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstImage); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout dstImageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstImageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, dstImageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t regionCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"regionCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, regionCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferImageCopy* pRegions
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferImageCopy*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRegions\",\n");
    if (pRegions.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRegions.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBufferImageCopy>(outputFile, indent, "VkBufferImageCopy", pRegions.GetMetaStructPointer(), "pRegions", regionCount, false, pRegions.GetAddress(), sizeof(VkBufferImageCopy)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdCopyImageToBuffer(
    format::HandleId                            commandBuffer,
    format::HandleId                            srcImage,
    VkImageLayout                               srcImageLayout,
    format::HandleId                            dstBuffer,
    uint32_t                                    regionCount,
    const StructPointerDecoder<Decoded_VkBufferImageCopy>& pRegions)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdCopyImageToBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage srcImage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcImage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, srcImage); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout srcImageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcImageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, srcImageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer dstBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t regionCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"regionCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, regionCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferImageCopy* pRegions
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferImageCopy*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRegions\",\n");
    if (pRegions.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRegions.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBufferImageCopy>(outputFile, indent, "VkBufferImageCopy", pRegions.GetMetaStructPointer(), "pRegions", regionCount, false, pRegions.GetAddress(), sizeof(VkBufferImageCopy)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdUpdateBuffer(
    format::HandleId                            commandBuffer,
    format::HandleId                            dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                dataSize,
    const PointerDecoder<uint8_t>&              pData)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdUpdateBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer dstBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize dstOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, dstOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize dataSize
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dataSize\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, dataSize); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const void* pData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pData\",\n");
    if (pData.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pData.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdFillBuffer(
    format::HandleId                            commandBuffer,
    format::HandleId                            dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                size,
    uint32_t                                    data)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdFillBuffer\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer dstBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize dstOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, dstOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize size
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"size\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, size); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t data
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"data\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, data); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdClearColorImage(
    format::HandleId                            commandBuffer,
    format::HandleId                            image,
    VkImageLayout                               imageLayout,
    const StructPointerDecoder<Decoded_VkClearColorValue>& pColor,
    uint32_t                                    rangeCount,
    const StructPointerDecoder<Decoded_VkImageSubresourceRange>& pRanges)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdClearColorImage\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage image
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"image\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, image); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout imageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"imageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, imageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkClearColorValue* pColor
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkClearColorValue*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pColor\",\n");
    if (pColor.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pColor.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pColor.GetMetaStructPointer(), indent, pColor.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t rangeCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"rangeCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, rangeCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageSubresourceRange* pRanges
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageSubresourceRange*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRanges\",\n");
    if (pRanges.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRanges.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkImageSubresourceRange>(outputFile, indent, "VkImageSubresourceRange", pRanges.GetMetaStructPointer(), "pRanges", rangeCount, false, pRanges.GetAddress(), sizeof(VkImageSubresourceRange)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdClearDepthStencilImage(
    format::HandleId                            commandBuffer,
    format::HandleId                            image,
    VkImageLayout                               imageLayout,
    const StructPointerDecoder<Decoded_VkClearDepthStencilValue>& pDepthStencil,
    uint32_t                                    rangeCount,
    const StructPointerDecoder<Decoded_VkImageSubresourceRange>& pRanges)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdClearDepthStencilImage\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage image
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"image\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, image); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout imageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"imageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, imageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkClearDepthStencilValue* pDepthStencil
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkClearDepthStencilValue*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDepthStencil\",\n");
    if (pDepthStencil.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDepthStencil.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pDepthStencil.GetMetaStructPointer(), indent, pDepthStencil.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t rangeCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"rangeCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, rangeCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageSubresourceRange* pRanges
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageSubresourceRange*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRanges\",\n");
    if (pRanges.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRanges.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkImageSubresourceRange>(outputFile, indent, "VkImageSubresourceRange", pRanges.GetMetaStructPointer(), "pRanges", rangeCount, false, pRanges.GetAddress(), sizeof(VkImageSubresourceRange)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdClearAttachments(
    format::HandleId                            commandBuffer,
    uint32_t                                    attachmentCount,
    const StructPointerDecoder<Decoded_VkClearAttachment>& pAttachments,
    uint32_t                                    rectCount,
    const StructPointerDecoder<Decoded_VkClearRect>& pRects)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdClearAttachments\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t attachmentCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"attachmentCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, attachmentCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkClearAttachment* pAttachments
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkClearAttachment*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAttachments\",\n");
    if (pAttachments.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAttachments.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkClearAttachment>(outputFile, indent, "VkClearAttachment", pAttachments.GetMetaStructPointer(), "pAttachments", attachmentCount, false, pAttachments.GetAddress(), sizeof(VkClearAttachment)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t rectCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"rectCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, rectCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkClearRect* pRects
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkClearRect*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRects\",\n");
    if (pRects.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRects.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkClearRect>(outputFile, indent, "VkClearRect", pRects.GetMetaStructPointer(), "pRects", rectCount, false, pRects.GetAddress(), sizeof(VkClearRect)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdResolveImage(
    format::HandleId                            commandBuffer,
    format::HandleId                            srcImage,
    VkImageLayout                               srcImageLayout,
    format::HandleId                            dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const StructPointerDecoder<Decoded_VkImageResolve>& pRegions)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdResolveImage\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage srcImage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcImage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, srcImage); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout srcImageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcImageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, srcImageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage dstImage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstImage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstImage); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout dstImageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstImageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, dstImageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t regionCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"regionCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, regionCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageResolve* pRegions
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageResolve*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRegions\",\n");
    if (pRegions.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRegions.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkImageResolve>(outputFile, indent, "VkImageResolve", pRegions.GetMetaStructPointer(), "pRegions", regionCount, false, pRegions.GetAddress(), sizeof(VkImageResolve)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetEvent(
    format::HandleId                            commandBuffer,
    format::HandleId                            event,
    VkPipelineStageFlags                        stageMask)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetEvent\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkEvent event
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkEvent"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"event\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, event); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineStageFlags stageMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineStageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stageMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, stageMask, EnumToStringVkPipelineStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdResetEvent(
    format::HandleId                            commandBuffer,
    format::HandleId                            event,
    VkPipelineStageFlags                        stageMask)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdResetEvent\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkEvent event
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkEvent"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"event\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, event); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineStageFlags stageMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineStageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stageMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, stageMask, EnumToStringVkPipelineStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdWaitEvents(
    format::HandleId                            commandBuffer,
    uint32_t                                    eventCount,
    const HandlePointerDecoder<VkEvent>&        pEvents,
    VkPipelineStageFlags                        srcStageMask,
    VkPipelineStageFlags                        dstStageMask,
    uint32_t                                    memoryBarrierCount,
    const StructPointerDecoder<Decoded_VkMemoryBarrier>& pMemoryBarriers,
    uint32_t                                    bufferMemoryBarrierCount,
    const StructPointerDecoder<Decoded_VkBufferMemoryBarrier>& pBufferMemoryBarriers,
    uint32_t                                    imageMemoryBarrierCount,
    const StructPointerDecoder<Decoded_VkImageMemoryBarrier>& pImageMemoryBarriers)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdWaitEvents\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t eventCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"eventCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, eventCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkEvent* pEvents
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkEvent*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pEvents\",\n");
    if (pEvents.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pEvents.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pEvents = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkEvent*", &pEvents, "pEvents", eventCount, vinfo_pEvents); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineStageFlags srcStageMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineStageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcStageMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, srcStageMask, EnumToStringVkPipelineStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineStageFlags dstStageMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineStageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstStageMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, dstStageMask, EnumToStringVkPipelineStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t memoryBarrierCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memoryBarrierCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, memoryBarrierCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMemoryBarrier* pMemoryBarriers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMemoryBarrier*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryBarriers\",\n");
    if (pMemoryBarriers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryBarriers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkMemoryBarrier>(outputFile, indent, "VkMemoryBarrier", pMemoryBarriers.GetMetaStructPointer(), "pMemoryBarriers", memoryBarrierCount, false, pMemoryBarriers.GetAddress(), sizeof(VkMemoryBarrier)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bufferMemoryBarrierCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bufferMemoryBarrierCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bufferMemoryBarrierCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferMemoryBarrier* pBufferMemoryBarriers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferMemoryBarrier*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBufferMemoryBarriers\",\n");
    if (pBufferMemoryBarriers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBufferMemoryBarriers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBufferMemoryBarrier>(outputFile, indent, "VkBufferMemoryBarrier", pBufferMemoryBarriers.GetMetaStructPointer(), "pBufferMemoryBarriers", bufferMemoryBarrierCount, false, pBufferMemoryBarriers.GetAddress(), sizeof(VkBufferMemoryBarrier)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t imageMemoryBarrierCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"imageMemoryBarrierCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, imageMemoryBarrierCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageMemoryBarrier* pImageMemoryBarriers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageMemoryBarrier*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImageMemoryBarriers\",\n");
    if (pImageMemoryBarriers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImageMemoryBarriers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkImageMemoryBarrier>(outputFile, indent, "VkImageMemoryBarrier", pImageMemoryBarriers.GetMetaStructPointer(), "pImageMemoryBarriers", imageMemoryBarrierCount, false, pImageMemoryBarriers.GetAddress(), sizeof(VkImageMemoryBarrier)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdPipelineBarrier(
    format::HandleId                            commandBuffer,
    VkPipelineStageFlags                        srcStageMask,
    VkPipelineStageFlags                        dstStageMask,
    VkDependencyFlags                           dependencyFlags,
    uint32_t                                    memoryBarrierCount,
    const StructPointerDecoder<Decoded_VkMemoryBarrier>& pMemoryBarriers,
    uint32_t                                    bufferMemoryBarrierCount,
    const StructPointerDecoder<Decoded_VkBufferMemoryBarrier>& pBufferMemoryBarriers,
    uint32_t                                    imageMemoryBarrierCount,
    const StructPointerDecoder<Decoded_VkImageMemoryBarrier>& pImageMemoryBarriers)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdPipelineBarrier\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineStageFlags srcStageMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineStageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcStageMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, srcStageMask, EnumToStringVkPipelineStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineStageFlags dstStageMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineStageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstStageMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, dstStageMask, EnumToStringVkPipelineStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDependencyFlags dependencyFlags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDependencyFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dependencyFlags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, dependencyFlags, EnumToStringVkDependencyFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t memoryBarrierCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memoryBarrierCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, memoryBarrierCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMemoryBarrier* pMemoryBarriers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMemoryBarrier*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryBarriers\",\n");
    if (pMemoryBarriers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryBarriers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkMemoryBarrier>(outputFile, indent, "VkMemoryBarrier", pMemoryBarriers.GetMetaStructPointer(), "pMemoryBarriers", memoryBarrierCount, false, pMemoryBarriers.GetAddress(), sizeof(VkMemoryBarrier)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bufferMemoryBarrierCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bufferMemoryBarrierCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bufferMemoryBarrierCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferMemoryBarrier* pBufferMemoryBarriers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferMemoryBarrier*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBufferMemoryBarriers\",\n");
    if (pBufferMemoryBarriers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBufferMemoryBarriers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBufferMemoryBarrier>(outputFile, indent, "VkBufferMemoryBarrier", pBufferMemoryBarriers.GetMetaStructPointer(), "pBufferMemoryBarriers", bufferMemoryBarrierCount, false, pBufferMemoryBarriers.GetAddress(), sizeof(VkBufferMemoryBarrier)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t imageMemoryBarrierCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"imageMemoryBarrierCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, imageMemoryBarrierCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageMemoryBarrier* pImageMemoryBarriers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageMemoryBarrier*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImageMemoryBarriers\",\n");
    if (pImageMemoryBarriers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImageMemoryBarriers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkImageMemoryBarrier>(outputFile, indent, "VkImageMemoryBarrier", pImageMemoryBarriers.GetMetaStructPointer(), "pImageMemoryBarriers", imageMemoryBarrierCount, false, pImageMemoryBarriers.GetAddress(), sizeof(VkImageMemoryBarrier)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBeginQuery(
    format::HandleId                            commandBuffer,
    format::HandleId                            queryPool,
    uint32_t                                    query,
    VkQueryControlFlags                         flags)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBeginQuery\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t query
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"query\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, query); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryControlFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryControlFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, flags, EnumToStringVkQueryControlFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdEndQuery(
    format::HandleId                            commandBuffer,
    format::HandleId                            queryPool,
    uint32_t                                    query)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdEndQuery\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t query
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"query\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, query); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdResetQueryPool(
    format::HandleId                            commandBuffer,
    format::HandleId                            queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdResetQueryPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstQuery
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstQuery\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstQuery); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queryCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queryCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdWriteTimestamp(
    format::HandleId                            commandBuffer,
    VkPipelineStageFlagBits                     pipelineStage,
    format::HandleId                            queryPool,
    uint32_t                                    query)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdWriteTimestamp\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineStageFlagBits pipelineStage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineStageFlagBits"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineStage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, pipelineStage, EnumToStringVkPipelineStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t query
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"query\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, query); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdCopyQueryPoolResults(
    format::HandleId                            commandBuffer,
    format::HandleId                            queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount,
    format::HandleId                            dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                stride,
    VkQueryResultFlags                          flags)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdCopyQueryPoolResults\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstQuery
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstQuery\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstQuery); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queryCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queryCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer dstBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize dstOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, dstOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, stride); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryResultFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryResultFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, flags, EnumToStringVkQueryResultFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdPushConstants(
    format::HandleId                            commandBuffer,
    format::HandleId                            layout,
    VkShaderStageFlags                          stageFlags,
    uint32_t                                    offset,
    uint32_t                                    size,
    const PointerDecoder<uint8_t>&              pValues)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdPushConstants\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineLayout layout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"layout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, layout); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkShaderStageFlags stageFlags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkShaderStageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stageFlags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, stageFlags, EnumToStringVkShaderStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, offset); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t size
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"size\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, size); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const void* pValues
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pValues\",\n");
    if (pValues.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pValues.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pValues = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const void*", &pValues, "pValues", size, vinfo_pValues); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBeginRenderPass(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkRenderPassBeginInfo>& pRenderPassBegin,
    VkSubpassContents                           contents)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBeginRenderPass\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkRenderPassBeginInfo* pRenderPassBegin
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkRenderPassBeginInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRenderPassBegin\",\n");
    if (pRenderPassBegin.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRenderPassBegin.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pRenderPassBegin.GetMetaStructPointer(), indent, pRenderPassBegin.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSubpassContents contents
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSubpassContents"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"contents\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkSubpassContents(outputFile, contents); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdNextSubpass(
    format::HandleId                            commandBuffer,
    VkSubpassContents                           contents)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdNextSubpass\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSubpassContents contents
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSubpassContents"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"contents\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkSubpassContents(outputFile, contents); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdEndRenderPass(
    format::HandleId                            commandBuffer)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdEndRenderPass\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdExecuteCommands(
    format::HandleId                            commandBuffer,
    uint32_t                                    commandBufferCount,
    const HandlePointerDecoder<VkCommandBuffer>& pCommandBuffers)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdExecuteCommands\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t commandBufferCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBufferCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, commandBufferCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCommandBuffer* pCommandBuffers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCommandBuffer*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCommandBuffers\",\n");
    if (pCommandBuffers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCommandBuffers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pCommandBuffers = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkCommandBuffer*", &pCommandBuffers, "pCommandBuffers", commandBufferCount, vinfo_pCommandBuffers); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkBindBufferMemory2(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    bindInfoCount,
    const StructPointerDecoder<Decoded_VkBindBufferMemoryInfo>& pBindInfos)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkBindBufferMemory2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bindInfoCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bindInfoCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bindInfoCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBindBufferMemoryInfo* pBindInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBindBufferMemoryInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBindInfos\",\n");
    if (pBindInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBindInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBindBufferMemoryInfo>(outputFile, indent, "VkBindBufferMemoryInfo", pBindInfos.GetMetaStructPointer(), "pBindInfos", bindInfoCount, false, pBindInfos.GetAddress(), sizeof(VkBindBufferMemoryInfo)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkBindImageMemory2(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    bindInfoCount,
    const StructPointerDecoder<Decoded_VkBindImageMemoryInfo>& pBindInfos)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkBindImageMemory2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bindInfoCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bindInfoCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bindInfoCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBindImageMemoryInfo* pBindInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBindImageMemoryInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBindInfos\",\n");
    if (pBindInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBindInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBindImageMemoryInfo>(outputFile, indent, "VkBindImageMemoryInfo", pBindInfos.GetMetaStructPointer(), "pBindInfos", bindInfoCount, false, pBindInfos.GetAddress(), sizeof(VkBindImageMemoryInfo)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDeviceGroupPeerMemoryFeatures(
    format::HandleId                            device,
    uint32_t                                    heapIndex,
    uint32_t                                    localDeviceIndex,
    uint32_t                                    remoteDeviceIndex,
    PointerDecoder<VkPeerMemoryFeatureFlags>*   pPeerMemoryFeatures)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDeviceGroupPeerMemoryFeatures\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t heapIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"heapIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, heapIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t localDeviceIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"localDeviceIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, localDeviceIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t remoteDeviceIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"remoteDeviceIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, remoteDeviceIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPeerMemoryFeatureFlags*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPeerMemoryFeatures\",\n");
    if (pPeerMemoryFeatures->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPeerMemoryFeatures->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pPeerMemoryFeatures = {false, false, true, EnumToStringVkPeerMemoryFeatureFlagBits};
        ScalarValueToStringJson(outputFile, pPeerMemoryFeatures->GetPointer(), vinfo_pPeerMemoryFeatures); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetDeviceMask(
    format::HandleId                            commandBuffer,
    uint32_t                                    deviceMask)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetDeviceMask\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t deviceMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"deviceMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, deviceMask); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDispatchBase(
    format::HandleId                            commandBuffer,
    uint32_t                                    baseGroupX,
    uint32_t                                    baseGroupY,
    uint32_t                                    baseGroupZ,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDispatchBase\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t baseGroupX
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"baseGroupX\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, baseGroupX); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t baseGroupY
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"baseGroupY\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, baseGroupY); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t baseGroupZ
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"baseGroupZ\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, baseGroupZ); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCountX
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCountX\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCountX); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCountY
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCountY\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCountY); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCountZ
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCountZ\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCountZ); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkEnumeratePhysicalDeviceGroups(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    PointerDecoder<uint32_t>*                   pPhysicalDeviceGroupCount,
    StructPointerDecoder<Decoded_VkPhysicalDeviceGroupProperties>* pPhysicalDeviceGroupProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkEnumeratePhysicalDeviceGroups\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPhysicalDeviceGroupCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPhysicalDeviceGroupCount\",\n");
    if (pPhysicalDeviceGroupCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPhysicalDeviceGroupCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPhysicalDeviceGroupCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceGroupProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPhysicalDeviceGroupProperties\",\n");
    if (pPhysicalDeviceGroupProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPhysicalDeviceGroupProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkPhysicalDeviceGroupProperties>(outputFile, indent, "VkPhysicalDeviceGroupProperties", pPhysicalDeviceGroupProperties->GetMetaStructPointer(), "pPhysicalDeviceGroupProperties", *pPhysicalDeviceGroupCount->GetPointer(), false, pPhysicalDeviceGroupProperties->GetAddress(), sizeof(VkPhysicalDeviceGroupProperties)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetImageMemoryRequirements2(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImageMemoryRequirementsInfo2>& pInfo,
    StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetImageMemoryRequirements2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageMemoryRequirementsInfo2* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageMemoryRequirementsInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryRequirements2* pMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryRequirements2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryRequirements\",\n");
    if (pMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryRequirements->GetMetaStructPointer(), indent, pMemoryRequirements->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetBufferMemoryRequirements2(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkBufferMemoryRequirementsInfo2>& pInfo,
    StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetBufferMemoryRequirements2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferMemoryRequirementsInfo2* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferMemoryRequirementsInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryRequirements2* pMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryRequirements2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryRequirements\",\n");
    if (pMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryRequirements->GetMetaStructPointer(), indent, pMemoryRequirements->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetImageSparseMemoryRequirements2(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImageSparseMemoryRequirementsInfo2>& pInfo,
    PointerDecoder<uint32_t>*                   pSparseMemoryRequirementCount,
    StructPointerDecoder<Decoded_VkSparseImageMemoryRequirements2>* pSparseMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetImageSparseMemoryRequirements2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageSparseMemoryRequirementsInfo2* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageSparseMemoryRequirementsInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pSparseMemoryRequirementCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSparseMemoryRequirementCount\",\n");
    if (pSparseMemoryRequirementCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSparseMemoryRequirementCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pSparseMemoryRequirementCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSparseImageMemoryRequirements2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSparseMemoryRequirements\",\n");
    if (pSparseMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSparseMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSparseImageMemoryRequirements2>(outputFile, indent, "VkSparseImageMemoryRequirements2", pSparseMemoryRequirements->GetMetaStructPointer(), "pSparseMemoryRequirements", *pSparseMemoryRequirementCount->GetPointer(), false, pSparseMemoryRequirements->GetAddress(), sizeof(VkSparseImageMemoryRequirements2)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceFeatures2(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkPhysicalDeviceFeatures2>* pFeatures)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceFeatures2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceFeatures2* pFeatures
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceFeatures2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFeatures\",\n");
    if (pFeatures->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFeatures->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pFeatures->GetMetaStructPointer(), indent, pFeatures->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceProperties2(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkPhysicalDeviceProperties2>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceProperties2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceProperties2* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pProperties->GetMetaStructPointer(), indent, pProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceFormatProperties2(
    format::HandleId                            physicalDevice,
    VkFormat                                    format,
    StructPointerDecoder<Decoded_VkFormatProperties2>* pFormatProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceFormatProperties2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFormat format
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFormat"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"format\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkFormat(outputFile, format); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFormatProperties2* pFormatProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFormatProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFormatProperties\",\n");
    if (pFormatProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFormatProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pFormatProperties->GetMetaStructPointer(), indent, pFormatProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceImageFormatProperties2(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceImageFormatInfo2>& pImageFormatInfo,
    StructPointerDecoder<Decoded_VkImageFormatProperties2>* pImageFormatProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceImageFormatProperties2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceImageFormatInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImageFormatInfo\",\n");
    if (pImageFormatInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImageFormatInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pImageFormatInfo.GetMetaStructPointer(), indent, pImageFormatInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageFormatProperties2* pImageFormatProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageFormatProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImageFormatProperties\",\n");
    if (pImageFormatProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImageFormatProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pImageFormatProperties->GetMetaStructPointer(), indent, pImageFormatProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceQueueFamilyProperties2(
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pQueueFamilyPropertyCount,
    StructPointerDecoder<Decoded_VkQueueFamilyProperties2>* pQueueFamilyProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceQueueFamilyProperties2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pQueueFamilyPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueueFamilyPropertyCount\",\n");
    if (pQueueFamilyPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueueFamilyPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pQueueFamilyPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueueFamilyProperties2* pQueueFamilyProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueueFamilyProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueueFamilyProperties\",\n");
    if (pQueueFamilyProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueueFamilyProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkQueueFamilyProperties2>(outputFile, indent, "VkQueueFamilyProperties2", pQueueFamilyProperties->GetMetaStructPointer(), "pQueueFamilyProperties", *pQueueFamilyPropertyCount->GetPointer(), false, pQueueFamilyProperties->GetAddress(), sizeof(VkQueueFamilyProperties2)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceMemoryProperties2(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkPhysicalDeviceMemoryProperties2>* pMemoryProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceMemoryProperties2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceMemoryProperties2* pMemoryProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceMemoryProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryProperties\",\n");
    if (pMemoryProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryProperties->GetMetaStructPointer(), indent, pMemoryProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSparseImageFormatProperties2(
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceSparseImageFormatInfo2>& pFormatInfo,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkSparseImageFormatProperties2>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSparseImageFormatProperties2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceSparseImageFormatInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFormatInfo\",\n");
    if (pFormatInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFormatInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pFormatInfo.GetMetaStructPointer(), indent, pFormatInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSparseImageFormatProperties2* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSparseImageFormatProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSparseImageFormatProperties2>(outputFile, indent, "VkSparseImageFormatProperties2", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkSparseImageFormatProperties2)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkTrimCommandPool(
    format::HandleId                            device,
    format::HandleId                            commandPool,
    VkCommandPoolTrimFlags                      flags)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkTrimCommandPool\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandPool commandPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandPoolTrimFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandPoolTrimFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, flags); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDeviceQueue2(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDeviceQueueInfo2>& pQueueInfo,
    HandlePointerDecoder<VkQueue>*              pQueue)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDeviceQueue2\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDeviceQueueInfo2* pQueueInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDeviceQueueInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueueInfo\",\n");
    if (pQueueInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueueInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pQueueInfo.GetMetaStructPointer(), indent, pQueueInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueue* pQueue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueue\",\n");
    if (pQueue->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueue->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pQueue->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateSamplerYcbcrConversion(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkSamplerYcbcrConversionCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSamplerYcbcrConversion>* pYcbcrConversion)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateSamplerYcbcrConversion\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSamplerYcbcrConversionCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSamplerYcbcrConversionCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSamplerYcbcrConversion* pYcbcrConversion
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSamplerYcbcrConversion*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pYcbcrConversion\",\n");
    if (pYcbcrConversion->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pYcbcrConversion->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pYcbcrConversion->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroySamplerYcbcrConversion(
    format::HandleId                            device,
    format::HandleId                            ycbcrConversion,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroySamplerYcbcrConversion\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSamplerYcbcrConversion ycbcrConversion
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSamplerYcbcrConversion"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"ycbcrConversion\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, ycbcrConversion); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateDescriptorUpdateTemplate(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDescriptorUpdateTemplateCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkDescriptorUpdateTemplate>* pDescriptorUpdateTemplate)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateDescriptorUpdateTemplate\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDescriptorUpdateTemplateCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorUpdateTemplate*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDescriptorUpdateTemplate\",\n");
    if (pDescriptorUpdateTemplate->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDescriptorUpdateTemplate->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pDescriptorUpdateTemplate->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyDescriptorUpdateTemplate(
    format::HandleId                            device,
    format::HandleId                            descriptorUpdateTemplate,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyDescriptorUpdateTemplate\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorUpdateTemplate descriptorUpdateTemplate
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorUpdateTemplate"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorUpdateTemplate\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, descriptorUpdateTemplate); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceExternalBufferProperties(
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceExternalBufferInfo>& pExternalBufferInfo,
    StructPointerDecoder<Decoded_VkExternalBufferProperties>* pExternalBufferProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceExternalBufferProperties\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceExternalBufferInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalBufferInfo\",\n");
    if (pExternalBufferInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalBufferInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalBufferInfo.GetMetaStructPointer(), indent, pExternalBufferInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalBufferProperties* pExternalBufferProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalBufferProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalBufferProperties\",\n");
    if (pExternalBufferProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalBufferProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalBufferProperties->GetMetaStructPointer(), indent, pExternalBufferProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceExternalFenceProperties(
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceExternalFenceInfo>& pExternalFenceInfo,
    StructPointerDecoder<Decoded_VkExternalFenceProperties>* pExternalFenceProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceExternalFenceProperties\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceExternalFenceInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalFenceInfo\",\n");
    if (pExternalFenceInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalFenceInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalFenceInfo.GetMetaStructPointer(), indent, pExternalFenceInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalFenceProperties* pExternalFenceProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalFenceProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalFenceProperties\",\n");
    if (pExternalFenceProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalFenceProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalFenceProperties->GetMetaStructPointer(), indent, pExternalFenceProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceExternalSemaphoreProperties(
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceExternalSemaphoreInfo>& pExternalSemaphoreInfo,
    StructPointerDecoder<Decoded_VkExternalSemaphoreProperties>* pExternalSemaphoreProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceExternalSemaphoreProperties\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceExternalSemaphoreInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalSemaphoreInfo\",\n");
    if (pExternalSemaphoreInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalSemaphoreInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalSemaphoreInfo.GetMetaStructPointer(), indent, pExternalSemaphoreInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalSemaphoreProperties* pExternalSemaphoreProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalSemaphoreProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalSemaphoreProperties\",\n");
    if (pExternalSemaphoreProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalSemaphoreProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalSemaphoreProperties->GetMetaStructPointer(), indent, pExternalSemaphoreProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDescriptorSetLayoutSupport(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDescriptorSetLayoutCreateInfo>& pCreateInfo,
    StructPointerDecoder<Decoded_VkDescriptorSetLayoutSupport>* pSupport)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDescriptorSetLayoutSupport\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDescriptorSetLayoutCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDescriptorSetLayoutCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorSetLayoutSupport* pSupport
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorSetLayoutSupport*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSupport\",\n");
    if (pSupport->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSupport->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSupport->GetMetaStructPointer(), indent, pSupport->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkDestroySurfaceKHR(
    format::HandleId                            instance,
    format::HandleId                            surface,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroySurfaceKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR surface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"surface\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, surface); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSurfaceSupportKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    format::HandleId                            surface,
    PointerDecoder<VkBool32>*                   pSupported)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSurfaceSupportKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queueFamilyIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queueFamilyIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queueFamilyIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR surface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"surface\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, surface); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBool32* pSupported
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBool32*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSupported\",\n");
    if (pSupported->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSupported->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pSupported = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pSupported->GetPointer(), vinfo_pSupported); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            surface,
    StructPointerDecoder<Decoded_VkSurfaceCapabilitiesKHR>* pSurfaceCapabilities)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSurfaceCapabilitiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR surface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"surface\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, surface); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceCapabilitiesKHR* pSurfaceCapabilities
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceCapabilitiesKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceCapabilities\",\n");
    if (pSurfaceCapabilities->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceCapabilities->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSurfaceCapabilities->GetMetaStructPointer(), indent, pSurfaceCapabilities->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSurfaceFormatsKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            surface,
    PointerDecoder<uint32_t>*                   pSurfaceFormatCount,
    StructPointerDecoder<Decoded_VkSurfaceFormatKHR>* pSurfaceFormats)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSurfaceFormatsKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR surface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"surface\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, surface); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pSurfaceFormatCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceFormatCount\",\n");
    if (pSurfaceFormatCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceFormatCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pSurfaceFormatCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceFormatKHR* pSurfaceFormats
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceFormatKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceFormats\",\n");
    if (pSurfaceFormats->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceFormats->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSurfaceFormatKHR>(outputFile, indent, "VkSurfaceFormatKHR", pSurfaceFormats->GetMetaStructPointer(), "pSurfaceFormats", *pSurfaceFormatCount->GetPointer(), false, pSurfaceFormats->GetAddress(), sizeof(VkSurfaceFormatKHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSurfacePresentModesKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            surface,
    PointerDecoder<uint32_t>*                   pPresentModeCount,
    PointerDecoder<VkPresentModeKHR>*           pPresentModes)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSurfacePresentModesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR surface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"surface\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, surface); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPresentModeCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPresentModeCount\",\n");
    if (pPresentModeCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPresentModeCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPresentModeCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPresentModeKHR* pPresentModes
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPresentModeKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPresentModes\",\n");
    if (pPresentModes->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPresentModes->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pPresentModes = {false, true, false, EnumToStringVkPresentModeKHR};
        ArrayToStringJson(outputFile, indent, "VkPresentModeKHR*", pPresentModes, "pPresentModes", *pPresentModeCount->GetPointer(), vinfo_pPresentModes); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateSwapchainKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkSwapchainCreateInfoKHR>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSwapchainKHR>*       pSwapchain)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateSwapchainKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSwapchainCreateInfoKHR* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSwapchainCreateInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR* pSwapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSwapchain\",\n");
    if (pSwapchain->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSwapchain->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSwapchain->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroySwapchainKHR(
    format::HandleId                            device,
    format::HandleId                            swapchain,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroySwapchainKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapchain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetSwapchainImagesKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            swapchain,
    PointerDecoder<uint32_t>*                   pSwapchainImageCount,
    HandlePointerDecoder<VkImage>*              pSwapchainImages)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetSwapchainImagesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapchain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pSwapchainImageCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSwapchainImageCount\",\n");
    if (pSwapchainImageCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSwapchainImageCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pSwapchainImageCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage* pSwapchainImages
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSwapchainImages\",\n");
    if (pSwapchainImages->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSwapchainImages->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pSwapchainImages = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "VkImage*", pSwapchainImages, "pSwapchainImages", *pSwapchainImageCount->GetPointer(), vinfo_pSwapchainImages); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkAcquireNextImageKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            swapchain,
    uint64_t                                    timeout,
    format::HandleId                            semaphore,
    format::HandleId                            fence,
    PointerDecoder<uint32_t>*                   pImageIndex)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkAcquireNextImageKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapchain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint64_t timeout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint64_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"timeout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, timeout); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSemaphore semaphore
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSemaphore"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"semaphore\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, semaphore); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFence fence
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFence"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"fence\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, fence); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pImageIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImageIndex\",\n");
    if (pImageIndex->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImageIndex->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pImageIndex->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkQueuePresentKHR(
    VkResult                                    returnValue,
    format::HandleId                            queue,
    const StructPointerDecoder<Decoded_VkPresentInfoKHR>& pPresentInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkQueuePresentKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkQueue queue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queue\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queue); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPresentInfoKHR* pPresentInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPresentInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPresentInfo\",\n");
    if (pPresentInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPresentInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pPresentInfo.GetMetaStructPointer(), indent, pPresentInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}\n");

    static uint32_t frameNumber = 0;
    frameNumber++;
    IndentSpacesJson(outputFile, 1); // RWW
    OutputStringJson(outputFile, "]\n");
    OutputStringJson(outputFile, "},\n");
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 1);
    OutputStringJson(outputFile, "\"frameNumber\" : \"");
    SignedDecimalToStringJson(outputFile, frameNumber);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 1);
    OutputStringJson(outputFile, "\"apiCalls\" :\n");
    IndentSpacesJson(outputFile, 1);
    OutputStringJson(outputFile, "[\n");
    need_function_comma = false;

}

void VulkanJsonConsumer::Process_vkGetDeviceGroupPresentCapabilitiesKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    StructPointerDecoder<Decoded_VkDeviceGroupPresentCapabilitiesKHR>* pDeviceGroupPresentCapabilities)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDeviceGroupPresentCapabilitiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceGroupPresentCapabilitiesKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDeviceGroupPresentCapabilities\",\n");
    if (pDeviceGroupPresentCapabilities->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDeviceGroupPresentCapabilities->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pDeviceGroupPresentCapabilities->GetMetaStructPointer(), indent, pDeviceGroupPresentCapabilities->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDeviceGroupSurfacePresentModesKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            surface,
    PointerDecoder<VkDeviceGroupPresentModeFlagsKHR>* pModes)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDeviceGroupSurfacePresentModesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR surface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"surface\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, surface); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceGroupPresentModeFlagsKHR* pModes
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceGroupPresentModeFlagsKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pModes\",\n");
    if (pModes->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pModes->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pModes = {false, false, true, EnumToStringVkDeviceGroupPresentModeFlagBitsKHR};
        ScalarValueToStringJson(outputFile, pModes->GetPointer(), vinfo_pModes); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDevicePresentRectanglesKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            surface,
    PointerDecoder<uint32_t>*                   pRectCount,
    StructPointerDecoder<Decoded_VkRect2D>*     pRects)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDevicePresentRectanglesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR surface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"surface\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, surface); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pRectCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRectCount\",\n");
    if (pRectCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRectCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pRectCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkRect2D* pRects
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkRect2D*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRects\",\n");
    if (pRects->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRects->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkRect2D>(outputFile, indent, "VkRect2D", pRects->GetMetaStructPointer(), "pRects", *pRectCount->GetPointer(), false, pRects->GetAddress(), sizeof(VkRect2D)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkAcquireNextImage2KHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkAcquireNextImageInfoKHR>& pAcquireInfo,
    PointerDecoder<uint32_t>*                   pImageIndex)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkAcquireNextImage2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAcquireNextImageInfoKHR* pAcquireInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAcquireNextImageInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAcquireInfo\",\n");
    if (pAcquireInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAcquireInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAcquireInfo.GetMetaStructPointer(), indent, pAcquireInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pImageIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImageIndex\",\n");
    if (pImageIndex->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImageIndex->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pImageIndex->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceDisplayPropertiesKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkDisplayPropertiesKHR>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceDisplayPropertiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayPropertiesKHR* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayPropertiesKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkDisplayPropertiesKHR>(outputFile, indent, "VkDisplayPropertiesKHR", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkDisplayPropertiesKHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkDisplayPlanePropertiesKHR>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceDisplayPlanePropertiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayPlanePropertiesKHR* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayPlanePropertiesKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkDisplayPlanePropertiesKHR>(outputFile, indent, "VkDisplayPlanePropertiesKHR", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkDisplayPlanePropertiesKHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDisplayPlaneSupportedDisplaysKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    uint32_t                                    planeIndex,
    PointerDecoder<uint32_t>*                   pDisplayCount,
    HandlePointerDecoder<VkDisplayKHR>*         pDisplays)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDisplayPlaneSupportedDisplaysKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t planeIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"planeIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, planeIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pDisplayCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDisplayCount\",\n");
    if (pDisplayCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDisplayCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pDisplayCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayKHR* pDisplays
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDisplays\",\n");
    if (pDisplays->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDisplays->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pDisplays = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "VkDisplayKHR*", pDisplays, "pDisplays", *pDisplayCount->GetPointer(), vinfo_pDisplays); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDisplayModePropertiesKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            display,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkDisplayModePropertiesKHR>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDisplayModePropertiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayKHR display
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"display\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, display); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayModePropertiesKHR* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayModePropertiesKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkDisplayModePropertiesKHR>(outputFile, indent, "VkDisplayModePropertiesKHR", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkDisplayModePropertiesKHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateDisplayModeKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            display,
    const StructPointerDecoder<Decoded_VkDisplayModeCreateInfoKHR>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkDisplayModeKHR>*     pMode)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateDisplayModeKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayKHR display
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"display\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, display); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDisplayModeCreateInfoKHR* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDisplayModeCreateInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayModeKHR* pMode
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayModeKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMode\",\n");
    if (pMode->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMode->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pMode->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDisplayPlaneCapabilitiesKHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            mode,
    uint32_t                                    planeIndex,
    StructPointerDecoder<Decoded_VkDisplayPlaneCapabilitiesKHR>* pCapabilities)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDisplayPlaneCapabilitiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayModeKHR mode
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayModeKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"mode\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, mode); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t planeIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"planeIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, planeIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayPlaneCapabilitiesKHR* pCapabilities
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayPlaneCapabilitiesKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCapabilities\",\n");
    if (pCapabilities->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCapabilities->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCapabilities->GetMetaStructPointer(), indent, pCapabilities->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateDisplayPlaneSurfaceKHR(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkDisplaySurfaceCreateInfoKHR>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateDisplayPlaneSurfaceKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDisplaySurfaceCreateInfoKHR* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDisplaySurfaceCreateInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateSharedSwapchainsKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    swapchainCount,
    const StructPointerDecoder<Decoded_VkSwapchainCreateInfoKHR>& pCreateInfos,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSwapchainKHR>*       pSwapchains)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateSharedSwapchainsKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t swapchainCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchainCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, swapchainCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSwapchainCreateInfoKHR* pCreateInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSwapchainCreateInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfos\",\n");
    if (pCreateInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSwapchainCreateInfoKHR>(outputFile, indent, "VkSwapchainCreateInfoKHR", pCreateInfos.GetMetaStructPointer(), "pCreateInfos", swapchainCount, false, pCreateInfos.GetAddress(), sizeof(VkSwapchainCreateInfoKHR)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR* pSwapchains
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSwapchains\",\n");
    if (pSwapchains->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSwapchains->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pSwapchains = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "VkSwapchainKHR*", pSwapchains, "pSwapchains", swapchainCount, vinfo_pSwapchains); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateXlibSurfaceKHR(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkXlibSurfaceCreateInfoKHR>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateXlibSurfaceKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkXlibSurfaceCreateInfoKHR* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkXlibSurfaceCreateInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceXlibPresentationSupportKHR(
    VkBool32                                    returnValue,
    format::HandleId                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    uint64_t                                    dpy,
    size_t                                      visualID)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceXlibPresentationSupportKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkBool32\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    char rval_str[100];
    snprintf(rval_str, sizeof(rval_str), "%u", returnValue);
    OutputStringJson(outputFile, rval_str);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queueFamilyIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queueFamilyIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queueFamilyIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* dpy
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dpy\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dpy); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: size_t visualID
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"size_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"visualID\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, visualID); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateXcbSurfaceKHR(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkXcbSurfaceCreateInfoKHR>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateXcbSurfaceKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkXcbSurfaceCreateInfoKHR* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkXcbSurfaceCreateInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceXcbPresentationSupportKHR(
    VkBool32                                    returnValue,
    format::HandleId                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    uint64_t                                    connection,
    uint32_t                                    visual_id)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceXcbPresentationSupportKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkBool32\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    char rval_str[100];
    snprintf(rval_str, sizeof(rval_str), "%u", returnValue);
    OutputStringJson(outputFile, rval_str);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queueFamilyIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queueFamilyIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queueFamilyIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* connection
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"connection\",\n");
    if ( !connection) // WWW
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, connection /* ACF */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, connection); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t visual_id
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"visual_id\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, visual_id); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateWaylandSurfaceKHR(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkWaylandSurfaceCreateInfoKHR>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateWaylandSurfaceKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkWaylandSurfaceCreateInfoKHR* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkWaylandSurfaceCreateInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    VkBool32                                    returnValue,
    format::HandleId                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    uint64_t                                    display)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceWaylandPresentationSupportKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkBool32\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    char rval_str[100];
    snprintf(rval_str, sizeof(rval_str), "%u", returnValue);
    OutputStringJson(outputFile, rval_str);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queueFamilyIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queueFamilyIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queueFamilyIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: struct void* display
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"struct void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"display\",\n");
    if ( !display) // WWW
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, display /* ACF */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, display); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateAndroidSurfaceKHR(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkAndroidSurfaceCreateInfoKHR>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateAndroidSurfaceKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAndroidSurfaceCreateInfoKHR* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAndroidSurfaceCreateInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateWin32SurfaceKHR(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkWin32SurfaceCreateInfoKHR>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateWin32SurfaceKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkWin32SurfaceCreateInfoKHR* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkWin32SurfaceCreateInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceWin32PresentationSupportKHR(
    VkBool32                                    returnValue,
    format::HandleId                            physicalDevice,
    uint32_t                                    queueFamilyIndex)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceWin32PresentationSupportKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkBool32\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    char rval_str[100];
    snprintf(rval_str, sizeof(rval_str), "%u", returnValue);
    OutputStringJson(outputFile, rval_str);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queueFamilyIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queueFamilyIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queueFamilyIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceFeatures2KHR(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkPhysicalDeviceFeatures2>* pFeatures)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceFeatures2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceFeatures2* pFeatures
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceFeatures2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFeatures\",\n");
    if (pFeatures->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFeatures->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pFeatures->GetMetaStructPointer(), indent, pFeatures->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceProperties2KHR(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkPhysicalDeviceProperties2>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceProperties2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceProperties2* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pProperties->GetMetaStructPointer(), indent, pProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceFormatProperties2KHR(
    format::HandleId                            physicalDevice,
    VkFormat                                    format,
    StructPointerDecoder<Decoded_VkFormatProperties2>* pFormatProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceFormatProperties2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFormat format
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFormat"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"format\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkFormat(outputFile, format); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFormatProperties2* pFormatProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFormatProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFormatProperties\",\n");
    if (pFormatProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFormatProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pFormatProperties->GetMetaStructPointer(), indent, pFormatProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceImageFormatProperties2KHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceImageFormatInfo2>& pImageFormatInfo,
    StructPointerDecoder<Decoded_VkImageFormatProperties2>* pImageFormatProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceImageFormatProperties2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceImageFormatInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImageFormatInfo\",\n");
    if (pImageFormatInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImageFormatInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pImageFormatInfo.GetMetaStructPointer(), indent, pImageFormatInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageFormatProperties2* pImageFormatProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageFormatProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImageFormatProperties\",\n");
    if (pImageFormatProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImageFormatProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pImageFormatProperties->GetMetaStructPointer(), indent, pImageFormatProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pQueueFamilyPropertyCount,
    StructPointerDecoder<Decoded_VkQueueFamilyProperties2>* pQueueFamilyProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceQueueFamilyProperties2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pQueueFamilyPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueueFamilyPropertyCount\",\n");
    if (pQueueFamilyPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueueFamilyPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pQueueFamilyPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueueFamilyProperties2* pQueueFamilyProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueueFamilyProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pQueueFamilyProperties\",\n");
    if (pQueueFamilyProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pQueueFamilyProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkQueueFamilyProperties2>(outputFile, indent, "VkQueueFamilyProperties2", pQueueFamilyProperties->GetMetaStructPointer(), "pQueueFamilyProperties", *pQueueFamilyPropertyCount->GetPointer(), false, pQueueFamilyProperties->GetAddress(), sizeof(VkQueueFamilyProperties2)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceMemoryProperties2KHR(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkPhysicalDeviceMemoryProperties2>* pMemoryProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceMemoryProperties2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceMemoryProperties2* pMemoryProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceMemoryProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryProperties\",\n");
    if (pMemoryProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryProperties->GetMetaStructPointer(), indent, pMemoryProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceSparseImageFormatInfo2>& pFormatInfo,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkSparseImageFormatProperties2>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSparseImageFormatProperties2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceSparseImageFormatInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFormatInfo\",\n");
    if (pFormatInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFormatInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pFormatInfo.GetMetaStructPointer(), indent, pFormatInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSparseImageFormatProperties2* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSparseImageFormatProperties2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSparseImageFormatProperties2>(outputFile, indent, "VkSparseImageFormatProperties2", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkSparseImageFormatProperties2)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetDeviceGroupPeerMemoryFeaturesKHR(
    format::HandleId                            device,
    uint32_t                                    heapIndex,
    uint32_t                                    localDeviceIndex,
    uint32_t                                    remoteDeviceIndex,
    PointerDecoder<VkPeerMemoryFeatureFlags>*   pPeerMemoryFeatures)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDeviceGroupPeerMemoryFeaturesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t heapIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"heapIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, heapIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t localDeviceIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"localDeviceIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, localDeviceIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t remoteDeviceIndex
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"remoteDeviceIndex\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, remoteDeviceIndex); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPeerMemoryFeatureFlags* pPeerMemoryFeatures
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPeerMemoryFeatureFlags*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPeerMemoryFeatures\",\n");
    if (pPeerMemoryFeatures->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPeerMemoryFeatures->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pPeerMemoryFeatures = {false, false, true, EnumToStringVkPeerMemoryFeatureFlagBits};
        ScalarValueToStringJson(outputFile, pPeerMemoryFeatures->GetPointer(), vinfo_pPeerMemoryFeatures); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetDeviceMaskKHR(
    format::HandleId                            commandBuffer,
    uint32_t                                    deviceMask)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetDeviceMaskKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t deviceMask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"deviceMask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, deviceMask); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDispatchBaseKHR(
    format::HandleId                            commandBuffer,
    uint32_t                                    baseGroupX,
    uint32_t                                    baseGroupY,
    uint32_t                                    baseGroupZ,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDispatchBaseKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t baseGroupX
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"baseGroupX\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, baseGroupX); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t baseGroupY
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"baseGroupY\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, baseGroupY); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t baseGroupZ
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"baseGroupZ\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, baseGroupZ); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCountX
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCountX\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCountX); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCountY
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCountY\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCountY); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCountZ
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCountZ\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCountZ); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkTrimCommandPoolKHR(
    format::HandleId                            device,
    format::HandleId                            commandPool,
    VkCommandPoolTrimFlags                      flags)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkTrimCommandPoolKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandPool commandPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCommandPoolTrimFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandPoolTrimFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, flags); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkEnumeratePhysicalDeviceGroupsKHR(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    PointerDecoder<uint32_t>*                   pPhysicalDeviceGroupCount,
    StructPointerDecoder<Decoded_VkPhysicalDeviceGroupProperties>* pPhysicalDeviceGroupProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkEnumeratePhysicalDeviceGroupsKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPhysicalDeviceGroupCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPhysicalDeviceGroupCount\",\n");
    if (pPhysicalDeviceGroupCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPhysicalDeviceGroupCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPhysicalDeviceGroupCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDeviceGroupProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPhysicalDeviceGroupProperties\",\n");
    if (pPhysicalDeviceGroupProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPhysicalDeviceGroupProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkPhysicalDeviceGroupProperties>(outputFile, indent, "VkPhysicalDeviceGroupProperties", pPhysicalDeviceGroupProperties->GetMetaStructPointer(), "pPhysicalDeviceGroupProperties", *pPhysicalDeviceGroupCount->GetPointer(), false, pPhysicalDeviceGroupProperties->GetAddress(), sizeof(VkPhysicalDeviceGroupProperties)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceExternalBufferInfo>& pExternalBufferInfo,
    StructPointerDecoder<Decoded_VkExternalBufferProperties>* pExternalBufferProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceExternalBufferPropertiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceExternalBufferInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalBufferInfo\",\n");
    if (pExternalBufferInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalBufferInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalBufferInfo.GetMetaStructPointer(), indent, pExternalBufferInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalBufferProperties* pExternalBufferProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalBufferProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalBufferProperties\",\n");
    if (pExternalBufferProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalBufferProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalBufferProperties->GetMetaStructPointer(), indent, pExternalBufferProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetMemoryWin32HandleKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkMemoryGetWin32HandleInfoKHR>& pGetWin32HandleInfo,
    PointerDecoder<uint64_t, void*>*            pHandle)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetMemoryWin32HandleKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMemoryGetWin32HandleInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pGetWin32HandleInfo\",\n");
    if (pGetWin32HandleInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pGetWin32HandleInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pGetWin32HandleInfo.GetMetaStructPointer(), indent, pGetWin32HandleInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void** pHandle
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void**"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pHandle\",\n");
    if (pHandle->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pHandle->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pHandle = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pHandle->GetPointer(), vinfo_pHandle); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetMemoryWin32HandlePropertiesKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    uint64_t                                    handle,
    StructPointerDecoder<Decoded_VkMemoryWin32HandlePropertiesKHR>* pMemoryWin32HandleProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetMemoryWin32HandlePropertiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalMemoryHandleTypeFlagBits"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"handleType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, handleType, EnumToStringVkExternalMemoryHandleTypeFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* handle
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"handle\",\n");
    if ( !handle) // WWW
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, handle /* ACF */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, handle); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryWin32HandlePropertiesKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryWin32HandleProperties\",\n");
    if (pMemoryWin32HandleProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryWin32HandleProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryWin32HandleProperties->GetMetaStructPointer(), indent, pMemoryWin32HandleProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetMemoryFdKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkMemoryGetFdInfoKHR>& pGetFdInfo,
    PointerDecoder<int>*                        pFd)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetMemoryFdKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMemoryGetFdInfoKHR* pGetFdInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMemoryGetFdInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pGetFdInfo\",\n");
    if (pGetFdInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pGetFdInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pGetFdInfo.GetMetaStructPointer(), indent, pGetFdInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: int* pFd
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"int*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFd\",\n");
    if (pFd->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFd->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pFd = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pFd->GetPointer(), vinfo_pFd); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetMemoryFdPropertiesKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    int                                         fd,
    StructPointerDecoder<Decoded_VkMemoryFdPropertiesKHR>* pMemoryFdProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetMemoryFdPropertiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalMemoryHandleTypeFlagBits"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"handleType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, handleType, EnumToStringVkExternalMemoryHandleTypeFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: int fd
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"int"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"fd\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, fd); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryFdPropertiesKHR* pMemoryFdProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryFdPropertiesKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryFdProperties\",\n");
    if (pMemoryFdProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryFdProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryFdProperties->GetMetaStructPointer(), indent, pMemoryFdProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceExternalSemaphoreInfo>& pExternalSemaphoreInfo,
    StructPointerDecoder<Decoded_VkExternalSemaphoreProperties>* pExternalSemaphoreProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceExternalSemaphoreInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalSemaphoreInfo\",\n");
    if (pExternalSemaphoreInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalSemaphoreInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalSemaphoreInfo.GetMetaStructPointer(), indent, pExternalSemaphoreInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalSemaphoreProperties* pExternalSemaphoreProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalSemaphoreProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalSemaphoreProperties\",\n");
    if (pExternalSemaphoreProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalSemaphoreProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalSemaphoreProperties->GetMetaStructPointer(), indent, pExternalSemaphoreProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkImportSemaphoreWin32HandleKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImportSemaphoreWin32HandleInfoKHR>& pImportSemaphoreWin32HandleInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkImportSemaphoreWin32HandleKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImportSemaphoreWin32HandleInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImportSemaphoreWin32HandleInfo\",\n");
    if (pImportSemaphoreWin32HandleInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImportSemaphoreWin32HandleInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pImportSemaphoreWin32HandleInfo.GetMetaStructPointer(), indent, pImportSemaphoreWin32HandleInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetSemaphoreWin32HandleKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkSemaphoreGetWin32HandleInfoKHR>& pGetWin32HandleInfo,
    PointerDecoder<uint64_t, void*>*            pHandle)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetSemaphoreWin32HandleKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSemaphoreGetWin32HandleInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pGetWin32HandleInfo\",\n");
    if (pGetWin32HandleInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pGetWin32HandleInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pGetWin32HandleInfo.GetMetaStructPointer(), indent, pGetWin32HandleInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void** pHandle
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void**"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pHandle\",\n");
    if (pHandle->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pHandle->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pHandle = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pHandle->GetPointer(), vinfo_pHandle); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkImportSemaphoreFdKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImportSemaphoreFdInfoKHR>& pImportSemaphoreFdInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkImportSemaphoreFdKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImportSemaphoreFdInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImportSemaphoreFdInfo\",\n");
    if (pImportSemaphoreFdInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImportSemaphoreFdInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pImportSemaphoreFdInfo.GetMetaStructPointer(), indent, pImportSemaphoreFdInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetSemaphoreFdKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkSemaphoreGetFdInfoKHR>& pGetFdInfo,
    PointerDecoder<int>*                        pFd)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetSemaphoreFdKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSemaphoreGetFdInfoKHR* pGetFdInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSemaphoreGetFdInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pGetFdInfo\",\n");
    if (pGetFdInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pGetFdInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pGetFdInfo.GetMetaStructPointer(), indent, pGetFdInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: int* pFd
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"int*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFd\",\n");
    if (pFd->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFd->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pFd = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pFd->GetPointer(), vinfo_pFd); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdPushDescriptorSetKHR(
    format::HandleId                            commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    format::HandleId                            layout,
    uint32_t                                    set,
    uint32_t                                    descriptorWriteCount,
    const StructPointerDecoder<Decoded_VkWriteDescriptorSet>& pDescriptorWrites)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdPushDescriptorSetKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineBindPoint pipelineBindPoint
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineBindPoint"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineBindPoint\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkPipelineBindPoint(outputFile, pipelineBindPoint); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineLayout layout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"layout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, layout); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t set
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"set\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, set); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t descriptorWriteCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorWriteCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, descriptorWriteCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkWriteDescriptorSet* pDescriptorWrites
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkWriteDescriptorSet*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDescriptorWrites\",\n");
    if (pDescriptorWrites.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDescriptorWrites.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkWriteDescriptorSet>(outputFile, indent, "VkWriteDescriptorSet", pDescriptorWrites.GetMetaStructPointer(), "pDescriptorWrites", descriptorWriteCount, false, pDescriptorWrites.GetAddress(), sizeof(VkWriteDescriptorSet)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateDescriptorUpdateTemplateKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDescriptorUpdateTemplateCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkDescriptorUpdateTemplate>* pDescriptorUpdateTemplate)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateDescriptorUpdateTemplateKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDescriptorUpdateTemplateCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorUpdateTemplate*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDescriptorUpdateTemplate\",\n");
    if (pDescriptorUpdateTemplate->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDescriptorUpdateTemplate->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pDescriptorUpdateTemplate->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyDescriptorUpdateTemplateKHR(
    format::HandleId                            device,
    format::HandleId                            descriptorUpdateTemplate,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyDescriptorUpdateTemplateKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorUpdateTemplate descriptorUpdateTemplate
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorUpdateTemplate"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"descriptorUpdateTemplate\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, descriptorUpdateTemplate); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateRenderPass2KHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkRenderPassCreateInfo2KHR>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkRenderPass>*         pRenderPass)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateRenderPass2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkRenderPassCreateInfo2KHR* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkRenderPassCreateInfo2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkRenderPass* pRenderPass
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkRenderPass*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRenderPass\",\n");
    if (pRenderPass->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRenderPass->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pRenderPass->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBeginRenderPass2KHR(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkRenderPassBeginInfo>& pRenderPassBegin,
    const StructPointerDecoder<Decoded_VkSubpassBeginInfoKHR>& pSubpassBeginInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBeginRenderPass2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkRenderPassBeginInfo* pRenderPassBegin
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkRenderPassBeginInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pRenderPassBegin\",\n");
    if (pRenderPassBegin.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pRenderPassBegin.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pRenderPassBegin.GetMetaStructPointer(), indent, pRenderPassBegin.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSubpassBeginInfoKHR* pSubpassBeginInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSubpassBeginInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSubpassBeginInfo\",\n");
    if (pSubpassBeginInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSubpassBeginInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSubpassBeginInfo.GetMetaStructPointer(), indent, pSubpassBeginInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdNextSubpass2KHR(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkSubpassBeginInfoKHR>& pSubpassBeginInfo,
    const StructPointerDecoder<Decoded_VkSubpassEndInfoKHR>& pSubpassEndInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdNextSubpass2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSubpassBeginInfoKHR* pSubpassBeginInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSubpassBeginInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSubpassBeginInfo\",\n");
    if (pSubpassBeginInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSubpassBeginInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSubpassBeginInfo.GetMetaStructPointer(), indent, pSubpassBeginInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSubpassEndInfoKHR* pSubpassEndInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSubpassEndInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSubpassEndInfo\",\n");
    if (pSubpassEndInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSubpassEndInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSubpassEndInfo.GetMetaStructPointer(), indent, pSubpassEndInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdEndRenderPass2KHR(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkSubpassEndInfoKHR>& pSubpassEndInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdEndRenderPass2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSubpassEndInfoKHR* pSubpassEndInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSubpassEndInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSubpassEndInfo\",\n");
    if (pSubpassEndInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSubpassEndInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSubpassEndInfo.GetMetaStructPointer(), indent, pSubpassEndInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetSwapchainStatusKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            swapchain)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetSwapchainStatusKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapchain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceExternalFencePropertiesKHR(
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceExternalFenceInfo>& pExternalFenceInfo,
    StructPointerDecoder<Decoded_VkExternalFenceProperties>* pExternalFenceProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceExternalFencePropertiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceExternalFenceInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalFenceInfo\",\n");
    if (pExternalFenceInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalFenceInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalFenceInfo.GetMetaStructPointer(), indent, pExternalFenceInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalFenceProperties* pExternalFenceProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalFenceProperties*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalFenceProperties\",\n");
    if (pExternalFenceProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalFenceProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalFenceProperties->GetMetaStructPointer(), indent, pExternalFenceProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkImportFenceWin32HandleKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImportFenceWin32HandleInfoKHR>& pImportFenceWin32HandleInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkImportFenceWin32HandleKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImportFenceWin32HandleInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImportFenceWin32HandleInfo\",\n");
    if (pImportFenceWin32HandleInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImportFenceWin32HandleInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pImportFenceWin32HandleInfo.GetMetaStructPointer(), indent, pImportFenceWin32HandleInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetFenceWin32HandleKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkFenceGetWin32HandleInfoKHR>& pGetWin32HandleInfo,
    PointerDecoder<uint64_t, void*>*            pHandle)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetFenceWin32HandleKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkFenceGetWin32HandleInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pGetWin32HandleInfo\",\n");
    if (pGetWin32HandleInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pGetWin32HandleInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pGetWin32HandleInfo.GetMetaStructPointer(), indent, pGetWin32HandleInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void** pHandle
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void**"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pHandle\",\n");
    if (pHandle->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pHandle->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pHandle = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pHandle->GetPointer(), vinfo_pHandle); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkImportFenceFdKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImportFenceFdInfoKHR>& pImportFenceFdInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkImportFenceFdKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImportFenceFdInfoKHR* pImportFenceFdInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImportFenceFdInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pImportFenceFdInfo\",\n");
    if (pImportFenceFdInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pImportFenceFdInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pImportFenceFdInfo.GetMetaStructPointer(), indent, pImportFenceFdInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetFenceFdKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkFenceGetFdInfoKHR>& pGetFdInfo,
    PointerDecoder<int>*                        pFd)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetFenceFdKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkFenceGetFdInfoKHR* pGetFdInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkFenceGetFdInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pGetFdInfo\",\n");
    if (pGetFdInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pGetFdInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pGetFdInfo.GetMetaStructPointer(), indent, pGetFdInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: int* pFd
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"int*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFd\",\n");
    if (pFd->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFd->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pFd = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pFd->GetPointer(), vinfo_pFd); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceSurfaceInfo2KHR>& pSurfaceInfo,
    StructPointerDecoder<Decoded_VkSurfaceCapabilities2KHR>* pSurfaceCapabilities)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSurfaceCapabilities2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceSurfaceInfo2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceInfo\",\n");
    if (pSurfaceInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSurfaceInfo.GetMetaStructPointer(), indent, pSurfaceInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceCapabilities2KHR* pSurfaceCapabilities
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceCapabilities2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceCapabilities\",\n");
    if (pSurfaceCapabilities->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceCapabilities->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSurfaceCapabilities->GetMetaStructPointer(), indent, pSurfaceCapabilities->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSurfaceFormats2KHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceSurfaceInfo2KHR>& pSurfaceInfo,
    PointerDecoder<uint32_t>*                   pSurfaceFormatCount,
    StructPointerDecoder<Decoded_VkSurfaceFormat2KHR>* pSurfaceFormats)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSurfaceFormats2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceSurfaceInfo2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceInfo\",\n");
    if (pSurfaceInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSurfaceInfo.GetMetaStructPointer(), indent, pSurfaceInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pSurfaceFormatCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceFormatCount\",\n");
    if (pSurfaceFormatCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceFormatCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pSurfaceFormatCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceFormat2KHR* pSurfaceFormats
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceFormat2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceFormats\",\n");
    if (pSurfaceFormats->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceFormats->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSurfaceFormat2KHR>(outputFile, indent, "VkSurfaceFormat2KHR", pSurfaceFormats->GetMetaStructPointer(), "pSurfaceFormats", *pSurfaceFormatCount->GetPointer(), false, pSurfaceFormats->GetAddress(), sizeof(VkSurfaceFormat2KHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceDisplayProperties2KHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkDisplayProperties2KHR>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceDisplayProperties2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayProperties2KHR* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayProperties2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkDisplayProperties2KHR>(outputFile, indent, "VkDisplayProperties2KHR", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkDisplayProperties2KHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkDisplayPlaneProperties2KHR>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceDisplayPlaneProperties2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayPlaneProperties2KHR* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayPlaneProperties2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkDisplayPlaneProperties2KHR>(outputFile, indent, "VkDisplayPlaneProperties2KHR", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkDisplayPlaneProperties2KHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDisplayModeProperties2KHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            display,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkDisplayModeProperties2KHR>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDisplayModeProperties2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayKHR display
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"display\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, display); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayModeProperties2KHR* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayModeProperties2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkDisplayModeProperties2KHR>(outputFile, indent, "VkDisplayModeProperties2KHR", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkDisplayModeProperties2KHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDisplayPlaneCapabilities2KHR(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkDisplayPlaneInfo2KHR>& pDisplayPlaneInfo,
    StructPointerDecoder<Decoded_VkDisplayPlaneCapabilities2KHR>* pCapabilities)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDisplayPlaneCapabilities2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDisplayPlaneInfo2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDisplayPlaneInfo\",\n");
    if (pDisplayPlaneInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDisplayPlaneInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pDisplayPlaneInfo.GetMetaStructPointer(), indent, pDisplayPlaneInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayPlaneCapabilities2KHR* pCapabilities
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayPlaneCapabilities2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCapabilities\",\n");
    if (pCapabilities->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCapabilities->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCapabilities->GetMetaStructPointer(), indent, pCapabilities->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetImageMemoryRequirements2KHR(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImageMemoryRequirementsInfo2>& pInfo,
    StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetImageMemoryRequirements2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageMemoryRequirementsInfo2* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageMemoryRequirementsInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryRequirements2* pMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryRequirements2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryRequirements\",\n");
    if (pMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryRequirements->GetMetaStructPointer(), indent, pMemoryRequirements->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetBufferMemoryRequirements2KHR(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkBufferMemoryRequirementsInfo2>& pInfo,
    StructPointerDecoder<Decoded_VkMemoryRequirements2>* pMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetBufferMemoryRequirements2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferMemoryRequirementsInfo2* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferMemoryRequirementsInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryRequirements2* pMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryRequirements2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryRequirements\",\n");
    if (pMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryRequirements->GetMetaStructPointer(), indent, pMemoryRequirements->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetImageSparseMemoryRequirements2KHR(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImageSparseMemoryRequirementsInfo2>& pInfo,
    PointerDecoder<uint32_t>*                   pSparseMemoryRequirementCount,
    StructPointerDecoder<Decoded_VkSparseImageMemoryRequirements2>* pSparseMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetImageSparseMemoryRequirements2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageSparseMemoryRequirementsInfo2* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageSparseMemoryRequirementsInfo2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pSparseMemoryRequirementCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSparseMemoryRequirementCount\",\n");
    if (pSparseMemoryRequirementCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSparseMemoryRequirementCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pSparseMemoryRequirementCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSparseImageMemoryRequirements2* pSparseMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSparseImageMemoryRequirements2*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSparseMemoryRequirements\",\n");
    if (pSparseMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSparseMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkSparseImageMemoryRequirements2>(outputFile, indent, "VkSparseImageMemoryRequirements2", pSparseMemoryRequirements->GetMetaStructPointer(), "pSparseMemoryRequirements", *pSparseMemoryRequirementCount->GetPointer(), false, pSparseMemoryRequirements->GetAddress(), sizeof(VkSparseImageMemoryRequirements2)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateSamplerYcbcrConversionKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkSamplerYcbcrConversionCreateInfo>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSamplerYcbcrConversion>* pYcbcrConversion)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateSamplerYcbcrConversionKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSamplerYcbcrConversionCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSamplerYcbcrConversionCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSamplerYcbcrConversion* pYcbcrConversion
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSamplerYcbcrConversion*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pYcbcrConversion\",\n");
    if (pYcbcrConversion->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pYcbcrConversion->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pYcbcrConversion->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroySamplerYcbcrConversionKHR(
    format::HandleId                            device,
    format::HandleId                            ycbcrConversion,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroySamplerYcbcrConversionKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSamplerYcbcrConversion ycbcrConversion
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSamplerYcbcrConversion"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"ycbcrConversion\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, ycbcrConversion); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkBindBufferMemory2KHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    bindInfoCount,
    const StructPointerDecoder<Decoded_VkBindBufferMemoryInfo>& pBindInfos)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkBindBufferMemory2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bindInfoCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bindInfoCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bindInfoCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBindBufferMemoryInfo* pBindInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBindBufferMemoryInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBindInfos\",\n");
    if (pBindInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBindInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBindBufferMemoryInfo>(outputFile, indent, "VkBindBufferMemoryInfo", pBindInfos.GetMetaStructPointer(), "pBindInfos", bindInfoCount, false, pBindInfos.GetAddress(), sizeof(VkBindBufferMemoryInfo)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkBindImageMemory2KHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    bindInfoCount,
    const StructPointerDecoder<Decoded_VkBindImageMemoryInfo>& pBindInfos)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkBindImageMemory2KHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bindInfoCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bindInfoCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bindInfoCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBindImageMemoryInfo* pBindInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBindImageMemoryInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBindInfos\",\n");
    if (pBindInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBindInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBindImageMemoryInfo>(outputFile, indent, "VkBindImageMemoryInfo", pBindInfos.GetMetaStructPointer(), "pBindInfos", bindInfoCount, false, pBindInfos.GetAddress(), sizeof(VkBindImageMemoryInfo)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetDescriptorSetLayoutSupportKHR(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDescriptorSetLayoutCreateInfo>& pCreateInfo,
    StructPointerDecoder<Decoded_VkDescriptorSetLayoutSupport>* pSupport)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDescriptorSetLayoutSupportKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDescriptorSetLayoutCreateInfo* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDescriptorSetLayoutCreateInfo*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDescriptorSetLayoutSupport* pSupport
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDescriptorSetLayoutSupport*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSupport\",\n");
    if (pSupport->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSupport->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSupport->GetMetaStructPointer(), indent, pSupport->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdDrawIndirectCountKHR(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset,
    format::HandleId                            countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawIndirectCountKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer countBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, countBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize countBufferOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBufferOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, countBufferOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t maxDrawCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"maxDrawCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, maxDrawCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, stride); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDrawIndexedIndirectCountKHR(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset,
    format::HandleId                            countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawIndexedIndirectCountKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer countBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, countBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize countBufferOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBufferOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, countBufferOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t maxDrawCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"maxDrawCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, maxDrawCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, stride); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetSemaphoreCounterValueKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            semaphore,
    PointerDecoder<uint64_t>*                   pValue)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetSemaphoreCounterValueKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSemaphore semaphore
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSemaphore"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"semaphore\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, semaphore); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint64_t* pValue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint64_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pValue\",\n");
    if (pValue->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pValue->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pValue->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkWaitSemaphoresKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkSemaphoreWaitInfoKHR>& pWaitInfo,
    uint64_t                                    timeout)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkWaitSemaphoresKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSemaphoreWaitInfoKHR* pWaitInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSemaphoreWaitInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pWaitInfo\",\n");
    if (pWaitInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pWaitInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pWaitInfo.GetMetaStructPointer(), indent, pWaitInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint64_t timeout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint64_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"timeout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, timeout); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkSignalSemaphoreKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkSemaphoreSignalInfoKHR>& pSignalInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkSignalSemaphoreKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSemaphoreSignalInfoKHR* pSignalInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSemaphoreSignalInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSignalInfo\",\n");
    if (pSignalInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSignalInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSignalInfo.GetMetaStructPointer(), indent, pSignalInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPipelineExecutablePropertiesKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkPipelineInfoKHR>& pPipelineInfo,
    PointerDecoder<uint32_t>*                   pExecutableCount,
    StructPointerDecoder<Decoded_VkPipelineExecutablePropertiesKHR>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPipelineExecutablePropertiesKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPipelineInfoKHR* pPipelineInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPipelineInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPipelineInfo\",\n");
    if (pPipelineInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPipelineInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pPipelineInfo.GetMetaStructPointer(), indent, pPipelineInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pExecutableCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExecutableCount\",\n");
    if (pExecutableCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExecutableCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pExecutableCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineExecutablePropertiesKHR* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineExecutablePropertiesKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkPipelineExecutablePropertiesKHR>(outputFile, indent, "VkPipelineExecutablePropertiesKHR", pProperties->GetMetaStructPointer(), "pProperties", *pExecutableCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkPipelineExecutablePropertiesKHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPipelineExecutableStatisticsKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkPipelineExecutableInfoKHR>& pExecutableInfo,
    PointerDecoder<uint32_t>*                   pStatisticCount,
    StructPointerDecoder<Decoded_VkPipelineExecutableStatisticKHR>* pStatistics)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPipelineExecutableStatisticsKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPipelineExecutableInfoKHR* pExecutableInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPipelineExecutableInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExecutableInfo\",\n");
    if (pExecutableInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExecutableInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExecutableInfo.GetMetaStructPointer(), indent, pExecutableInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pStatisticCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pStatisticCount\",\n");
    if (pStatisticCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pStatisticCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pStatisticCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineExecutableStatisticKHR* pStatistics
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineExecutableStatisticKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pStatistics\",\n");
    if (pStatistics->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pStatistics->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkPipelineExecutableStatisticKHR>(outputFile, indent, "VkPipelineExecutableStatisticKHR", pStatistics->GetMetaStructPointer(), "pStatistics", *pStatisticCount->GetPointer(), false, pStatistics->GetAddress(), sizeof(VkPipelineExecutableStatisticKHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPipelineExecutableInternalRepresentationsKHR(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkPipelineExecutableInfoKHR>& pExecutableInfo,
    PointerDecoder<uint32_t>*                   pInternalRepresentationCount,
    StructPointerDecoder<Decoded_VkPipelineExecutableInternalRepresentationKHR>* pInternalRepresentations)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPipelineExecutableInternalRepresentationsKHR\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPipelineExecutableInfoKHR* pExecutableInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPipelineExecutableInfoKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExecutableInfo\",\n");
    if (pExecutableInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExecutableInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExecutableInfo.GetMetaStructPointer(), indent, pExecutableInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pInternalRepresentationCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInternalRepresentationCount\",\n");
    if (pInternalRepresentationCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInternalRepresentationCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pInternalRepresentationCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineExecutableInternalRepresentationKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInternalRepresentations\",\n");
    if (pInternalRepresentations->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInternalRepresentations->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkPipelineExecutableInternalRepresentationKHR>(outputFile, indent, "VkPipelineExecutableInternalRepresentationKHR", pInternalRepresentations->GetMetaStructPointer(), "pInternalRepresentations", *pInternalRepresentationCount->GetPointer(), false, pInternalRepresentations->GetAddress(), sizeof(VkPipelineExecutableInternalRepresentationKHR)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateDebugReportCallbackEXT(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkDebugReportCallbackCreateInfoEXT>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkDebugReportCallbackEXT>* pCallback)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateDebugReportCallbackEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugReportCallbackCreateInfoEXT* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugReportCallbackCreateInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDebugReportCallbackEXT* pCallback
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDebugReportCallbackEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCallback\",\n");
    if (pCallback->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCallback->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pCallback->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyDebugReportCallbackEXT(
    format::HandleId                            instance,
    format::HandleId                            callback,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyDebugReportCallbackEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDebugReportCallbackEXT callback
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDebugReportCallbackEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"callback\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, callback); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDebugReportMessageEXT(
    format::HandleId                            instance,
    VkDebugReportFlagsEXT                       flags,
    VkDebugReportObjectTypeEXT                  objectType,
    uint64_t                                    object,
    size_t                                      location,
    int32_t                                     messageCode,
    const StringDecoder&                        pLayerPrefix,
    const StringDecoder&                        pMessage)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDebugReportMessageEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDebugReportFlagsEXT flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDebugReportFlagsEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, flags, EnumToStringVkDebugReportFlagBitsEXT); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDebugReportObjectTypeEXT objectType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDebugReportObjectTypeEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"objectType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkDebugReportObjectTypeEXT(outputFile, objectType); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint64_t object
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint64_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"object\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, object); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: size_t location
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"size_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"location\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, location); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: int32_t messageCode
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"int32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"messageCode\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, messageCode); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const char* pLayerPrefix
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const char*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pLayerPrefix\",\n");
    if (pLayerPrefix.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pLayerPrefix.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : ");
        StringToQuotedStringJson(outputFile, pLayerPrefix.GetPointer()); // TUJ
        OutputStringJson(outputFile, "\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const char* pMessage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const char*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMessage\",\n");
    if (pMessage.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMessage.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : ");
        StringToQuotedStringJson(outputFile, pMessage.GetPointer()); // TUJ
        OutputStringJson(outputFile, "\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkDebugMarkerSetObjectTagEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDebugMarkerObjectTagInfoEXT>& pTagInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDebugMarkerSetObjectTagEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugMarkerObjectTagInfoEXT* pTagInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugMarkerObjectTagInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pTagInfo\",\n");
    if (pTagInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pTagInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pTagInfo.GetMetaStructPointer(), indent, pTagInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDebugMarkerSetObjectNameEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDebugMarkerObjectNameInfoEXT>& pNameInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDebugMarkerSetObjectNameEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugMarkerObjectNameInfoEXT* pNameInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugMarkerObjectNameInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pNameInfo\",\n");
    if (pNameInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pNameInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pNameInfo.GetMetaStructPointer(), indent, pNameInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDebugMarkerBeginEXT(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkDebugMarkerMarkerInfoEXT>& pMarkerInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDebugMarkerBeginEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugMarkerMarkerInfoEXT* pMarkerInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugMarkerMarkerInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMarkerInfo\",\n");
    if (pMarkerInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMarkerInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMarkerInfo.GetMetaStructPointer(), indent, pMarkerInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDebugMarkerEndEXT(
    format::HandleId                            commandBuffer)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDebugMarkerEndEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDebugMarkerInsertEXT(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkDebugMarkerMarkerInfoEXT>& pMarkerInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDebugMarkerInsertEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugMarkerMarkerInfoEXT* pMarkerInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugMarkerMarkerInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMarkerInfo\",\n");
    if (pMarkerInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMarkerInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMarkerInfo.GetMetaStructPointer(), indent, pMarkerInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdBindTransformFeedbackBuffersEXT(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    const HandlePointerDecoder<VkBuffer>&       pBuffers,
    const PointerDecoder<VkDeviceSize>&         pOffsets,
    const PointerDecoder<VkDeviceSize>&         pSizes)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBindTransformFeedbackBuffersEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstBinding
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstBinding\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstBinding); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bindingCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bindingCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bindingCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBuffer* pBuffers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBuffer*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBuffers\",\n");
    if (pBuffers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBuffers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pBuffers = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkBuffer*", &pBuffers, "pBuffers", bindingCount, vinfo_pBuffers); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDeviceSize* pOffsets
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDeviceSize*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pOffsets\",\n");
    if (pOffsets.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pOffsets.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pOffsets = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkDeviceSize*", &pOffsets, "pOffsets", bindingCount, vinfo_pOffsets); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDeviceSize* pSizes
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDeviceSize*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSizes\",\n");
    if (pSizes.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSizes.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pSizes = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkDeviceSize*", &pSizes, "pSizes", bindingCount, vinfo_pSizes); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBeginTransformFeedbackEXT(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstCounterBuffer,
    uint32_t                                    counterBufferCount,
    const HandlePointerDecoder<VkBuffer>&       pCounterBuffers,
    const PointerDecoder<VkDeviceSize>&         pCounterBufferOffsets)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBeginTransformFeedbackEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstCounterBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstCounterBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstCounterBuffer); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t counterBufferCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"counterBufferCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, counterBufferCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBuffer* pCounterBuffers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBuffer*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCounterBuffers\",\n");
    if (pCounterBuffers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCounterBuffers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pCounterBuffers = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkBuffer*", &pCounterBuffers, "pCounterBuffers", counterBufferCount, vinfo_pCounterBuffers); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDeviceSize* pCounterBufferOffsets
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDeviceSize*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCounterBufferOffsets\",\n");
    if (pCounterBufferOffsets.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCounterBufferOffsets.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pCounterBufferOffsets = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkDeviceSize*", &pCounterBufferOffsets, "pCounterBufferOffsets", counterBufferCount, vinfo_pCounterBufferOffsets); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdEndTransformFeedbackEXT(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstCounterBuffer,
    uint32_t                                    counterBufferCount,
    const HandlePointerDecoder<VkBuffer>&       pCounterBuffers,
    const PointerDecoder<VkDeviceSize>&         pCounterBufferOffsets)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdEndTransformFeedbackEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstCounterBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstCounterBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstCounterBuffer); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t counterBufferCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"counterBufferCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, counterBufferCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBuffer* pCounterBuffers
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBuffer*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCounterBuffers\",\n");
    if (pCounterBuffers.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCounterBuffers.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pCounterBuffers = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkBuffer*", &pCounterBuffers, "pCounterBuffers", counterBufferCount, vinfo_pCounterBuffers); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDeviceSize* pCounterBufferOffsets
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDeviceSize*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCounterBufferOffsets\",\n");
    if (pCounterBufferOffsets.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCounterBufferOffsets.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pCounterBufferOffsets = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkDeviceSize*", &pCounterBufferOffsets, "pCounterBufferOffsets", counterBufferCount, vinfo_pCounterBufferOffsets); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBeginQueryIndexedEXT(
    format::HandleId                            commandBuffer,
    format::HandleId                            queryPool,
    uint32_t                                    query,
    VkQueryControlFlags                         flags,
    uint32_t                                    index)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBeginQueryIndexedEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t query
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"query\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, query); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryControlFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryControlFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, flags, EnumToStringVkQueryControlFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t index
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"index\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, index); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdEndQueryIndexedEXT(
    format::HandleId                            commandBuffer,
    format::HandleId                            queryPool,
    uint32_t                                    query,
    uint32_t                                    index)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdEndQueryIndexedEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t query
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"query\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, query); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t index
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"index\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, index); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDrawIndirectByteCountEXT(
    format::HandleId                            commandBuffer,
    uint32_t                                    instanceCount,
    uint32_t                                    firstInstance,
    format::HandleId                            counterBuffer,
    VkDeviceSize                                counterBufferOffset,
    uint32_t                                    counterOffset,
    uint32_t                                    vertexStride)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawIndirectByteCountEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t instanceCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instanceCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, instanceCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstInstance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstInstance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstInstance); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer counterBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"counterBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, counterBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize counterBufferOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"counterBufferOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, counterBufferOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t counterOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"counterOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, counterOffset); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t vertexStride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"vertexStride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, vertexStride); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetImageViewHandleNVX(
    uint32_t                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkImageViewHandleInfoNVX>& pInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetImageViewHandleNVX\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"uint32_t\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    char rval_str[100];
    snprintf(rval_str, sizeof(rval_str), "%u", returnValue);
    OutputStringJson(outputFile, rval_str);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImageViewHandleInfoNVX* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImageViewHandleInfoNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdDrawIndirectCountAMD(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset,
    format::HandleId                            countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawIndirectCountAMD\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer countBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, countBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize countBufferOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBufferOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, countBufferOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t maxDrawCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"maxDrawCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, maxDrawCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, stride); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDrawIndexedIndirectCountAMD(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset,
    format::HandleId                            countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawIndexedIndirectCountAMD\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer countBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, countBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize countBufferOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBufferOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, countBufferOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t maxDrawCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"maxDrawCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, maxDrawCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, stride); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetShaderInfoAMD(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            pipeline,
    VkShaderStageFlagBits                       shaderStage,
    VkShaderInfoTypeAMD                         infoType,
    PointerDecoder<size_t>*                     pInfoSize,
    PointerDecoder<uint8_t>*                    pInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetShaderInfoAMD\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipeline pipeline
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipeline"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipeline\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipeline); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkShaderStageFlagBits shaderStage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkShaderStageFlagBits"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"shaderStage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, shaderStage, EnumToStringVkShaderStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkShaderInfoTypeAMD infoType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkShaderInfoTypeAMD"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"infoType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkShaderInfoTypeAMD(outputFile, infoType); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: size_t* pInfoSize
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"size_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfoSize\",\n");
    if (pInfoSize->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfoSize->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pInfoSize->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pInfo = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "void*", pInfo, "pInfo", *pInfoSize->GetPointer(), vinfo_pInfo); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateStreamDescriptorSurfaceGGP(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkStreamDescriptorSurfaceCreateInfoGGP>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateStreamDescriptorSurfaceGGP\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkStreamDescriptorSurfaceCreateInfoGGP*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkImageTiling                               tiling,
    VkImageUsageFlags                           usage,
    VkImageCreateFlags                          flags,
    VkExternalMemoryHandleTypeFlagsNV           externalHandleType,
    StructPointerDecoder<Decoded_VkExternalImageFormatPropertiesNV>* pExternalImageFormatProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceExternalImageFormatPropertiesNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFormat format
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFormat"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"format\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkFormat(outputFile, format); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageType type
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageType"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"type\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageType(outputFile, type); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageTiling tiling
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageTiling"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"tiling\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageTiling(outputFile, tiling); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageUsageFlags usage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageUsageFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"usage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, usage, EnumToStringVkImageUsageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageCreateFlags flags
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageCreateFlags"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"flags\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, flags, EnumToStringVkImageCreateFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalMemoryHandleTypeFlagsNV externalHandleType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalMemoryHandleTypeFlagsNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"externalHandleType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, externalHandleType, EnumToStringVkExternalMemoryHandleTypeFlagBitsNV); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalImageFormatPropertiesNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExternalImageFormatProperties\",\n");
    if (pExternalImageFormatProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExternalImageFormatProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pExternalImageFormatProperties->GetMetaStructPointer(), indent, pExternalImageFormatProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetMemoryWin32HandleNV(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            memory,
    VkExternalMemoryHandleTypeFlagsNV           handleType,
    PointerDecoder<uint64_t, void*>*            pHandle)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetMemoryWin32HandleNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceMemory memory
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceMemory"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"memory\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, memory); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalMemoryHandleTypeFlagsNV handleType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalMemoryHandleTypeFlagsNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"handleType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, handleType, EnumToStringVkExternalMemoryHandleTypeFlagBitsNV); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void** pHandle
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void**"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pHandle\",\n");
    if (pHandle->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pHandle->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pHandle = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pHandle->GetPointer(), vinfo_pHandle); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateViSurfaceNN(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkViSurfaceCreateInfoNN>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateViSurfaceNN\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkViSurfaceCreateInfoNN* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkViSurfaceCreateInfoNN*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdBeginConditionalRenderingEXT(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkConditionalRenderingBeginInfoEXT>& pConditionalRenderingBegin)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBeginConditionalRenderingEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkConditionalRenderingBeginInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pConditionalRenderingBegin\",\n");
    if (pConditionalRenderingBegin.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pConditionalRenderingBegin.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pConditionalRenderingBegin.GetMetaStructPointer(), indent, pConditionalRenderingBegin.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdEndConditionalRenderingEXT(
    format::HandleId                            commandBuffer)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdEndConditionalRenderingEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdProcessCommandsNVX(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkCmdProcessCommandsInfoNVX>& pProcessCommandsInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdProcessCommandsNVX\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCmdProcessCommandsInfoNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProcessCommandsInfo\",\n");
    if (pProcessCommandsInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProcessCommandsInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pProcessCommandsInfo.GetMetaStructPointer(), indent, pProcessCommandsInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdReserveSpaceForCommandsNVX(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkCmdReserveSpaceForCommandsInfoNVX>& pReserveSpaceInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdReserveSpaceForCommandsNVX\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCmdReserveSpaceForCommandsInfoNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pReserveSpaceInfo\",\n");
    if (pReserveSpaceInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pReserveSpaceInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pReserveSpaceInfo.GetMetaStructPointer(), indent, pReserveSpaceInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateIndirectCommandsLayoutNVX(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkIndirectCommandsLayoutCreateInfoNVX>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkIndirectCommandsLayoutNVX>* pIndirectCommandsLayout)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateIndirectCommandsLayoutNVX\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkIndirectCommandsLayoutCreateInfoNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkIndirectCommandsLayoutNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pIndirectCommandsLayout\",\n");
    if (pIndirectCommandsLayout->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pIndirectCommandsLayout->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pIndirectCommandsLayout->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyIndirectCommandsLayoutNVX(
    format::HandleId                            device,
    format::HandleId                            indirectCommandsLayout,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyIndirectCommandsLayoutNVX\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkIndirectCommandsLayoutNVX indirectCommandsLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkIndirectCommandsLayoutNVX"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"indirectCommandsLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, indirectCommandsLayout); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateObjectTableNVX(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkObjectTableCreateInfoNVX>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkObjectTableNVX>*     pObjectTable)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateObjectTableNVX\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkObjectTableCreateInfoNVX* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkObjectTableCreateInfoNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkObjectTableNVX* pObjectTable
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkObjectTableNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pObjectTable\",\n");
    if (pObjectTable->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pObjectTable->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pObjectTable->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyObjectTableNVX(
    format::HandleId                            device,
    format::HandleId                            objectTable,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyObjectTableNVX\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkObjectTableNVX objectTable
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkObjectTableNVX"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"objectTable\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, objectTable); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkUnregisterObjectsNVX(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            objectTable,
    uint32_t                                    objectCount,
    const PointerDecoder<VkObjectEntryTypeNVX>& pObjectEntryTypes,
    const PointerDecoder<uint32_t>&             pObjectIndices)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkUnregisterObjectsNVX\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkObjectTableNVX objectTable
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkObjectTableNVX"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"objectTable\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, objectTable); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t objectCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"objectCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, objectCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkObjectEntryTypeNVX* pObjectEntryTypes
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkObjectEntryTypeNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pObjectEntryTypes\",\n");
    if (pObjectEntryTypes.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pObjectEntryTypes.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pObjectEntryTypes = {false, true, false, EnumToStringVkObjectEntryTypeNVX};
        ArrayToStringJson(outputFile, indent, "const VkObjectEntryTypeNVX*", &pObjectEntryTypes, "pObjectEntryTypes", objectCount, vinfo_pObjectEntryTypes); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const uint32_t* pObjectIndices
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pObjectIndices\",\n");
    if (pObjectIndices.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pObjectIndices.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pObjectIndices = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const uint32_t*", &pObjectIndices, "pObjectIndices", objectCount, vinfo_pObjectIndices); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(
    format::HandleId                            physicalDevice,
    StructPointerDecoder<Decoded_VkDeviceGeneratedCommandsFeaturesNVX>* pFeatures,
    StructPointerDecoder<Decoded_VkDeviceGeneratedCommandsLimitsNVX>* pLimits)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceGeneratedCommandsFeaturesNVX* pFeatures
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceGeneratedCommandsFeaturesNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFeatures\",\n");
    if (pFeatures->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFeatures->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pFeatures->GetMetaStructPointer(), indent, pFeatures->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceGeneratedCommandsLimitsNVX* pLimits
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceGeneratedCommandsLimitsNVX*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pLimits\",\n");
    if (pLimits->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pLimits->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pLimits->GetMetaStructPointer(), indent, pLimits->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdSetViewportWScalingNV(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    const StructPointerDecoder<Decoded_VkViewportWScalingNV>& pViewportWScalings)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetViewportWScalingNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstViewport
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstViewport\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstViewport); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t viewportCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"viewportCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, viewportCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkViewportWScalingNV* pViewportWScalings
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkViewportWScalingNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pViewportWScalings\",\n");
    if (pViewportWScalings.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pViewportWScalings.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkViewportWScalingNV>(outputFile, indent, "VkViewportWScalingNV", pViewportWScalings.GetMetaStructPointer(), "pViewportWScalings", viewportCount, false, pViewportWScalings.GetAddress(), sizeof(VkViewportWScalingNV)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkReleaseDisplayEXT(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            display)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkReleaseDisplayEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayKHR display
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"display\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, display); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkAcquireXlibDisplayEXT(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    uint64_t                                    dpy,
    format::HandleId                            display)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkAcquireXlibDisplayEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* dpy
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dpy\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dpy); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayKHR display
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"display\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, display); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetRandROutputDisplayEXT(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    uint64_t                                    dpy,
    size_t                                      rrOutput,
    HandlePointerDecoder<VkDisplayKHR>*         pDisplay)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetRandROutputDisplayEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* dpy
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dpy\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dpy); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: size_t rrOutput
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"size_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"rrOutput\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, rrOutput); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayKHR* pDisplay
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDisplay\",\n");
    if (pDisplay->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDisplay->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pDisplay->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    format::HandleId                            surface,
    StructPointerDecoder<Decoded_VkSurfaceCapabilities2EXT>* pSurfaceCapabilities)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSurfaceCapabilities2EXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR surface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"surface\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, surface); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceCapabilities2EXT* pSurfaceCapabilities
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceCapabilities2EXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceCapabilities\",\n");
    if (pSurfaceCapabilities->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceCapabilities->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSurfaceCapabilities->GetMetaStructPointer(), indent, pSurfaceCapabilities->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkDisplayPowerControlEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            display,
    const StructPointerDecoder<Decoded_VkDisplayPowerInfoEXT>& pDisplayPowerInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDisplayPowerControlEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayKHR display
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"display\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, display); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDisplayPowerInfoEXT* pDisplayPowerInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDisplayPowerInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDisplayPowerInfo\",\n");
    if (pDisplayPowerInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDisplayPowerInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pDisplayPowerInfo.GetMetaStructPointer(), indent, pDisplayPowerInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkRegisterDeviceEventEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDeviceEventInfoEXT>& pDeviceEventInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkFence>*              pFence)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkRegisterDeviceEventEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDeviceEventInfoEXT* pDeviceEventInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDeviceEventInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDeviceEventInfo\",\n");
    if (pDeviceEventInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDeviceEventInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pDeviceEventInfo.GetMetaStructPointer(), indent, pDeviceEventInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFence* pFence
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFence*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFence\",\n");
    if (pFence->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFence->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pFence->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkRegisterDisplayEventEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            display,
    const StructPointerDecoder<Decoded_VkDisplayEventInfoEXT>& pDisplayEventInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkFence>*              pFence)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkRegisterDisplayEventEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDisplayKHR display
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDisplayKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"display\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, display); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDisplayEventInfoEXT* pDisplayEventInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDisplayEventInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDisplayEventInfo\",\n");
    if (pDisplayEventInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDisplayEventInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pDisplayEventInfo.GetMetaStructPointer(), indent, pDisplayEventInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFence* pFence
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFence*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pFence\",\n");
    if (pFence->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pFence->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pFence->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetSwapchainCounterEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            swapchain,
    VkSurfaceCounterFlagBitsEXT                 counter,
    PointerDecoder<uint64_t>*                   pCounterValue)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetSwapchainCounterEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapchain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceCounterFlagBitsEXT counter
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceCounterFlagBitsEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"counter\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, counter, EnumToStringVkSurfaceCounterFlagBitsEXT); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint64_t* pCounterValue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint64_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCounterValue\",\n");
    if (pCounterValue->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCounterValue->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pCounterValue->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetRefreshCycleDurationGOOGLE(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            swapchain,
    StructPointerDecoder<Decoded_VkRefreshCycleDurationGOOGLE>* pDisplayTimingProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetRefreshCycleDurationGOOGLE\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapchain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkRefreshCycleDurationGOOGLE*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDisplayTimingProperties\",\n");
    if (pDisplayTimingProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDisplayTimingProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pDisplayTimingProperties->GetMetaStructPointer(), indent, pDisplayTimingProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPastPresentationTimingGOOGLE(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            swapchain,
    PointerDecoder<uint32_t>*                   pPresentationTimingCount,
    StructPointerDecoder<Decoded_VkPastPresentationTimingGOOGLE>* pPresentationTimings)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPastPresentationTimingGOOGLE\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapchain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPresentationTimingCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPresentationTimingCount\",\n");
    if (pPresentationTimingCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPresentationTimingCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPresentationTimingCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPastPresentationTimingGOOGLE* pPresentationTimings
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPastPresentationTimingGOOGLE*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPresentationTimings\",\n");
    if (pPresentationTimings->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPresentationTimings->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkPastPresentationTimingGOOGLE>(outputFile, indent, "VkPastPresentationTimingGOOGLE", pPresentationTimings->GetMetaStructPointer(), "pPresentationTimings", *pPresentationTimingCount->GetPointer(), false, pPresentationTimings->GetAddress(), sizeof(VkPastPresentationTimingGOOGLE)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdSetDiscardRectangleEXT(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstDiscardRectangle,
    uint32_t                                    discardRectangleCount,
    const StructPointerDecoder<Decoded_VkRect2D>& pDiscardRectangles)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetDiscardRectangleEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstDiscardRectangle
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstDiscardRectangle\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstDiscardRectangle); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t discardRectangleCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"discardRectangleCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, discardRectangleCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkRect2D* pDiscardRectangles
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkRect2D*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDiscardRectangles\",\n");
    if (pDiscardRectangles.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDiscardRectangles.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkRect2D>(outputFile, indent, "VkRect2D", pDiscardRectangles.GetMetaStructPointer(), "pDiscardRectangles", discardRectangleCount, false, pDiscardRectangles.GetAddress(), sizeof(VkRect2D)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkSetHdrMetadataEXT(
    format::HandleId                            device,
    uint32_t                                    swapchainCount,
    const HandlePointerDecoder<VkSwapchainKHR>& pSwapchains,
    const StructPointerDecoder<Decoded_VkHdrMetadataEXT>& pMetadata)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkSetHdrMetadataEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t swapchainCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchainCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, swapchainCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSwapchainKHR* pSwapchains
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSwapchainKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSwapchains\",\n");
    if (pSwapchains.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSwapchains.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pSwapchains = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkSwapchainKHR*", &pSwapchains, "pSwapchains", swapchainCount, vinfo_pSwapchains); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkHdrMetadataEXT* pMetadata
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkHdrMetadataEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMetadata\",\n");
    if (pMetadata.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMetadata.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkHdrMetadataEXT>(outputFile, indent, "VkHdrMetadataEXT", pMetadata.GetMetaStructPointer(), "pMetadata", swapchainCount, false, pMetadata.GetAddress(), sizeof(VkHdrMetadataEXT)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateIOSSurfaceMVK(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkIOSSurfaceCreateInfoMVK>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateIOSSurfaceMVK\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkIOSSurfaceCreateInfoMVK* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkIOSSurfaceCreateInfoMVK*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateMacOSSurfaceMVK(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkMacOSSurfaceCreateInfoMVK>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateMacOSSurfaceMVK\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMacOSSurfaceCreateInfoMVK* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMacOSSurfaceCreateInfoMVK*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkSetDebugUtilsObjectNameEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDebugUtilsObjectNameInfoEXT>& pNameInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkSetDebugUtilsObjectNameEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugUtilsObjectNameInfoEXT* pNameInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugUtilsObjectNameInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pNameInfo\",\n");
    if (pNameInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pNameInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pNameInfo.GetMetaStructPointer(), indent, pNameInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkSetDebugUtilsObjectTagEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkDebugUtilsObjectTagInfoEXT>& pTagInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkSetDebugUtilsObjectTagEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugUtilsObjectTagInfoEXT* pTagInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugUtilsObjectTagInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pTagInfo\",\n");
    if (pTagInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pTagInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pTagInfo.GetMetaStructPointer(), indent, pTagInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkQueueBeginDebugUtilsLabelEXT(
    format::HandleId                            queue,
    const StructPointerDecoder<Decoded_VkDebugUtilsLabelEXT>& pLabelInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkQueueBeginDebugUtilsLabelEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkQueue queue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queue\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queue); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugUtilsLabelEXT* pLabelInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugUtilsLabelEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pLabelInfo\",\n");
    if (pLabelInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pLabelInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pLabelInfo.GetMetaStructPointer(), indent, pLabelInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkQueueEndDebugUtilsLabelEXT(
    format::HandleId                            queue)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkQueueEndDebugUtilsLabelEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkQueue queue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queue\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queue); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkQueueInsertDebugUtilsLabelEXT(
    format::HandleId                            queue,
    const StructPointerDecoder<Decoded_VkDebugUtilsLabelEXT>& pLabelInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkQueueInsertDebugUtilsLabelEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkQueue queue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queue\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queue); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugUtilsLabelEXT* pLabelInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugUtilsLabelEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pLabelInfo\",\n");
    if (pLabelInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pLabelInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pLabelInfo.GetMetaStructPointer(), indent, pLabelInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBeginDebugUtilsLabelEXT(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkDebugUtilsLabelEXT>& pLabelInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBeginDebugUtilsLabelEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugUtilsLabelEXT* pLabelInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugUtilsLabelEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pLabelInfo\",\n");
    if (pLabelInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pLabelInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pLabelInfo.GetMetaStructPointer(), indent, pLabelInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdEndDebugUtilsLabelEXT(
    format::HandleId                            commandBuffer)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdEndDebugUtilsLabelEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdInsertDebugUtilsLabelEXT(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkDebugUtilsLabelEXT>& pLabelInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdInsertDebugUtilsLabelEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugUtilsLabelEXT* pLabelInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugUtilsLabelEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pLabelInfo\",\n");
    if (pLabelInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pLabelInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pLabelInfo.GetMetaStructPointer(), indent, pLabelInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateDebugUtilsMessengerEXT(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkDebugUtilsMessengerCreateInfoEXT>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkDebugUtilsMessengerEXT>* pMessenger)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateDebugUtilsMessengerEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugUtilsMessengerCreateInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDebugUtilsMessengerEXT* pMessenger
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDebugUtilsMessengerEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMessenger\",\n");
    if (pMessenger->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMessenger->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pMessenger->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyDebugUtilsMessengerEXT(
    format::HandleId                            instance,
    format::HandleId                            messenger,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyDebugUtilsMessengerEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDebugUtilsMessengerEXT messenger
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDebugUtilsMessengerEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"messenger\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, messenger); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkSubmitDebugUtilsMessageEXT(
    format::HandleId                            instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT      messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT             messageTypes,
    const StructPointerDecoder<Decoded_VkDebugUtilsMessengerCallbackDataEXT>& pCallbackData)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkSubmitDebugUtilsMessageEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDebugUtilsMessageSeverityFlagBitsEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"messageSeverity\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, messageSeverity, EnumToStringVkDebugUtilsMessageSeverityFlagBitsEXT); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDebugUtilsMessageTypeFlagsEXT messageTypes
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDebugUtilsMessageTypeFlagsEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"messageTypes\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, messageTypes, EnumToStringVkDebugUtilsMessageTypeFlagBitsEXT); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkDebugUtilsMessengerCallbackDataEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCallbackData\",\n");
    if (pCallbackData.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCallbackData.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCallbackData.GetMetaStructPointer(), indent, pCallbackData.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetAndroidHardwareBufferPropertiesANDROID(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint64_t                                    buffer,
    StructPointerDecoder<Decoded_VkAndroidHardwareBufferPropertiesANDROID>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetAndroidHardwareBufferPropertiesANDROID\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const struct void* buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const struct void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    if ( !buffer) // WWW
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, buffer /* ACF */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, buffer); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkAndroidHardwareBufferPropertiesANDROID* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkAndroidHardwareBufferPropertiesANDROID*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pProperties->GetMetaStructPointer(), indent, pProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetMemoryAndroidHardwareBufferANDROID(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkMemoryGetAndroidHardwareBufferInfoANDROID>& pInfo,
    PointerDecoder<uint64_t, void*>*            pBuffer)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetMemoryAndroidHardwareBufferANDROID\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMemoryGetAndroidHardwareBufferInfoANDROID*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: struct void** pBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"struct void**"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBuffer\",\n");
    if (pBuffer->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBuffer->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pBuffer = {false, false, false, nullptr};
        ScalarValueToStringJson(outputFile, pBuffer->GetPointer(), vinfo_pBuffer); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdSetSampleLocationsEXT(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkSampleLocationsInfoEXT>& pSampleLocationsInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetSampleLocationsEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkSampleLocationsInfoEXT* pSampleLocationsInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkSampleLocationsInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSampleLocationsInfo\",\n");
    if (pSampleLocationsInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSampleLocationsInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSampleLocationsInfo.GetMetaStructPointer(), indent, pSampleLocationsInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPhysicalDeviceMultisamplePropertiesEXT(
    format::HandleId                            physicalDevice,
    VkSampleCountFlagBits                       samples,
    StructPointerDecoder<Decoded_VkMultisamplePropertiesEXT>* pMultisampleProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceMultisamplePropertiesEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSampleCountFlagBits samples
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSampleCountFlagBits"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"samples\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, samples, EnumToStringVkSampleCountFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMultisamplePropertiesEXT* pMultisampleProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMultisamplePropertiesEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMultisampleProperties\",\n");
    if (pMultisampleProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMultisampleProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMultisampleProperties->GetMetaStructPointer(), indent, pMultisampleProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetImageDrmFormatModifierPropertiesEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            image,
    StructPointerDecoder<Decoded_VkImageDrmFormatModifierPropertiesEXT>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetImageDrmFormatModifierPropertiesEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImage image
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImage"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"image\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, image); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageDrmFormatModifierPropertiesEXT* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageDrmFormatModifierPropertiesEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pProperties->GetMetaStructPointer(), indent, pProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateValidationCacheEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkValidationCacheCreateInfoEXT>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkValidationCacheEXT>* pValidationCache)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateValidationCacheEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkValidationCacheCreateInfoEXT* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkValidationCacheCreateInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkValidationCacheEXT* pValidationCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkValidationCacheEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pValidationCache\",\n");
    if (pValidationCache->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pValidationCache->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pValidationCache->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyValidationCacheEXT(
    format::HandleId                            device,
    format::HandleId                            validationCache,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyValidationCacheEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkValidationCacheEXT validationCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkValidationCacheEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"validationCache\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, validationCache); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkMergeValidationCachesEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            dstCache,
    uint32_t                                    srcCacheCount,
    const HandlePointerDecoder<VkValidationCacheEXT>& pSrcCaches)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkMergeValidationCachesEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkValidationCacheEXT dstCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkValidationCacheEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstCache\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstCache); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t srcCacheCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"srcCacheCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, srcCacheCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkValidationCacheEXT* pSrcCaches
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkValidationCacheEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSrcCaches\",\n");
    if (pSrcCaches.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSrcCaches.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pSrcCaches = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkValidationCacheEXT*", &pSrcCaches, "pSrcCaches", srcCacheCount, vinfo_pSrcCaches); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetValidationCacheDataEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            validationCache,
    PointerDecoder<size_t>*                     pDataSize,
    PointerDecoder<uint8_t>*                    pData)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetValidationCacheDataEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkValidationCacheEXT validationCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkValidationCacheEXT"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"validationCache\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, validationCache); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: size_t* pDataSize
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"size_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pDataSize\",\n");
    if (pDataSize->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pDataSize->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pDataSize->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* pData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pData\",\n");
    if (pData->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pData->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pData = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "void*", pData, "pData", *pDataSize->GetPointer(), vinfo_pData); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdBindShadingRateImageNV(
    format::HandleId                            commandBuffer,
    format::HandleId                            imageView,
    VkImageLayout                               imageLayout)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBindShadingRateImageNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageView imageView
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageView"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"imageView\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, imageView); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkImageLayout imageLayout
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkImageLayout"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"imageLayout\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkImageLayout(outputFile, imageLayout); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetViewportShadingRatePaletteNV(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    const StructPointerDecoder<Decoded_VkShadingRatePaletteNV>& pShadingRatePalettes)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetViewportShadingRatePaletteNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstViewport
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstViewport\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstViewport); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t viewportCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"viewportCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, viewportCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkShadingRatePaletteNV* pShadingRatePalettes
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkShadingRatePaletteNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pShadingRatePalettes\",\n");
    if (pShadingRatePalettes.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pShadingRatePalettes.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkShadingRatePaletteNV>(outputFile, indent, "VkShadingRatePaletteNV", pShadingRatePalettes.GetMetaStructPointer(), "pShadingRatePalettes", viewportCount, false, pShadingRatePalettes.GetAddress(), sizeof(VkShadingRatePaletteNV)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetCoarseSampleOrderNV(
    format::HandleId                            commandBuffer,
    VkCoarseSampleOrderTypeNV                   sampleOrderType,
    uint32_t                                    customSampleOrderCount,
    const StructPointerDecoder<Decoded_VkCoarseSampleOrderCustomNV>& pCustomSampleOrders)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetCoarseSampleOrderNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCoarseSampleOrderTypeNV sampleOrderType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCoarseSampleOrderTypeNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"sampleOrderType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkCoarseSampleOrderTypeNV(outputFile, sampleOrderType); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t customSampleOrderCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"customSampleOrderCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, customSampleOrderCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCoarseSampleOrderCustomNV* pCustomSampleOrders
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCoarseSampleOrderCustomNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCustomSampleOrders\",\n");
    if (pCustomSampleOrders.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCustomSampleOrders.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkCoarseSampleOrderCustomNV>(outputFile, indent, "VkCoarseSampleOrderCustomNV", pCustomSampleOrders.GetMetaStructPointer(), "pCustomSampleOrders", customSampleOrderCount, false, pCustomSampleOrders.GetAddress(), sizeof(VkCoarseSampleOrderCustomNV)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateAccelerationStructureNV(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkAccelerationStructureCreateInfoNV>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkAccelerationStructureNV>* pAccelerationStructure)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateAccelerationStructureNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAccelerationStructureCreateInfoNV* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAccelerationStructureCreateInfoNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkAccelerationStructureNV* pAccelerationStructure
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkAccelerationStructureNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAccelerationStructure\",\n");
    if (pAccelerationStructure->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAccelerationStructure->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pAccelerationStructure->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkDestroyAccelerationStructureNV(
    format::HandleId                            device,
    format::HandleId                            accelerationStructure,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkDestroyAccelerationStructureNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkAccelerationStructureNV accelerationStructure
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkAccelerationStructureNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"accelerationStructure\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, accelerationStructure); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetAccelerationStructureMemoryRequirementsNV(
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkAccelerationStructureMemoryRequirementsInfoNV>& pInfo,
    StructPointerDecoder<Decoded_VkMemoryRequirements2KHR>* pMemoryRequirements)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetAccelerationStructureMemoryRequirementsNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAccelerationStructureMemoryRequirementsInfoNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryRequirements2KHR* pMemoryRequirements
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryRequirements2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryRequirements\",\n");
    if (pMemoryRequirements->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryRequirements->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryRequirements->GetMetaStructPointer(), indent, pMemoryRequirements->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkBindAccelerationStructureMemoryNV(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    bindInfoCount,
    const StructPointerDecoder<Decoded_VkBindAccelerationStructureMemoryInfoNV>& pBindInfos)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkBindAccelerationStructureMemoryNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t bindInfoCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"bindInfoCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, bindInfoCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBindAccelerationStructureMemoryInfoNV* pBindInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBindAccelerationStructureMemoryInfoNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pBindInfos\",\n");
    if (pBindInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pBindInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkBindAccelerationStructureMemoryInfoNV>(outputFile, indent, "VkBindAccelerationStructureMemoryInfoNV", pBindInfos.GetMetaStructPointer(), "pBindInfos", bindInfoCount, false, pBindInfos.GetAddress(), sizeof(VkBindAccelerationStructureMemoryInfoNV)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdBuildAccelerationStructureNV(
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkAccelerationStructureInfoNV>& pInfo,
    format::HandleId                            instanceData,
    VkDeviceSize                                instanceOffset,
    VkBool32                                    update,
    format::HandleId                            dst,
    format::HandleId                            src,
    format::HandleId                            scratch,
    VkDeviceSize                                scratchOffset)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdBuildAccelerationStructureNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAccelerationStructureInfoNV* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAccelerationStructureInfoNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer instanceData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instanceData\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instanceData); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize instanceOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instanceOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, instanceOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBool32 update
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBool32"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"update\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, update); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkAccelerationStructureNV dst
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkAccelerationStructureNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dst\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dst); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkAccelerationStructureNV src
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkAccelerationStructureNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"src\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, src); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer scratch
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"scratch\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, scratch); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize scratchOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"scratchOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, scratchOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdCopyAccelerationStructureNV(
    format::HandleId                            commandBuffer,
    format::HandleId                            dst,
    format::HandleId                            src,
    VkCopyAccelerationStructureModeNV           mode)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdCopyAccelerationStructureNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkAccelerationStructureNV dst
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkAccelerationStructureNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dst\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dst); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkAccelerationStructureNV src
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkAccelerationStructureNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"src\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, src); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCopyAccelerationStructureModeNV mode
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCopyAccelerationStructureModeNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"mode\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkCopyAccelerationStructureModeNV(outputFile, mode); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdTraceRaysNV(
    format::HandleId                            commandBuffer,
    format::HandleId                            raygenShaderBindingTableBuffer,
    VkDeviceSize                                raygenShaderBindingOffset,
    format::HandleId                            missShaderBindingTableBuffer,
    VkDeviceSize                                missShaderBindingOffset,
    VkDeviceSize                                missShaderBindingStride,
    format::HandleId                            hitShaderBindingTableBuffer,
    VkDeviceSize                                hitShaderBindingOffset,
    VkDeviceSize                                hitShaderBindingStride,
    format::HandleId                            callableShaderBindingTableBuffer,
    VkDeviceSize                                callableShaderBindingOffset,
    VkDeviceSize                                callableShaderBindingStride,
    uint32_t                                    width,
    uint32_t                                    height,
    uint32_t                                    depth)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdTraceRaysNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer raygenShaderBindingTableBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"raygenShaderBindingTableBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, raygenShaderBindingTableBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize raygenShaderBindingOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"raygenShaderBindingOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, raygenShaderBindingOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer missShaderBindingTableBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"missShaderBindingTableBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, missShaderBindingTableBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize missShaderBindingOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"missShaderBindingOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, missShaderBindingOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize missShaderBindingStride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"missShaderBindingStride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, missShaderBindingStride); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer hitShaderBindingTableBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"hitShaderBindingTableBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, hitShaderBindingTableBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize hitShaderBindingOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"hitShaderBindingOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, hitShaderBindingOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize hitShaderBindingStride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"hitShaderBindingStride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, hitShaderBindingStride); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer callableShaderBindingTableBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"callableShaderBindingTableBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, callableShaderBindingTableBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize callableShaderBindingOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"callableShaderBindingOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, callableShaderBindingOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize callableShaderBindingStride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"callableShaderBindingStride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, callableShaderBindingStride); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t width
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"width\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, width); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t height
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"height\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, height); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t depth
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"depth\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, depth); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCreateRayTracingPipelinesNV(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            pipelineCache,
    uint32_t                                    createInfoCount,
    const StructPointerDecoder<Decoded_VkRayTracingPipelineCreateInfoNV>& pCreateInfos,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkPipeline>*           pPipelines)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateRayTracingPipelinesNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineCache pipelineCache
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineCache"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineCache\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipelineCache); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t createInfoCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"createInfoCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, createInfoCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkRayTracingPipelineCreateInfoNV* pCreateInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkRayTracingPipelineCreateInfoNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfos\",\n");
    if (pCreateInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkRayTracingPipelineCreateInfoNV>(outputFile, indent, "VkRayTracingPipelineCreateInfoNV", pCreateInfos.GetMetaStructPointer(), "pCreateInfos", createInfoCount, false, pCreateInfos.GetAddress(), sizeof(VkRayTracingPipelineCreateInfoNV)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipeline* pPipelines
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipeline*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPipelines\",\n");
    if (pPipelines->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPipelines->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pPipelines = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "VkPipeline*", pPipelines, "pPipelines", createInfoCount, vinfo_pPipelines); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetRayTracingShaderGroupHandlesNV(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            pipeline,
    uint32_t                                    firstGroup,
    uint32_t                                    groupCount,
    size_t                                      dataSize,
    PointerDecoder<uint8_t>*                    pData)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetRayTracingShaderGroupHandlesNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipeline pipeline
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipeline"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipeline\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipeline); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstGroup
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstGroup\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstGroup); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t groupCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"groupCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, groupCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: size_t dataSize
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"size_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dataSize\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, dataSize); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* pData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pData\",\n");
    if (pData->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pData->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pData = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "void*", pData, "pData", dataSize, vinfo_pData); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetAccelerationStructureHandleNV(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            accelerationStructure,
    size_t                                      dataSize,
    PointerDecoder<uint8_t>*                    pData)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetAccelerationStructureHandleNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkAccelerationStructureNV accelerationStructure
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkAccelerationStructureNV"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"accelerationStructure\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, accelerationStructure); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: size_t dataSize
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"size_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dataSize\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, dataSize); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: void* pData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pData\",\n");
    if (pData->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pData->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pData = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "void*", pData, "pData", dataSize, vinfo_pData); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdWriteAccelerationStructuresPropertiesNV(
    format::HandleId                            commandBuffer,
    uint32_t                                    accelerationStructureCount,
    const HandlePointerDecoder<VkAccelerationStructureNV>& pAccelerationStructures,
    VkQueryType                                 queryType,
    format::HandleId                            queryPool,
    uint32_t                                    firstQuery)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdWriteAccelerationStructuresPropertiesNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t accelerationStructureCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"accelerationStructureCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, accelerationStructureCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAccelerationStructureNV* pAccelerationStructures
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAccelerationStructureNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAccelerationStructures\",\n");
    if (pAccelerationStructures.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAccelerationStructures.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRI
        ScalarValueToStringStruct vinfo_pAccelerationStructures = {true, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "const VkAccelerationStructureNV*", &pAccelerationStructures, "pAccelerationStructures", accelerationStructureCount, vinfo_pAccelerationStructures); // AQA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryType queryType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryType"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkQueryType(outputFile, queryType); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstQuery
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstQuery\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstQuery); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCompileDeferredNV(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            pipeline,
    uint32_t                                    shader)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCompileDeferredNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipeline pipeline
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipeline"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipeline\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, pipeline); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t shader
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"shader\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, shader); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetMemoryHostPointerPropertiesEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    uint64_t                                    pHostPointer,
    StructPointerDecoder<Decoded_VkMemoryHostPointerPropertiesEXT>* pMemoryHostPointerProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetMemoryHostPointerPropertiesEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkExternalMemoryHandleTypeFlagBits"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"handleType\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, handleType, EnumToStringVkExternalMemoryHandleTypeFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const void* pHostPointer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pHostPointer\",\n");
    if ( !pHostPointer) // WWW
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pHostPointer /* ACF */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, pHostPointer); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkMemoryHostPointerPropertiesEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMemoryHostPointerProperties\",\n");
    if (pMemoryHostPointerProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMemoryHostPointerProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMemoryHostPointerProperties->GetMetaStructPointer(), indent, pMemoryHostPointerProperties->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdWriteBufferMarkerAMD(
    format::HandleId                            commandBuffer,
    VkPipelineStageFlagBits                     pipelineStage,
    format::HandleId                            dstBuffer,
    VkDeviceSize                                dstOffset,
    uint32_t                                    marker)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdWriteBufferMarkerAMD\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPipelineStageFlagBits pipelineStage
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPipelineStageFlagBits"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pipelineStage\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    FlagsToStringJson(outputFile, pipelineStage, EnumToStringVkPipelineStageFlagBits); // URG
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer dstBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, dstBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize dstOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"dstOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, dstOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t marker
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"marker\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, marker); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pTimeDomainCount,
    PointerDecoder<VkTimeDomainEXT>*            pTimeDomains)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceCalibrateableTimeDomainsEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pTimeDomainCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pTimeDomainCount\",\n");
    if (pTimeDomainCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pTimeDomainCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pTimeDomainCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkTimeDomainEXT* pTimeDomains
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkTimeDomainEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pTimeDomains\",\n");
    if (pTimeDomains->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pTimeDomains->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pTimeDomains = {false, true, false, EnumToStringVkTimeDomainEXT};
        ArrayToStringJson(outputFile, indent, "VkTimeDomainEXT*", pTimeDomains, "pTimeDomains", *pTimeDomainCount->GetPointer(), vinfo_pTimeDomains); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetCalibratedTimestampsEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    uint32_t                                    timestampCount,
    const StructPointerDecoder<Decoded_VkCalibratedTimestampInfoEXT>& pTimestampInfos,
    PointerDecoder<uint64_t>*                   pTimestamps,
    PointerDecoder<uint64_t>*                   pMaxDeviation)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetCalibratedTimestampsEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t timestampCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"timestampCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, timestampCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkCalibratedTimestampInfoEXT* pTimestampInfos
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkCalibratedTimestampInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pTimestampInfos\",\n");
    if (pTimestampInfos.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pTimestampInfos.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkCalibratedTimestampInfoEXT>(outputFile, indent, "VkCalibratedTimestampInfoEXT", pTimestampInfos.GetMetaStructPointer(), "pTimestampInfos", timestampCount, false, pTimestampInfos.GetAddress(), sizeof(VkCalibratedTimestampInfoEXT)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint64_t* pTimestamps
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint64_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pTimestamps\",\n");
    if (pTimestamps->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pTimestamps->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pTimestamps = {false, false, false, nullptr};
        ArrayToStringJson(outputFile, indent, "uint64_t*", pTimestamps, "pTimestamps", timestampCount, vinfo_pTimestamps); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint64_t* pMaxDeviation
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint64_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMaxDeviation\",\n");
    if (pMaxDeviation->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMaxDeviation->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pMaxDeviation->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdDrawMeshTasksNV(
    format::HandleId                            commandBuffer,
    uint32_t                                    taskCount,
    uint32_t                                    firstTask)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawMeshTasksNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t taskCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"taskCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, taskCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstTask
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstTask\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstTask); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDrawMeshTasksIndirectNV(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawMeshTasksIndirectNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t drawCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"drawCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, drawCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, stride); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdDrawMeshTasksIndirectCountNV(
    format::HandleId                            commandBuffer,
    format::HandleId                            buffer,
    VkDeviceSize                                offset,
    format::HandleId                            countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdDrawMeshTasksIndirectCountNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer buffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"buffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, buffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize offset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"offset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, offset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBuffer countBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, countBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceSize countBufferOffset
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceSize"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"countBufferOffset\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, countBufferOffset); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t maxDrawCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"maxDrawCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, maxDrawCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t stride
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"stride\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, stride); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdSetExclusiveScissorNV(
    format::HandleId                            commandBuffer,
    uint32_t                                    firstExclusiveScissor,
    uint32_t                                    exclusiveScissorCount,
    const StructPointerDecoder<Decoded_VkRect2D>& pExclusiveScissors)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetExclusiveScissorNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstExclusiveScissor
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstExclusiveScissor\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstExclusiveScissor); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t exclusiveScissorCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"exclusiveScissorCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, exclusiveScissorCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkRect2D* pExclusiveScissors
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkRect2D*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pExclusiveScissors\",\n");
    if (pExclusiveScissors.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pExclusiveScissors.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkRect2D>(outputFile, indent, "VkRect2D", pExclusiveScissors.GetMetaStructPointer(), "pExclusiveScissors", exclusiveScissorCount, false, pExclusiveScissors.GetAddress(), sizeof(VkRect2D)); // CRP
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdSetCheckpointNV(
    format::HandleId                            commandBuffer,
    uint64_t                                    pCheckpointMarker)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetCheckpointNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const void* pCheckpointMarker
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const void*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCheckpointMarker\",\n");
    if ( !pCheckpointMarker) // WWW
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCheckpointMarker /* ACF */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, pCheckpointMarker); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetQueueCheckpointDataNV(
    format::HandleId                            queue,
    PointerDecoder<uint32_t>*                   pCheckpointDataCount,
    StructPointerDecoder<Decoded_VkCheckpointDataNV>* pCheckpointData)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetQueueCheckpointDataNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkQueue queue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queue\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queue); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pCheckpointDataCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCheckpointDataCount\",\n");
    if (pCheckpointDataCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCheckpointDataCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pCheckpointDataCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCheckpointDataNV* pCheckpointData
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCheckpointDataNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCheckpointData\",\n");
    if (pCheckpointData->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCheckpointData->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkCheckpointDataNV>(outputFile, indent, "VkCheckpointDataNV", pCheckpointData->GetMetaStructPointer(), "pCheckpointData", *pCheckpointDataCount->GetPointer(), false, pCheckpointData->GetAddress(), sizeof(VkCheckpointDataNV)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkInitializePerformanceApiINTEL(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkInitializePerformanceApiInfoINTEL>& pInitializeInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkInitializePerformanceApiINTEL\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkInitializePerformanceApiInfoINTEL* pInitializeInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkInitializePerformanceApiInfoINTEL*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInitializeInfo\",\n");
    if (pInitializeInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInitializeInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInitializeInfo.GetMetaStructPointer(), indent, pInitializeInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkUninitializePerformanceApiINTEL(
    format::HandleId                            device)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkUninitializePerformanceApiINTEL\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetPerformanceMarkerINTEL(
    VkResult                                    returnValue,
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkPerformanceMarkerInfoINTEL>& pMarkerInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetPerformanceMarkerINTEL\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPerformanceMarkerInfoINTEL* pMarkerInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPerformanceMarkerInfoINTEL*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMarkerInfo\",\n");
    if (pMarkerInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMarkerInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMarkerInfo.GetMetaStructPointer(), indent, pMarkerInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetPerformanceStreamMarkerINTEL(
    VkResult                                    returnValue,
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkPerformanceStreamMarkerInfoINTEL>& pMarkerInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetPerformanceStreamMarkerINTEL\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPerformanceStreamMarkerInfoINTEL*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pMarkerInfo\",\n");
    if (pMarkerInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pMarkerInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pMarkerInfo.GetMetaStructPointer(), indent, pMarkerInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkCmdSetPerformanceOverrideINTEL(
    VkResult                                    returnValue,
    format::HandleId                            commandBuffer,
    const StructPointerDecoder<Decoded_VkPerformanceOverrideInfoINTEL>& pOverrideInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetPerformanceOverrideINTEL\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPerformanceOverrideInfoINTEL* pOverrideInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPerformanceOverrideInfoINTEL*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pOverrideInfo\",\n");
    if (pOverrideInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pOverrideInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pOverrideInfo.GetMetaStructPointer(), indent, pOverrideInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkAcquirePerformanceConfigurationINTEL(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkPerformanceConfigurationAcquireInfoINTEL>& pAcquireInfo,
    HandlePointerDecoder<VkPerformanceConfigurationINTEL>* pConfiguration)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkAcquirePerformanceConfigurationINTEL\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPerformanceConfigurationAcquireInfoINTEL*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAcquireInfo\",\n");
    if (pAcquireInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAcquireInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAcquireInfo.GetMetaStructPointer(), indent, pAcquireInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPerformanceConfigurationINTEL* pConfiguration
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPerformanceConfigurationINTEL*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pConfiguration\",\n");
    if (pConfiguration->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pConfiguration->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pConfiguration->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkReleasePerformanceConfigurationINTEL(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            configuration)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkReleasePerformanceConfigurationINTEL\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPerformanceConfigurationINTEL configuration
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPerformanceConfigurationINTEL"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"configuration\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, configuration); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkQueueSetPerformanceConfigurationINTEL(
    VkResult                                    returnValue,
    format::HandleId                            queue,
    format::HandleId                            configuration)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkQueueSetPerformanceConfigurationINTEL\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkQueue queue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueue"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queue\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queue); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPerformanceConfigurationINTEL configuration
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPerformanceConfigurationINTEL"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"configuration\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, configuration); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetPerformanceParameterINTEL(
    VkResult                                    returnValue,
    format::HandleId                            device,
    VkPerformanceParameterTypeINTEL             parameter,
    StructPointerDecoder<Decoded_VkPerformanceValueINTEL>* pValue)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPerformanceParameterINTEL\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPerformanceParameterTypeINTEL parameter
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPerformanceParameterTypeINTEL"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"parameter\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    EnumToStringVkPerformanceParameterTypeINTEL(outputFile, parameter); // ESA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPerformanceValueINTEL* pValue
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPerformanceValueINTEL*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pValue\",\n");
    if (pValue->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pValue->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pValue->GetMetaStructPointer(), indent, pValue->GetAddress()); // GLX
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkSetLocalDimmingAMD(
    format::HandleId                            device,
    format::HandleId                            swapChain,
    VkBool32                                    localDimmingEnable)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkSetLocalDimmingAMD\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapChain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapChain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapChain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkBool32 localDimmingEnable
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkBool32"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"localDimmingEnable\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    SignedDecimalToStringJson(outputFile, localDimmingEnable); // EQA
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateImagePipeSurfaceFUCHSIA(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkImagePipeSurfaceCreateInfoFUCHSIA>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateImagePipeSurfaceFUCHSIA\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkImagePipeSurfaceCreateInfoFUCHSIA*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateMetalSurfaceEXT(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkMetalSurfaceCreateInfoEXT>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateMetalSurfaceEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkMetalSurfaceCreateInfoEXT* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkMetalSurfaceCreateInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetBufferDeviceAddressEXT(
    VkDeviceAddress                             returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkBufferDeviceAddressInfoEXT>& pInfo)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetBufferDeviceAddressEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkDeviceAddress\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    char rval_str[100];
    snprintf(rval_str, sizeof(rval_str), "0x%" PRIx64 "", returnValue);
    OutputStringJson(outputFile, rval_str);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkBufferDeviceAddressInfoEXT* pInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkBufferDeviceAddressInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pInfo\",\n");
    if (pInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pInfo.GetMetaStructPointer(), indent, pInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pPropertyCount,
    StructPointerDecoder<Decoded_VkCooperativeMatrixPropertiesNV>* pProperties)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceCooperativeMatrixPropertiesNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPropertyCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPropertyCount\",\n");
    if (pPropertyCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPropertyCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPropertyCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkCooperativeMatrixPropertiesNV* pProperties
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCooperativeMatrixPropertiesNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pProperties\",\n");
    if (pProperties->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pProperties->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkCooperativeMatrixPropertiesNV>(outputFile, indent, "VkCooperativeMatrixPropertiesNV", pProperties->GetMetaStructPointer(), "pProperties", *pPropertyCount->GetPointer(), false, pProperties->GetAddress(), sizeof(VkCooperativeMatrixPropertiesNV)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    PointerDecoder<uint32_t>*                   pCombinationCount,
    StructPointerDecoder<Decoded_VkFramebufferMixedSamplesCombinationNV>* pCombinations)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pCombinationCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCombinationCount\",\n");
    if (pCombinationCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCombinationCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pCombinationCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkFramebufferMixedSamplesCombinationNV* pCombinations
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkFramebufferMixedSamplesCombinationNV*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCombinations\",\n");
    if (pCombinations->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCombinations->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" :"); // TRZ
        ArrayOfStructsToStringJson<Decoded_VkFramebufferMixedSamplesCombinationNV>(outputFile, indent, "VkFramebufferMixedSamplesCombinationNV", pCombinations->GetMetaStructPointer(), "pCombinations", *pCombinationCount->GetPointer(), false, pCombinations->GetAddress(), sizeof(VkFramebufferMixedSamplesCombinationNV)); // CRO
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkGetPhysicalDeviceSurfacePresentModes2EXT(
    VkResult                                    returnValue,
    format::HandleId                            physicalDevice,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceSurfaceInfo2KHR>& pSurfaceInfo,
    PointerDecoder<uint32_t>*                   pPresentModeCount,
    PointerDecoder<VkPresentModeKHR>*           pPresentModes)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetPhysicalDeviceSurfacePresentModes2EXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkPhysicalDevice physicalDevice
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPhysicalDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"physicalDevice\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, physicalDevice); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceSurfaceInfo2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceInfo\",\n");
    if (pSurfaceInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSurfaceInfo.GetMetaStructPointer(), indent, pSurfaceInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t* pPresentModeCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPresentModeCount\",\n");
    if (pPresentModeCount->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPresentModeCount->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent); // UHA
        OutputStringJson(outputFile, "\"value\" : \"");
        UnsignedDecimalToStringJson(outputFile, *pPresentModeCount->GetPointer()); //WRT
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkPresentModeKHR* pPresentModes
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkPresentModeKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pPresentModes\",\n");
    if (pPresentModes->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pPresentModes->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"elements\" : ");
        ScalarValueToStringStruct vinfo_pPresentModes = {false, true, false, EnumToStringVkPresentModeKHR};
        ArrayToStringJson(outputFile, indent, "VkPresentModeKHR*", pPresentModes, "pPresentModes", *pPresentModeCount->GetPointer(), vinfo_pPresentModes); // AUA
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkAcquireFullScreenExclusiveModeEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            swapchain)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkAcquireFullScreenExclusiveModeEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapchain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkReleaseFullScreenExclusiveModeEXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    format::HandleId                            swapchain)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkReleaseFullScreenExclusiveModeEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSwapchainKHR swapchain
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSwapchainKHR"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"swapchain\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, swapchain); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

void VulkanJsonConsumer::Process_vkGetDeviceGroupSurfacePresentModes2EXT(
    VkResult                                    returnValue,
    format::HandleId                            device,
    const StructPointerDecoder<Decoded_VkPhysicalDeviceSurfaceInfo2KHR>& pSurfaceInfo,
    PointerDecoder<VkDeviceGroupPresentModeFlagsKHR>* pModes)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkGetDeviceGroupSurfacePresentModes2EXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkPhysicalDeviceSurfaceInfo2KHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurfaceInfo\",\n");
    if (pSurfaceInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurfaceInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pSurfaceInfo.GetMetaStructPointer(), indent, pSurfaceInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkDeviceGroupPresentModeFlagsKHR* pModes
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDeviceGroupPresentModeFlagsKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pModes\",\n");
    if (pModes->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pModes->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        ScalarValueToStringStruct vinfo_pModes = {false, false, true, EnumToStringVkDeviceGroupPresentModeFlagBitsKHR};
        ScalarValueToStringJson(outputFile, pModes->GetPointer(), vinfo_pModes); // PXR
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCreateHeadlessSurfaceEXT(
    VkResult                                    returnValue,
    format::HandleId                            instance,
    const StructPointerDecoder<Decoded_VkHeadlessSurfaceCreateInfoEXT>& pCreateInfo,
    const StructPointerDecoder<Decoded_VkAllocationCallbacks>& pAllocator,
    HandlePointerDecoder<VkSurfaceKHR>*         pSurface)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCreateHeadlessSurfaceEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"VkResult\",\n");
    IndentSpacesJson(outputFile, 3); // TKP
    OutputStringJson(outputFile, "\"returnValue\" : \"");
    EnumToStringVkResult(outputFile, returnValue);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkInstance instance
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkInstance"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"instance\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, instance); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkHeadlessSurfaceCreateInfoEXT*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pCreateInfo\",\n");
    if (pCreateInfo.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pCreateInfo.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pCreateInfo.GetMetaStructPointer(), indent, pCreateInfo.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: const VkAllocationCallbacks* pAllocator
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"const VkAllocationCallbacks*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pAllocator\",\n");
    if (pAllocator.GetPointer() == nullptr) // WWU
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pAllocator.GetAddress() /* RQB */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"members\" :\n");
        StructureToStringJson(outputFile, *pAllocator.GetMetaStructPointer(), indent, pAllocator.GetAddress()); // GLW
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkSurfaceKHR* pSurface
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkSurfaceKHR*"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"pSurface\",\n");
    if (pSurface->GetPointer() == nullptr) // WWY
    {
        IndentSpacesJson(outputFile, indent); // RGV
        OutputStringJson(outputFile, "\"address\" : \"NULL\"\n");
    }
    else
    { // JHD
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"address\" : \""); // EAC
        AddrToStringJson(outputFile, pSurface->GetAddress() /* RQA */ );
        OutputStringJson(outputFile, "\",\n");
        IndentSpacesJson(outputFile, indent);
        OutputStringJson(outputFile, "\"value\" : \"");
        AddrToStringJson(outputFile, *pSurface->GetPointer()); // URY
        OutputStringJson(outputFile, "\"\n");
    } // HWR
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkCmdSetLineStippleEXT(
    format::HandleId                            commandBuffer,
    uint32_t                                    lineStippleFactor,
    uint16_t                                    lineStipplePattern)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkCmdSetLineStippleEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkCommandBuffer commandBuffer
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkCommandBuffer"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"commandBuffer\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, commandBuffer); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t lineStippleFactor
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"lineStippleFactor\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, lineStippleFactor); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint16_t lineStipplePattern
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint16_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"lineStipplePattern\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, lineStipplePattern); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}


void VulkanJsonConsumer::Process_vkResetQueryPoolEXT(
    format::HandleId                            device,
    format::HandleId                            queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount)
{
    uint32_t indent = 5;
    FILE* outputFile = GetFile();

    if (need_function_comma)
    {
        OutputStringJson(outputFile, ",\n");
    }
    need_function_comma = true;

    IndentSpacesJson(outputFile, 2); // TWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, 3); // TRP
    OutputStringJson(outputFile, "\"name\" : \"vkResetQueryPoolEXT\",\n"); // FCN
    IndentSpacesJson(outputFile, 3); // TNP
    OutputStringJson(outputFile, "\"thread\" : \"Thread ");
    SignedDecimalToStringJson(outputFile, 0);
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, 3); // TLP
    OutputStringJson(outputFile, "\"returnType\" : \"void\",\n");
    IndentSpacesJson(outputFile, 3); // TTP
    OutputStringJson(outputFile, "\"args\" :\n");
    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "[\n");

    // func arg: VkDevice device
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkDevice"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"device\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, device); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: VkQueryPool queryPool
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"VkQueryPool"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryPool\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    AddrToStringJson(outputFile, queryPool); // PRQ
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t firstQuery
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"firstQuery\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, firstQuery); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "},\n");

    // func arg: uint32_t queryCount
    IndentSpacesJson(outputFile, 4); // UWP
    OutputStringJson(outputFile, "{\n");
    IndentSpacesJson(outputFile, indent); // ESP
    OutputStringJson(outputFile, "\"type\" : \"uint32_t"); // NUN
    OutputStringJson(outputFile, "\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"name\" : \"queryCount\",\n");
    IndentSpacesJson(outputFile, indent);
    OutputStringJson(outputFile, "\"value\" : \"");
    UnsignedDecimalToStringJson(outputFile, queryCount); // UYW
    OutputStringJson(outputFile, "\"\n");
    IndentSpacesJson(outputFile, 4);
    OutputStringJson(outputFile, "}\n");

    IndentSpacesJson(outputFile, 3);
    OutputStringJson(outputFile, "]\n");
    IndentSpacesJson(outputFile, 2); // RRW
    OutputStringJson(outputFile, "}");

}

GFXRECON_END_NAMESPACE(decode)
GFXRECON_END_NAMESPACE(gfxrecon)
