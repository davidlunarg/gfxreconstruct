/*
** Copyright (c) 2018-2019 Valve Corporation
** Copyright (c) 2018-2019 LunarG, Inc.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/

/*
** This file is generated from the Khronos Vulkan XML API Registry.
**
*/

#ifndef  GFXRECON_GENERATED_VULKAN_ASCII_STRUCT_UTIL_H
#define  GFXRECON_GENERATED_VULKAN_ASCII_STRUCT_UTIL_H

#include "generated/generated_vulkan_ascii_enum_util.h"
#include "format/platform_types.h"
#include "util/defines.h"
#include "util/ascii_utils.h"
#include "vulkan/vulkan.h"
#include <inttypes.h>
#include <string>

GFXRECON_BEGIN_NAMESPACE(gfxrecon)
GFXRECON_BEGIN_NAMESPACE(decode)

void StructureToString(std::string* out, const Decoded_VkApplicationInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkInstanceCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAllocationCallbacks &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFeatures &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFormatProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExtent3D &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageFormatProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceLimits &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSparseProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkQueueFamilyProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryType &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryHeap &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMemoryProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceQueueCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExtensionProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkLayerProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubmitInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryAllocateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMappedMemoryRange &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryRequirements &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSparseImageFormatProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSparseImageMemoryRequirements &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSparseMemoryBind &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSparseBufferMemoryBindInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSparseImageOpaqueMemoryBindInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageSubresource &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkOffset3D &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSparseImageMemoryBind &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSparseImageMemoryBindInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBindSparseInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFenceCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSemaphoreCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkEventCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkQueryPoolCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBufferCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBufferViewCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubresourceLayout &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkComponentMapping &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageSubresourceRange &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageViewCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkShaderModuleCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineCacheCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSpecializationMapEntry &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSpecializationInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineShaderStageCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkVertexInputBindingDescription &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkVertexInputAttributeDescription &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineVertexInputStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineInputAssemblyStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineTessellationStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkViewport &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkOffset2D &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExtent2D &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRect2D &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineViewportStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineMultisampleStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkStencilOpState &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineDepthStencilStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineColorBlendAttachmentState &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineColorBlendStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineDynamicStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkGraphicsPipelineCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkComputePipelineCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPushConstantRange &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineLayoutCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSamplerCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorSetLayoutBinding &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorSetLayoutCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorPoolSize &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorPoolCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorSetAllocateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorImageInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorBufferInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkWriteDescriptorSet &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCopyDescriptorSet &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFramebufferCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAttachmentDescription &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAttachmentReference &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubpassDescription &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubpassDependency &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRenderPassCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCommandPoolCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCommandBufferAllocateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCommandBufferInheritanceInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCommandBufferBeginInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBufferCopy &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageSubresourceLayers &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageCopy &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageBlit &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBufferImageCopy &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkClearColorValue &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkClearDepthStencilValue &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkClearValue &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkClearAttachment &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkClearRect &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageResolve &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryBarrier &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBufferMemoryBarrier &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageMemoryBarrier &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRenderPassBeginInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDispatchIndirectCommand &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDrawIndexedIndirectCommand &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDrawIndirectCommand &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSubgroupProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBindBufferMemoryInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBindImageMemoryInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDevice16BitStorageFeatures &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryDedicatedRequirements &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryDedicatedAllocateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryAllocateFlagsInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGroupRenderPassBeginInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGroupCommandBufferBeginInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGroupSubmitInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGroupBindSparseInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBindBufferMemoryDeviceGroupInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBindImageMemoryDeviceGroupInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceGroupProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGroupDeviceCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBufferMemoryRequirementsInfo2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageMemoryRequirementsInfo2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageSparseMemoryRequirementsInfo2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryRequirements2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSparseImageMemoryRequirements2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFeatures2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceProperties2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFormatProperties2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageFormatProperties2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceImageFormatInfo2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkQueueFamilyProperties2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMemoryProperties2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSparseImageFormatProperties2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSparseImageFormatInfo2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDevicePointClippingProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkInputAttachmentAspectReference &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRenderPassInputAttachmentAspectCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageViewUsageCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineTessellationDomainOriginStateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRenderPassMultiviewCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMultiviewFeatures &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMultiviewProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceVariablePointersFeatures &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceProtectedMemoryFeatures &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceProtectedMemoryProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceQueueInfo2 &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkProtectedSubmitInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSamplerYcbcrConversionCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSamplerYcbcrConversionInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBindImagePlaneMemoryInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImagePlaneMemoryRequirementsInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSamplerYcbcrConversionFeatures &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSamplerYcbcrConversionImageFormatProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorUpdateTemplateEntry &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorUpdateTemplateCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalMemoryProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalImageFormatInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalImageFormatProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalBufferInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalBufferProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceIDProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalMemoryImageCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalMemoryBufferCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExportMemoryAllocateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalFenceInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalFenceProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExportFenceCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExportSemaphoreCreateInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalSemaphoreInfo &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalSemaphoreProperties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMaintenance3Properties &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorSetLayoutSupport &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderDrawParametersFeatures &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSurfaceCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSurfaceFormatKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSwapchainCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPresentInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageSwapchainCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBindImageMemorySwapchainInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAcquireNextImageInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGroupPresentCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGroupPresentInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGroupSwapchainCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayPropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayModeParametersKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayModePropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayModeCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayPlaneCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayPlanePropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplaySurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayPresentInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkXlibSurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkXcbSurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkWaylandSurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAndroidSurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkWin32SurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImportMemoryWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExportMemoryWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryWin32HandlePropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryGetWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImportMemoryFdInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryFdPropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryGetFdInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkWin32KeyedMutexAcquireReleaseInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImportSemaphoreWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExportSemaphoreWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkD3D12FenceSubmitInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSemaphoreGetWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImportSemaphoreFdInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSemaphoreGetFdInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDevicePushDescriptorPropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRectLayerKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPresentRegionKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPresentRegionsKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceImagelessFramebufferFeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFramebufferAttachmentImageInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFramebufferAttachmentsCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRenderPassAttachmentBeginInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAttachmentDescription2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAttachmentReference2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubpassDescription2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubpassDependency2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRenderPassCreateInfo2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubpassBeginInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubpassEndInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSharedPresentSurfaceCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImportFenceWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExportFenceWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFenceGetWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImportFenceFdInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFenceGetFdInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSurfaceInfo2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSurfaceCapabilities2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSurfaceFormat2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayProperties2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayPlaneProperties2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayModeProperties2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayPlaneInfo2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayPlaneCapabilities2KHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageFormatListCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDevice8BitStorageFeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderClockFeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkConformanceVersionKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDriverPropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFloatControlsPropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubpassDescriptionDepthStencilResolveKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDepthStencilResolvePropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTimelineSemaphorePropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSemaphoreTypeCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkTimelineSemaphoreSubmitInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSemaphoreWaitInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSemaphoreSignalInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSurfaceProtectedCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineExecutablePropertiesKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineExecutableInfoKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineExecutableStatisticValueKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineExecutableStatisticKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineExecutableInternalRepresentationKHR &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDebugReportCallbackCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationStateRasterizationOrderAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDebugMarkerObjectNameInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDebugMarkerObjectTagInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDebugMarkerMarkerInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDedicatedAllocationImageCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDedicatedAllocationBufferCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDedicatedAllocationMemoryAllocateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTransformFeedbackFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTransformFeedbackPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationStateStreamCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageViewHandleInfoNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkTextureLODGatherFormatPropertiesAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkShaderResourceUsageAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkShaderStatisticsInfoAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkStreamDescriptorSurfaceCreateInfoGGP &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCornerSampledImageFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalImageFormatPropertiesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalMemoryImageCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExportMemoryAllocateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImportMemoryWin32HandleInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExportMemoryWin32HandleInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkWin32KeyedMutexAcquireReleaseInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkValidationFlagsEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkViSurfaceCreateInfoNN &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageViewASTCDecodeModeEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceASTCDecodeFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkConditionalRenderingBeginInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceConditionalRenderingFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCommandBufferInheritanceConditionalRenderingInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGeneratedCommandsFeaturesNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceGeneratedCommandsLimitsNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkIndirectCommandsTokenNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkIndirectCommandsLayoutTokenNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkIndirectCommandsLayoutCreateInfoNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCmdProcessCommandsInfoNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCmdReserveSpaceForCommandsInfoNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkObjectTableCreateInfoNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkObjectTableEntryNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkObjectTablePipelineEntryNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkObjectTableDescriptorSetEntryNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkObjectTableVertexBufferEntryNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkObjectTableIndexBufferEntryNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkObjectTablePushConstantEntryNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkViewportWScalingNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineViewportWScalingStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSurfaceCapabilities2EXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayPowerInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceEventInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayEventInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSwapchainCounterCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRefreshCycleDurationGOOGLE &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPastPresentationTimingGOOGLE &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPresentTimeGOOGLE &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPresentTimesInfoGOOGLE &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkViewportSwizzleNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineViewportSwizzleStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDiscardRectanglePropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineDiscardRectangleStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceConservativeRasterizationPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationConservativeStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDepthClipEnableFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationDepthClipStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkXYColorEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkHdrMetadataEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkIOSSurfaceCreateInfoMVK &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMacOSSurfaceCreateInfoMVK &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDebugUtilsObjectNameInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDebugUtilsObjectTagInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDebugUtilsLabelEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDebugUtilsMessengerCallbackDataEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDebugUtilsMessengerCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAndroidHardwareBufferUsageANDROID &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAndroidHardwareBufferPropertiesANDROID &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAndroidHardwareBufferFormatPropertiesANDROID &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImportAndroidHardwareBufferInfoANDROID &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryGetAndroidHardwareBufferInfoANDROID &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkExternalFormatANDROID &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSamplerReductionModeCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceInlineUniformBlockFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceInlineUniformBlockPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkWriteDescriptorSetInlineUniformBlockEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorPoolInlineUniformBlockCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSampleLocationEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSampleLocationsInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAttachmentSampleLocationsEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSubpassSampleLocationsEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRenderPassSampleLocationsBeginInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineSampleLocationsStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSampleLocationsPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMultisamplePropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineColorBlendAdvancedStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineCoverageToColorStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineCoverageModulationStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDrmFormatModifierPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDrmFormatModifierPropertiesListEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceImageDrmFormatModifierInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageDrmFormatModifierListCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageDrmFormatModifierExplicitCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageDrmFormatModifierPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkValidationCacheCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkShaderModuleValidationCacheCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDescriptorIndexingFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDescriptorIndexingPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkShadingRatePaletteNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineViewportShadingRateImageStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShadingRateImageFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShadingRateImagePropertiesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCoarseSampleLocationNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCoarseSampleOrderCustomNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRayTracingShaderGroupCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRayTracingPipelineCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkGeometryTrianglesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkGeometryAABBNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkGeometryDataNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkGeometryNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAccelerationStructureInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAccelerationStructureCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBindAccelerationStructureMemoryInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkWriteDescriptorSetAccelerationStructureNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkAccelerationStructureMemoryRequirementsInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceRayTracingPropertiesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineRepresentativeFragmentTestStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceImageViewImageFormatInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFilterCubicImageViewImageFormatPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceQueueGlobalPriorityCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImportMemoryHostPointerInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryHostPointerPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalMemoryHostPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineCompilerControlCreateInfoAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCalibratedTimestampInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderCorePropertiesAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDeviceMemoryOverallocationCreateInfoAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkVertexInputBindingDivisorDescriptionEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineVertexInputDivisorStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPresentFrameTokenGGP &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineCreationFeedbackEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineCreationFeedbackCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMeshShaderFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMeshShaderPropertiesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDrawMeshTasksIndirectCommandNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderImageFootprintFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineViewportExclusiveScissorStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExclusiveScissorFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkQueueFamilyCheckpointPropertiesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCheckpointDataNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPerformanceValueDataINTEL &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPerformanceValueINTEL &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkInitializePerformanceApiInfoINTEL &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkQueryPoolCreateInfoINTEL &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPerformanceMarkerInfoINTEL &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPerformanceStreamMarkerInfoINTEL &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPerformanceOverrideInfoINTEL &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPerformanceConfigurationAcquireInfoINTEL &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDevicePCIBusInfoPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkDisplayNativeHdrSurfaceCapabilitiesAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSwapchainDisplayNativeHdrCreateInfoAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImagePipeSurfaceCreateInfoFUCHSIA &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMetalSurfaceCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFragmentDensityMapFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFragmentDensityMapPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkRenderPassFragmentDensityMapCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderCoreProperties2AMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCoherentMemoryFeaturesAMD &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMemoryBudgetPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMemoryPriorityFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkMemoryPriorityAllocateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBufferDeviceAddressInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkBufferDeviceAddressCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkImageStencilUsageCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkValidationFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkCooperativeMatrixPropertiesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCooperativeMatrixFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCooperativeMatrixPropertiesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCoverageReductionModeFeaturesNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineCoverageReductionStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkFramebufferMixedSamplesCombinationNV &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSurfaceFullScreenExclusiveInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSurfaceCapabilitiesFullScreenExclusiveEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkSurfaceFullScreenExclusiveWin32InfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkHeadlessSurfaceCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceLineRasterizationFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceLineRasterizationPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationLineStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceHostQueryResetFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceIndexTypeUint8FeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT &pstruct_in, int indent, uint64_t base_addr);
void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT &pstruct_in, int indent, uint64_t base_addr);

void StructureToString(std::string* out, const Decoded_VkApplicationInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkApplicationInfo *pstruct = (const VkApplicationInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: const char* pApplicationName
    IndentSpaces(out, indent);
    *out += "pApplicationName:               ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->pApplicationName); // TGI
    *out += "\n"; // GDS

    // struct member: uint32_t applicationVersion
    IndentSpaces(out, indent);
    *out += "applicationVersion:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->applicationVersion); // UYW
    *out += "\n"; // GDS

    // struct member: const char* pEngineName
    IndentSpaces(out, indent);
    *out += "pEngineName:                    ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->pEngineName); // TGI
    *out += "\n"; // GDS

    // struct member: uint32_t engineVersion
    IndentSpaces(out, indent);
    *out += "engineVersion:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->engineVersion); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t apiVersion
    IndentSpaces(out, indent);
    *out += "apiVersion:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->apiVersion); // UYW
}

void StructureToString(std::string* out, const Decoded_VkInstanceCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkInstanceCreateInfo *pstruct = (const VkInstanceCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkInstanceCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkInstanceCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: const VkApplicationInfo* pApplicationInfo
    IndentSpaces(out, indent);
    *out += "pApplicationInfo:               ";
    *out += "const VkApplicationInfo* = "; // TEQ
    if (pstruct->pApplicationInfo == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pApplicationInfo->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pApplicationInfo->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkInstanceCreateInfo, pApplicationInfo)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: uint32_t enabledLayerCount
    IndentSpaces(out, indent);
    *out += "enabledLayerCount:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->enabledLayerCount); // UYW
    *out += "\n"; // GDS

    // struct member: const char* const* ppEnabledLayerNames
    IndentSpaces(out, indent);
    *out += "ppEnabledLayerNames:            ";
    *out += "const char* const* = "; // TEQ
    if (pstruct->ppEnabledLayerNames == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.ppEnabledLayerNames.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_ppEnabledLayerNames = {false, false, false, nullptr};
        ArrayToString<StringArrayDecoder>(out, indent, 2, "const char* const*", &pstruct_in.ppEnabledLayerNames, "ppEnabledLayerNames", pstruct->enabledLayerCount,  vinfo_ppEnabledLayerNames);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t enabledExtensionCount
    IndentSpaces(out, indent);
    *out += "enabledExtensionCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->enabledExtensionCount); // UYW
    *out += "\n"; // GDS

    // struct member: const char* const* ppEnabledExtensionNames
    IndentSpaces(out, indent);
    *out += "ppEnabledExtensionNames:        ";
    *out += "const char* const* = "; // TEQ
    if (pstruct->ppEnabledExtensionNames == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.ppEnabledExtensionNames.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_ppEnabledExtensionNames = {false, false, false, nullptr};
        ArrayToString<StringArrayDecoder>(out, indent, 2, "const char* const*", &pstruct_in.ppEnabledExtensionNames, "ppEnabledExtensionNames", pstruct->enabledExtensionCount,  vinfo_ppEnabledExtensionNames);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkAllocationCallbacks &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAllocationCallbacks *pstruct = (const VkAllocationCallbacks *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: void* pUserData
    IndentSpaces(out, indent);
    *out += "pUserData:                      ";
    *out += "void* = "; // TEQ
    if (pstruct->pUserData == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pUserData); // PWR
    }
    *out += "\n"; // GDS

    // struct member: PFN_vkAllocationFunction pfnAllocation
    IndentSpaces(out, indent);
    *out += "pfnAllocation:                  ";
    *out += "PFN_vkAllocationFunction = "; // TEQ
    AddrToString(out, reinterpret_cast<uint64_t>(pstruct->pfnAllocation)); // WRX
    *out += "\n"; // GDS

    // struct member: PFN_vkReallocationFunction pfnReallocation
    IndentSpaces(out, indent);
    *out += "pfnReallocation:                ";
    *out += "PFN_vkReallocationFunction = "; // TEQ
    AddrToString(out, reinterpret_cast<uint64_t>(pstruct->pfnReallocation)); // WRX
    *out += "\n"; // GDS

    // struct member: PFN_vkFreeFunction pfnFree
    IndentSpaces(out, indent);
    *out += "pfnFree:                        ";
    *out += "PFN_vkFreeFunction = "; // TEQ
    AddrToString(out, reinterpret_cast<uint64_t>(pstruct->pfnFree)); // WRX
    *out += "\n"; // GDS

    // struct member: PFN_vkInternalAllocationNotification pfnInternalAllocation
    IndentSpaces(out, indent);
    *out += "pfnInternalAllocation:          ";
    *out += "PFN_vkInternalAllocationNotification = "; // TEQ
    AddrToString(out, reinterpret_cast<uint64_t>(pstruct->pfnInternalAllocation)); // WRX
    *out += "\n"; // GDS

    // struct member: PFN_vkInternalFreeNotification pfnInternalFree
    IndentSpaces(out, indent);
    *out += "pfnInternalFree:                ";
    *out += "PFN_vkInternalFreeNotification = "; // TEQ
    AddrToString(out, reinterpret_cast<uint64_t>(pstruct->pfnInternalFree)); // WRX
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFeatures &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceFeatures *pstruct = (const VkPhysicalDeviceFeatures *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkBool32 robustBufferAccess
    IndentSpaces(out, indent);
    *out += "robustBufferAccess:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->robustBufferAccess); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 fullDrawIndexUint32
    IndentSpaces(out, indent);
    *out += "fullDrawIndexUint32:            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fullDrawIndexUint32); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 imageCubeArray
    IndentSpaces(out, indent);
    *out += "imageCubeArray:                 ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->imageCubeArray); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 independentBlend
    IndentSpaces(out, indent);
    *out += "independentBlend:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->independentBlend); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 geometryShader
    IndentSpaces(out, indent);
    *out += "geometryShader:                 ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->geometryShader); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 tessellationShader
    IndentSpaces(out, indent);
    *out += "tessellationShader:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->tessellationShader); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sampleRateShading
    IndentSpaces(out, indent);
    *out += "sampleRateShading:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sampleRateShading); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 dualSrcBlend
    IndentSpaces(out, indent);
    *out += "dualSrcBlend:                   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->dualSrcBlend); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 logicOp
    IndentSpaces(out, indent);
    *out += "logicOp:                        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->logicOp); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 multiDrawIndirect
    IndentSpaces(out, indent);
    *out += "multiDrawIndirect:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->multiDrawIndirect); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 drawIndirectFirstInstance
    IndentSpaces(out, indent);
    *out += "drawIndirectFirstInstance:      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->drawIndirectFirstInstance); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 depthClamp
    IndentSpaces(out, indent);
    *out += "depthClamp:                     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthClamp); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 depthBiasClamp
    IndentSpaces(out, indent);
    *out += "depthBiasClamp:                 ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthBiasClamp); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 fillModeNonSolid
    IndentSpaces(out, indent);
    *out += "fillModeNonSolid:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fillModeNonSolid); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 depthBounds
    IndentSpaces(out, indent);
    *out += "depthBounds:                    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthBounds); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 wideLines
    IndentSpaces(out, indent);
    *out += "wideLines:                      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->wideLines); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 largePoints
    IndentSpaces(out, indent);
    *out += "largePoints:                    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->largePoints); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 alphaToOne
    IndentSpaces(out, indent);
    *out += "alphaToOne:                     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->alphaToOne); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 multiViewport
    IndentSpaces(out, indent);
    *out += "multiViewport:                  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->multiViewport); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 samplerAnisotropy
    IndentSpaces(out, indent);
    *out += "samplerAnisotropy:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->samplerAnisotropy); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 textureCompressionETC2
    IndentSpaces(out, indent);
    *out += "textureCompressionETC2:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->textureCompressionETC2); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 textureCompressionASTC_LDR
    IndentSpaces(out, indent);
    *out += "textureCompressionASTC_LDR:     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->textureCompressionASTC_LDR); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 textureCompressionBC
    IndentSpaces(out, indent);
    *out += "textureCompressionBC:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->textureCompressionBC); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 occlusionQueryPrecise
    IndentSpaces(out, indent);
    *out += "occlusionQueryPrecise:          ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->occlusionQueryPrecise); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 pipelineStatisticsQuery
    IndentSpaces(out, indent);
    *out += "pipelineStatisticsQuery:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->pipelineStatisticsQuery); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 vertexPipelineStoresAndAtomics
    IndentSpaces(out, indent);
    *out += "vertexPipelineStoresAndAtomics: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->vertexPipelineStoresAndAtomics); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 fragmentStoresAndAtomics
    IndentSpaces(out, indent);
    *out += "fragmentStoresAndAtomics:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fragmentStoresAndAtomics); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderTessellationAndGeometryPointSize
    IndentSpaces(out, indent);
    *out += "shaderTessellationAndGeometryPointSize: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderTessellationAndGeometryPointSize); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderImageGatherExtended
    IndentSpaces(out, indent);
    *out += "shaderImageGatherExtended:      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderImageGatherExtended); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageImageExtendedFormats
    IndentSpaces(out, indent);
    *out += "shaderStorageImageExtendedFormats: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageImageExtendedFormats); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageImageMultisample
    IndentSpaces(out, indent);
    *out += "shaderStorageImageMultisample:  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageImageMultisample); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageImageReadWithoutFormat
    IndentSpaces(out, indent);
    *out += "shaderStorageImageReadWithoutFormat: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageImageReadWithoutFormat); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageImageWriteWithoutFormat
    IndentSpaces(out, indent);
    *out += "shaderStorageImageWriteWithoutFormat: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageImageWriteWithoutFormat); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderUniformBufferArrayDynamicIndexing
    IndentSpaces(out, indent);
    *out += "shaderUniformBufferArrayDynamicIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderUniformBufferArrayDynamicIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSampledImageArrayDynamicIndexing
    IndentSpaces(out, indent);
    *out += "shaderSampledImageArrayDynamicIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSampledImageArrayDynamicIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageBufferArrayDynamicIndexing
    IndentSpaces(out, indent);
    *out += "shaderStorageBufferArrayDynamicIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageBufferArrayDynamicIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageImageArrayDynamicIndexing
    IndentSpaces(out, indent);
    *out += "shaderStorageImageArrayDynamicIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageImageArrayDynamicIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderClipDistance
    IndentSpaces(out, indent);
    *out += "shaderClipDistance:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderClipDistance); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderCullDistance
    IndentSpaces(out, indent);
    *out += "shaderCullDistance:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderCullDistance); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderFloat64
    IndentSpaces(out, indent);
    *out += "shaderFloat64:                  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderFloat64); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderInt64
    IndentSpaces(out, indent);
    *out += "shaderInt64:                    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderInt64); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderInt16
    IndentSpaces(out, indent);
    *out += "shaderInt16:                    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderInt16); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderResourceResidency
    IndentSpaces(out, indent);
    *out += "shaderResourceResidency:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderResourceResidency); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderResourceMinLod
    IndentSpaces(out, indent);
    *out += "shaderResourceMinLod:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderResourceMinLod); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sparseBinding
    IndentSpaces(out, indent);
    *out += "sparseBinding:                  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseBinding); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sparseResidencyBuffer
    IndentSpaces(out, indent);
    *out += "sparseResidencyBuffer:          ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseResidencyBuffer); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sparseResidencyImage2D
    IndentSpaces(out, indent);
    *out += "sparseResidencyImage2D:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseResidencyImage2D); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sparseResidencyImage3D
    IndentSpaces(out, indent);
    *out += "sparseResidencyImage3D:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseResidencyImage3D); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sparseResidency2Samples
    IndentSpaces(out, indent);
    *out += "sparseResidency2Samples:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseResidency2Samples); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sparseResidency4Samples
    IndentSpaces(out, indent);
    *out += "sparseResidency4Samples:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseResidency4Samples); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sparseResidency8Samples
    IndentSpaces(out, indent);
    *out += "sparseResidency8Samples:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseResidency8Samples); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sparseResidency16Samples
    IndentSpaces(out, indent);
    *out += "sparseResidency16Samples:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseResidency16Samples); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 sparseResidencyAliased
    IndentSpaces(out, indent);
    *out += "sparseResidencyAliased:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseResidencyAliased); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 variableMultisampleRate
    IndentSpaces(out, indent);
    *out += "variableMultisampleRate:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->variableMultisampleRate); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 inheritedQueries
    IndentSpaces(out, indent);
    *out += "inheritedQueries:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->inheritedQueries); //EQA
}

void StructureToString(std::string* out, const Decoded_VkFormatProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFormatProperties *pstruct = (const VkFormatProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkFormatFeatureFlags linearTilingFeatures
    IndentSpaces(out, indent);
    *out += "linearTilingFeatures:           ";
    *out += "VkFormatFeatureFlags = "; // TEQ
    FlagsToString(out, pstruct->linearTilingFeatures, EnumToStringVkFormatFeatureFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkFormatFeatureFlags optimalTilingFeatures
    IndentSpaces(out, indent);
    *out += "optimalTilingFeatures:          ";
    *out += "VkFormatFeatureFlags = "; // TEQ
    FlagsToString(out, pstruct->optimalTilingFeatures, EnumToStringVkFormatFeatureFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkFormatFeatureFlags bufferFeatures
    IndentSpaces(out, indent);
    *out += "bufferFeatures:                 ";
    *out += "VkFormatFeatureFlags = "; // TEQ
    FlagsToString(out, pstruct->bufferFeatures, EnumToStringVkFormatFeatureFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkExtent3D &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExtent3D *pstruct = (const VkExtent3D *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t width
    IndentSpaces(out, indent);
    *out += "width:                          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->width); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t height
    IndentSpaces(out, indent);
    *out += "height:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->height); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t depth
    IndentSpaces(out, indent);
    *out += "depth:                          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->depth); // UYW
}

void StructureToString(std::string* out, const Decoded_VkImageFormatProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageFormatProperties *pstruct = (const VkImageFormatProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkExtent3D maxExtent
    IndentSpaces(out, indent);
    *out += "maxExtent:                      ";
    *out += "VkExtent3D = "; // TEQ
    StructureToString(out, *pstruct_in.maxExtent, indent+1,  base_addr + offsetof(VkImageFormatProperties, maxExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t maxMipLevels
    IndentSpaces(out, indent);
    *out += "maxMipLevels:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxMipLevels); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxArrayLayers
    IndentSpaces(out, indent);
    *out += "maxArrayLayers:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxArrayLayers); // UYW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags sampleCounts
    IndentSpaces(out, indent);
    *out += "sampleCounts:                   ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->sampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkDeviceSize maxResourceSize
    IndentSpaces(out, indent);
    *out += "maxResourceSize:                ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->maxResourceSize); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceLimits &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceLimits *pstruct = (const VkPhysicalDeviceLimits *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t maxImageDimension1D
    IndentSpaces(out, indent);
    *out += "maxImageDimension1D:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxImageDimension1D); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxImageDimension2D
    IndentSpaces(out, indent);
    *out += "maxImageDimension2D:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxImageDimension2D); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxImageDimension3D
    IndentSpaces(out, indent);
    *out += "maxImageDimension3D:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxImageDimension3D); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxImageDimensionCube
    IndentSpaces(out, indent);
    *out += "maxImageDimensionCube:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxImageDimensionCube); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxImageArrayLayers
    IndentSpaces(out, indent);
    *out += "maxImageArrayLayers:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxImageArrayLayers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTexelBufferElements
    IndentSpaces(out, indent);
    *out += "maxTexelBufferElements:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTexelBufferElements); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxUniformBufferRange
    IndentSpaces(out, indent);
    *out += "maxUniformBufferRange:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxUniformBufferRange); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxStorageBufferRange
    IndentSpaces(out, indent);
    *out += "maxStorageBufferRange:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxStorageBufferRange); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPushConstantsSize
    IndentSpaces(out, indent);
    *out += "maxPushConstantsSize:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPushConstantsSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxMemoryAllocationCount
    IndentSpaces(out, indent);
    *out += "maxMemoryAllocationCount:       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxMemoryAllocationCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxSamplerAllocationCount
    IndentSpaces(out, indent);
    *out += "maxSamplerAllocationCount:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxSamplerAllocationCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkDeviceSize bufferImageGranularity
    IndentSpaces(out, indent);
    *out += "bufferImageGranularity:         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->bufferImageGranularity); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize sparseAddressSpaceSize
    IndentSpaces(out, indent);
    *out += "sparseAddressSpaceSize:         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->sparseAddressSpaceSize); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t maxBoundDescriptorSets
    IndentSpaces(out, indent);
    *out += "maxBoundDescriptorSets:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxBoundDescriptorSets); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorSamplers
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorSamplers:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorSamplers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorUniformBuffers
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorUniformBuffers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorUniformBuffers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorStorageBuffers
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorStorageBuffers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorStorageBuffers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorSampledImages
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorSampledImages: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorSampledImages); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorStorageImages
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorStorageImages: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorStorageImages); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorInputAttachments
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorInputAttachments: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorInputAttachments); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageResources
    IndentSpaces(out, indent);
    *out += "maxPerStageResources:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageResources); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetSamplers
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetSamplers:       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetSamplers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUniformBuffers
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUniformBuffers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUniformBuffers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUniformBuffersDynamic
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUniformBuffersDynamic: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUniformBuffersDynamic); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetStorageBuffers
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetStorageBuffers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetStorageBuffers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetStorageBuffersDynamic
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetStorageBuffersDynamic: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetStorageBuffersDynamic); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetSampledImages
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetSampledImages:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetSampledImages); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetStorageImages
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetStorageImages:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetStorageImages); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetInputAttachments
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetInputAttachments: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetInputAttachments); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxVertexInputAttributes
    IndentSpaces(out, indent);
    *out += "maxVertexInputAttributes:       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxVertexInputAttributes); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxVertexInputBindings
    IndentSpaces(out, indent);
    *out += "maxVertexInputBindings:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxVertexInputBindings); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxVertexInputAttributeOffset
    IndentSpaces(out, indent);
    *out += "maxVertexInputAttributeOffset:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxVertexInputAttributeOffset); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxVertexInputBindingStride
    IndentSpaces(out, indent);
    *out += "maxVertexInputBindingStride:    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxVertexInputBindingStride); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxVertexOutputComponents
    IndentSpaces(out, indent);
    *out += "maxVertexOutputComponents:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxVertexOutputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTessellationGenerationLevel
    IndentSpaces(out, indent);
    *out += "maxTessellationGenerationLevel: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTessellationGenerationLevel); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTessellationPatchSize
    IndentSpaces(out, indent);
    *out += "maxTessellationPatchSize:       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTessellationPatchSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTessellationControlPerVertexInputComponents
    IndentSpaces(out, indent);
    *out += "maxTessellationControlPerVertexInputComponents: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTessellationControlPerVertexInputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTessellationControlPerVertexOutputComponents
    IndentSpaces(out, indent);
    *out += "maxTessellationControlPerVertexOutputComponents: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTessellationControlPerVertexOutputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTessellationControlPerPatchOutputComponents
    IndentSpaces(out, indent);
    *out += "maxTessellationControlPerPatchOutputComponents: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTessellationControlPerPatchOutputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTessellationControlTotalOutputComponents
    IndentSpaces(out, indent);
    *out += "maxTessellationControlTotalOutputComponents: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTessellationControlTotalOutputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTessellationEvaluationInputComponents
    IndentSpaces(out, indent);
    *out += "maxTessellationEvaluationInputComponents: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTessellationEvaluationInputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTessellationEvaluationOutputComponents
    IndentSpaces(out, indent);
    *out += "maxTessellationEvaluationOutputComponents: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTessellationEvaluationOutputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxGeometryShaderInvocations
    IndentSpaces(out, indent);
    *out += "maxGeometryShaderInvocations:   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxGeometryShaderInvocations); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxGeometryInputComponents
    IndentSpaces(out, indent);
    *out += "maxGeometryInputComponents:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxGeometryInputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxGeometryOutputComponents
    IndentSpaces(out, indent);
    *out += "maxGeometryOutputComponents:    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxGeometryOutputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxGeometryOutputVertices
    IndentSpaces(out, indent);
    *out += "maxGeometryOutputVertices:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxGeometryOutputVertices); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxGeometryTotalOutputComponents
    IndentSpaces(out, indent);
    *out += "maxGeometryTotalOutputComponents: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxGeometryTotalOutputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxFragmentInputComponents
    IndentSpaces(out, indent);
    *out += "maxFragmentInputComponents:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxFragmentInputComponents); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxFragmentOutputAttachments
    IndentSpaces(out, indent);
    *out += "maxFragmentOutputAttachments:   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxFragmentOutputAttachments); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxFragmentDualSrcAttachments
    IndentSpaces(out, indent);
    *out += "maxFragmentDualSrcAttachments:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxFragmentDualSrcAttachments); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxFragmentCombinedOutputResources
    IndentSpaces(out, indent);
    *out += "maxFragmentCombinedOutputResources: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxFragmentCombinedOutputResources); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxComputeSharedMemorySize
    IndentSpaces(out, indent);
    *out += "maxComputeSharedMemorySize:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxComputeSharedMemorySize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxComputeWorkGroupCount
    IndentSpaces(out, indent);
    *out += "maxComputeWorkGroupCount:       ";
    *out += "uint32_t[";
    *out += "3"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupCount)); // IYY
    ScalarValueToStringStruct vinfo_maxComputeWorkGroupCount = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint32_t>>(out, indent, 0, "uint32_t", &pstruct_in.maxComputeWorkGroupCount, "maxComputeWorkGroupCount", 3, vinfo_maxComputeWorkGroupCount); // JPE
    *out += "\n"; // GDS

    // struct member: uint32_t maxComputeWorkGroupInvocations
    IndentSpaces(out, indent);
    *out += "maxComputeWorkGroupInvocations: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxComputeWorkGroupInvocations); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxComputeWorkGroupSize
    IndentSpaces(out, indent);
    *out += "maxComputeWorkGroupSize:        ";
    *out += "uint32_t[";
    *out += "3"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceLimits, maxComputeWorkGroupSize)); // IYY
    ScalarValueToStringStruct vinfo_maxComputeWorkGroupSize = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint32_t>>(out, indent, 0, "uint32_t", &pstruct_in.maxComputeWorkGroupSize, "maxComputeWorkGroupSize", 3, vinfo_maxComputeWorkGroupSize); // JPE
    *out += "\n"; // GDS

    // struct member: uint32_t subPixelPrecisionBits
    IndentSpaces(out, indent);
    *out += "subPixelPrecisionBits:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subPixelPrecisionBits); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t subTexelPrecisionBits
    IndentSpaces(out, indent);
    *out += "subTexelPrecisionBits:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subTexelPrecisionBits); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t mipmapPrecisionBits
    IndentSpaces(out, indent);
    *out += "mipmapPrecisionBits:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->mipmapPrecisionBits); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDrawIndexedIndexValue
    IndentSpaces(out, indent);
    *out += "maxDrawIndexedIndexValue:       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDrawIndexedIndexValue); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDrawIndirectCount
    IndentSpaces(out, indent);
    *out += "maxDrawIndirectCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDrawIndirectCount); // UYW
    *out += "\n"; // GDS

    // struct member: float maxSamplerLodBias
    IndentSpaces(out, indent);
    *out += "maxSamplerLodBias:              ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxSamplerLodBias); // PEZ
    *out += "\n"; // GDS

    // struct member: float maxSamplerAnisotropy
    IndentSpaces(out, indent);
    *out += "maxSamplerAnisotropy:           ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxSamplerAnisotropy); // PEZ
    *out += "\n"; // GDS

    // struct member: uint32_t maxViewports
    IndentSpaces(out, indent);
    *out += "maxViewports:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxViewports); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxViewportDimensions
    IndentSpaces(out, indent);
    *out += "maxViewportDimensions:          ";
    *out += "uint32_t[";
    *out += "2"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceLimits, maxViewportDimensions)); // IYY
    ScalarValueToStringStruct vinfo_maxViewportDimensions = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint32_t>>(out, indent, 0, "uint32_t", &pstruct_in.maxViewportDimensions, "maxViewportDimensions", 2, vinfo_maxViewportDimensions); // JPE
    *out += "\n"; // GDS

    // struct member: float viewportBoundsRange
    IndentSpaces(out, indent);
    *out += "viewportBoundsRange:            ";
    *out += "float[";
    *out += "2"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceLimits, viewportBoundsRange)); // IYY
    ScalarValueToStringStruct vinfo_viewportBoundsRange = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<float>>(out, indent, 0, "float", &pstruct_in.viewportBoundsRange, "viewportBoundsRange", 2, vinfo_viewportBoundsRange); // JPE
    *out += "\n"; // GDS

    // struct member: uint32_t viewportSubPixelBits
    IndentSpaces(out, indent);
    *out += "viewportSubPixelBits:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->viewportSubPixelBits); // UYW
    *out += "\n"; // GDS

    // struct member: size_t minMemoryMapAlignment
    IndentSpaces(out, indent);
    *out += "minMemoryMapAlignment:          ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minMemoryMapAlignment); // UYW
    *out += "\n"; // GDS

    // struct member: VkDeviceSize minTexelBufferOffsetAlignment
    IndentSpaces(out, indent);
    *out += "minTexelBufferOffsetAlignment:  ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->minTexelBufferOffsetAlignment); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize minUniformBufferOffsetAlignment
    IndentSpaces(out, indent);
    *out += "minUniformBufferOffsetAlignment: ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->minUniformBufferOffsetAlignment); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize minStorageBufferOffsetAlignment
    IndentSpaces(out, indent);
    *out += "minStorageBufferOffsetAlignment: ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->minStorageBufferOffsetAlignment); //EQA
    *out += "\n"; // GDS

    // struct member: int32_t minTexelOffset
    IndentSpaces(out, indent);
    *out += "minTexelOffset:                 ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->minTexelOffset); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t maxTexelOffset
    IndentSpaces(out, indent);
    *out += "maxTexelOffset:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTexelOffset); // UYW
    *out += "\n"; // GDS

    // struct member: int32_t minTexelGatherOffset
    IndentSpaces(out, indent);
    *out += "minTexelGatherOffset:           ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->minTexelGatherOffset); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t maxTexelGatherOffset
    IndentSpaces(out, indent);
    *out += "maxTexelGatherOffset:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTexelGatherOffset); // UYW
    *out += "\n"; // GDS

    // struct member: float minInterpolationOffset
    IndentSpaces(out, indent);
    *out += "minInterpolationOffset:         ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->minInterpolationOffset); // PEZ
    *out += "\n"; // GDS

    // struct member: float maxInterpolationOffset
    IndentSpaces(out, indent);
    *out += "maxInterpolationOffset:         ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxInterpolationOffset); // PEZ
    *out += "\n"; // GDS

    // struct member: uint32_t subPixelInterpolationOffsetBits
    IndentSpaces(out, indent);
    *out += "subPixelInterpolationOffsetBits: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subPixelInterpolationOffsetBits); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxFramebufferWidth
    IndentSpaces(out, indent);
    *out += "maxFramebufferWidth:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxFramebufferWidth); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxFramebufferHeight
    IndentSpaces(out, indent);
    *out += "maxFramebufferHeight:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxFramebufferHeight); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxFramebufferLayers
    IndentSpaces(out, indent);
    *out += "maxFramebufferLayers:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxFramebufferLayers); // UYW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags framebufferColorSampleCounts
    IndentSpaces(out, indent);
    *out += "framebufferColorSampleCounts:   ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->framebufferColorSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags framebufferDepthSampleCounts
    IndentSpaces(out, indent);
    *out += "framebufferDepthSampleCounts:   ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->framebufferDepthSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags framebufferStencilSampleCounts
    IndentSpaces(out, indent);
    *out += "framebufferStencilSampleCounts: ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->framebufferStencilSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags framebufferNoAttachmentsSampleCounts
    IndentSpaces(out, indent);
    *out += "framebufferNoAttachmentsSampleCounts: ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->framebufferNoAttachmentsSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t maxColorAttachments
    IndentSpaces(out, indent);
    *out += "maxColorAttachments:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxColorAttachments); // UYW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags sampledImageColorSampleCounts
    IndentSpaces(out, indent);
    *out += "sampledImageColorSampleCounts:  ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->sampledImageColorSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags sampledImageIntegerSampleCounts
    IndentSpaces(out, indent);
    *out += "sampledImageIntegerSampleCounts: ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->sampledImageIntegerSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags sampledImageDepthSampleCounts
    IndentSpaces(out, indent);
    *out += "sampledImageDepthSampleCounts:  ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->sampledImageDepthSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags sampledImageStencilSampleCounts
    IndentSpaces(out, indent);
    *out += "sampledImageStencilSampleCounts: ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->sampledImageStencilSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags storageImageSampleCounts
    IndentSpaces(out, indent);
    *out += "storageImageSampleCounts:       ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->storageImageSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t maxSampleMaskWords
    IndentSpaces(out, indent);
    *out += "maxSampleMaskWords:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxSampleMaskWords); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 timestampComputeAndGraphics
    IndentSpaces(out, indent);
    *out += "timestampComputeAndGraphics:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->timestampComputeAndGraphics); //EQA
    *out += "\n"; // GDS

    // struct member: float timestampPeriod
    IndentSpaces(out, indent);
    *out += "timestampPeriod:                ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->timestampPeriod); // PEZ
    *out += "\n"; // GDS

    // struct member: uint32_t maxClipDistances
    IndentSpaces(out, indent);
    *out += "maxClipDistances:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxClipDistances); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxCullDistances
    IndentSpaces(out, indent);
    *out += "maxCullDistances:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxCullDistances); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxCombinedClipAndCullDistances
    IndentSpaces(out, indent);
    *out += "maxCombinedClipAndCullDistances: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxCombinedClipAndCullDistances); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t discreteQueuePriorities
    IndentSpaces(out, indent);
    *out += "discreteQueuePriorities:        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->discreteQueuePriorities); // UYW
    *out += "\n"; // GDS

    // struct member: float pointSizeRange
    IndentSpaces(out, indent);
    *out += "pointSizeRange:                 ";
    *out += "float[";
    *out += "2"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceLimits, pointSizeRange)); // IYY
    ScalarValueToStringStruct vinfo_pointSizeRange = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<float>>(out, indent, 0, "float", &pstruct_in.pointSizeRange, "pointSizeRange", 2, vinfo_pointSizeRange); // JPE
    *out += "\n"; // GDS

    // struct member: float lineWidthRange
    IndentSpaces(out, indent);
    *out += "lineWidthRange:                 ";
    *out += "float[";
    *out += "2"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceLimits, lineWidthRange)); // IYY
    ScalarValueToStringStruct vinfo_lineWidthRange = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<float>>(out, indent, 0, "float", &pstruct_in.lineWidthRange, "lineWidthRange", 2, vinfo_lineWidthRange); // JPE
    *out += "\n"; // GDS

    // struct member: float pointSizeGranularity
    IndentSpaces(out, indent);
    *out += "pointSizeGranularity:           ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->pointSizeGranularity); // PEZ
    *out += "\n"; // GDS

    // struct member: float lineWidthGranularity
    IndentSpaces(out, indent);
    *out += "lineWidthGranularity:           ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->lineWidthGranularity); // PEZ
    *out += "\n"; // GDS

    // struct member: VkBool32 strictLines
    IndentSpaces(out, indent);
    *out += "strictLines:                    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->strictLines); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 standardSampleLocations
    IndentSpaces(out, indent);
    *out += "standardSampleLocations:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->standardSampleLocations); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize optimalBufferCopyOffsetAlignment
    IndentSpaces(out, indent);
    *out += "optimalBufferCopyOffsetAlignment: ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->optimalBufferCopyOffsetAlignment); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize optimalBufferCopyRowPitchAlignment
    IndentSpaces(out, indent);
    *out += "optimalBufferCopyRowPitchAlignment: ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->optimalBufferCopyRowPitchAlignment); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize nonCoherentAtomSize
    IndentSpaces(out, indent);
    *out += "nonCoherentAtomSize:            ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->nonCoherentAtomSize); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSparseProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceSparseProperties *pstruct = (const VkPhysicalDeviceSparseProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkBool32 residencyStandard2DBlockShape
    IndentSpaces(out, indent);
    *out += "residencyStandard2DBlockShape:  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->residencyStandard2DBlockShape); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 residencyStandard2DMultisampleBlockShape
    IndentSpaces(out, indent);
    *out += "residencyStandard2DMultisampleBlockShape: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->residencyStandard2DMultisampleBlockShape); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 residencyStandard3DBlockShape
    IndentSpaces(out, indent);
    *out += "residencyStandard3DBlockShape:  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->residencyStandard3DBlockShape); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 residencyAlignedMipSize
    IndentSpaces(out, indent);
    *out += "residencyAlignedMipSize:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->residencyAlignedMipSize); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 residencyNonResidentStrict
    IndentSpaces(out, indent);
    *out += "residencyNonResidentStrict:     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->residencyNonResidentStrict); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceProperties *pstruct = (const VkPhysicalDeviceProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t apiVersion
    IndentSpaces(out, indent);
    *out += "apiVersion:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->apiVersion); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t driverVersion
    IndentSpaces(out, indent);
    *out += "driverVersion:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->driverVersion); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t vendorID
    IndentSpaces(out, indent);
    *out += "vendorID:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->vendorID); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t deviceID
    IndentSpaces(out, indent);
    *out += "deviceID:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceID); // UYW
    *out += "\n"; // GDS

    // struct member: VkPhysicalDeviceType deviceType
    IndentSpaces(out, indent);
    *out += "deviceType:                     ";
    *out += "VkPhysicalDeviceType = "; // TEQ
    EnumToStringVkPhysicalDeviceType(out, pstruct->deviceType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->deviceType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: char deviceName
    IndentSpaces(out, indent);
    *out += "deviceName:                     ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_deviceName = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.deviceName.GetPointer(), "deviceName", VK_MAX_PHYSICAL_DEVICE_NAME_SIZE, vinfo_deviceName); // JPB
    *out += "\n"; // GDS

    // struct member: uint8_t pipelineCacheUUID
    IndentSpaces(out, indent);
    *out += "pipelineCacheUUID:              ";
    *out += "uint8_t[";
    *out += "VK_UUID_SIZE"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceProperties, pipelineCacheUUID)); // IYY
    ScalarValueToStringStruct vinfo_pipelineCacheUUID = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint8_t>>(out, indent, 0, "uint8_t", &pstruct_in.pipelineCacheUUID, "pipelineCacheUUID", VK_UUID_SIZE, vinfo_pipelineCacheUUID); // JPE
    *out += "\n"; // GDS

    // struct member: VkPhysicalDeviceLimits limits
    IndentSpaces(out, indent);
    *out += "limits:                         ";
    *out += "VkPhysicalDeviceLimits = "; // TEQ
    StructureToString(out, *pstruct_in.limits, indent+1,  base_addr + offsetof(VkPhysicalDeviceProperties, limits)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkPhysicalDeviceSparseProperties sparseProperties
    IndentSpaces(out, indent);
    *out += "sparseProperties:               ";
    *out += "VkPhysicalDeviceSparseProperties = "; // TEQ
    StructureToString(out, *pstruct_in.sparseProperties, indent+1,  base_addr + offsetof(VkPhysicalDeviceProperties, sparseProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkQueueFamilyProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkQueueFamilyProperties *pstruct = (const VkQueueFamilyProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkQueueFlags queueFlags
    IndentSpaces(out, indent);
    *out += "queueFlags:                     ";
    *out += "VkQueueFlags = "; // TEQ
    FlagsToString(out, pstruct->queueFlags, EnumToStringVkQueueFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t queueCount
    IndentSpaces(out, indent);
    *out += "queueCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t timestampValidBits
    IndentSpaces(out, indent);
    *out += "timestampValidBits:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->timestampValidBits); // UYW
    *out += "\n"; // GDS

    // struct member: VkExtent3D minImageTransferGranularity
    IndentSpaces(out, indent);
    *out += "minImageTransferGranularity:    ";
    *out += "VkExtent3D = "; // TEQ
    StructureToString(out, *pstruct_in.minImageTransferGranularity, indent+1,  base_addr + offsetof(VkQueueFamilyProperties, minImageTransferGranularity)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkMemoryType &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryType *pstruct = (const VkMemoryType *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkMemoryPropertyFlags propertyFlags
    IndentSpaces(out, indent);
    *out += "propertyFlags:                  ";
    *out += "VkMemoryPropertyFlags = "; // TEQ
    FlagsToString(out, pstruct->propertyFlags, EnumToStringVkMemoryPropertyFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t heapIndex
    IndentSpaces(out, indent);
    *out += "heapIndex:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->heapIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkMemoryHeap &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryHeap *pstruct = (const VkMemoryHeap *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDeviceSize size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->size); //EQA
    *out += "\n"; // GDS

    // struct member: VkMemoryHeapFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkMemoryHeapFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkMemoryHeapFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMemoryProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMemoryProperties *pstruct = (const VkPhysicalDeviceMemoryProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t memoryTypeCount
    IndentSpaces(out, indent);
    *out += "memoryTypeCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->memoryTypeCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkMemoryType memoryTypes
    IndentSpaces(out, indent);
    *out += "memoryTypes:                    ";
    *out += "VkMemoryType[";
    UnsignedDecimalToString(out, pstruct->memoryTypeCount); // DFW
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceMemoryProperties, memoryTypes)); // IYY
    ArrayOfStructsToString<Decoded_VkMemoryType>(out, indent+1, 0, "VkMemoryType", pstruct_in.memoryTypes->GetMetaStructPointer(), "memoryTypes", pstruct->memoryTypeCount , false, pstruct_in.memoryTypes->GetAddress()); // EPB
    *out += "\n"; // GDS

    // struct member: uint32_t memoryHeapCount
    IndentSpaces(out, indent);
    *out += "memoryHeapCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->memoryHeapCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkMemoryHeap memoryHeaps
    IndentSpaces(out, indent);
    *out += "memoryHeaps:                    ";
    *out += "VkMemoryHeap[";
    UnsignedDecimalToString(out, pstruct->memoryHeapCount); // DFW
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceMemoryProperties, memoryHeaps)); // IYY
    ArrayOfStructsToString<Decoded_VkMemoryHeap>(out, indent+1, 0, "VkMemoryHeap", pstruct_in.memoryHeaps->GetMetaStructPointer(), "memoryHeaps", pstruct->memoryHeapCount , false, pstruct_in.memoryHeaps->GetAddress()); // EPB
}

void StructureToString(std::string* out, const Decoded_VkDeviceQueueCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceQueueCreateInfo *pstruct = (const VkDeviceQueueCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceQueueCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDeviceQueueCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkDeviceQueueCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t queueFamilyIndex
    IndentSpaces(out, indent);
    *out += "queueFamilyIndex:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueFamilyIndex); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t queueCount
    IndentSpaces(out, indent);
    *out += "queueCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueCount); // UYW
    *out += "\n"; // GDS

    // struct member: const float* pQueuePriorities
    IndentSpaces(out, indent);
    *out += "pQueuePriorities:               ";
    *out += "const float* = "; // TEQ
    if (pstruct->pQueuePriorities == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pQueuePriorities.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pQueuePriorities = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<float>>(out, indent, 1, "const float*", &pstruct_in.pQueuePriorities, "pQueuePriorities", pstruct->queueCount,  vinfo_pQueuePriorities);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkDeviceCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceCreateInfo *pstruct = (const VkDeviceCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDeviceCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t queueCreateInfoCount
    IndentSpaces(out, indent);
    *out += "queueCreateInfoCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueCreateInfoCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDeviceQueueCreateInfo* pQueueCreateInfos
    IndentSpaces(out, indent);
    *out += "pQueueCreateInfos:              ";
    *out += "const VkDeviceQueueCreateInfo* = "; // TEQ
    if (pstruct->pQueueCreateInfos == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pQueueCreateInfos->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDeviceQueueCreateInfo>(out, indent+1, 1, "VkDeviceQueueCreateInfo", pstruct_in.pQueueCreateInfos->GetMetaStructPointer(), "pQueueCreateInfos", pstruct->queueCreateInfoCount, false, pstruct_in.pQueueCreateInfos->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t enabledLayerCount
    IndentSpaces(out, indent);
    *out += "enabledLayerCount:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->enabledLayerCount); // UYW
    *out += "\n"; // GDS

    // struct member: const char* const* ppEnabledLayerNames
    IndentSpaces(out, indent);
    *out += "ppEnabledLayerNames:            ";
    *out += "const char* const* = "; // TEQ
    if (pstruct->ppEnabledLayerNames == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.ppEnabledLayerNames.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_ppEnabledLayerNames = {false, false, false, nullptr};
        ArrayToString<StringArrayDecoder>(out, indent, 2, "const char* const*", &pstruct_in.ppEnabledLayerNames, "ppEnabledLayerNames", pstruct->enabledLayerCount,  vinfo_ppEnabledLayerNames);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t enabledExtensionCount
    IndentSpaces(out, indent);
    *out += "enabledExtensionCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->enabledExtensionCount); // UYW
    *out += "\n"; // GDS

    // struct member: const char* const* ppEnabledExtensionNames
    IndentSpaces(out, indent);
    *out += "ppEnabledExtensionNames:        ";
    *out += "const char* const* = "; // TEQ
    if (pstruct->ppEnabledExtensionNames == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.ppEnabledExtensionNames.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_ppEnabledExtensionNames = {false, false, false, nullptr};
        ArrayToString<StringArrayDecoder>(out, indent, 2, "const char* const*", &pstruct_in.ppEnabledExtensionNames, "ppEnabledExtensionNames", pstruct->enabledExtensionCount,  vinfo_ppEnabledExtensionNames);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const VkPhysicalDeviceFeatures* pEnabledFeatures
    IndentSpaces(out, indent);
    *out += "pEnabledFeatures:               ";
    *out += "const VkPhysicalDeviceFeatures* = "; // TEQ
    if (pstruct->pEnabledFeatures == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pEnabledFeatures->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pEnabledFeatures->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkDeviceCreateInfo, pEnabledFeatures)); // GLN
    }
}

void StructureToString(std::string* out, const Decoded_VkExtensionProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExtensionProperties *pstruct = (const VkExtensionProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: char extensionName
    IndentSpaces(out, indent);
    *out += "extensionName:                  ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_extensionName = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.extensionName.GetPointer(), "extensionName", VK_MAX_EXTENSION_NAME_SIZE, vinfo_extensionName); // JPB
    *out += "\n"; // GDS

    // struct member: uint32_t specVersion
    IndentSpaces(out, indent);
    *out += "specVersion:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->specVersion); // UYW
}

void StructureToString(std::string* out, const Decoded_VkLayerProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkLayerProperties *pstruct = (const VkLayerProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: char layerName
    IndentSpaces(out, indent);
    *out += "layerName:                      ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_layerName = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.layerName.GetPointer(), "layerName", VK_MAX_EXTENSION_NAME_SIZE, vinfo_layerName); // JPB
    *out += "\n"; // GDS

    // struct member: uint32_t specVersion
    IndentSpaces(out, indent);
    *out += "specVersion:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->specVersion); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t implementationVersion
    IndentSpaces(out, indent);
    *out += "implementationVersion:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->implementationVersion); // UYW
    *out += "\n"; // GDS

    // struct member: char description
    IndentSpaces(out, indent);
    *out += "description:                    ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_description = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.description.GetPointer(), "description", VK_MAX_DESCRIPTION_SIZE, vinfo_description); // JPB
}

void StructureToString(std::string* out, const Decoded_VkSubmitInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubmitInfo *pstruct = (const VkSubmitInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t waitSemaphoreCount
    IndentSpaces(out, indent);
    *out += "waitSemaphoreCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->waitSemaphoreCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSemaphore* pWaitSemaphores
    IndentSpaces(out, indent);
    *out += "pWaitSemaphores:                ";
    *out += "const VkSemaphore* = "; // TEQ
    if (pstruct->pWaitSemaphores == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pWaitSemaphores.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pWaitSemaphores = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkSemaphore>>(out, indent, 1, "const VkSemaphore*", &pstruct_in.pWaitSemaphores, "pWaitSemaphores", pstruct->waitSemaphoreCount,  vinfo_pWaitSemaphores);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineStageFlags* pWaitDstStageMask
    IndentSpaces(out, indent);
    *out += "pWaitDstStageMask:              ";
    *out += "const VkPipelineStageFlags* = "; // TEQ
    if (pstruct->pWaitDstStageMask == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pWaitDstStageMask.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pWaitDstStageMask = {false, false, true, EnumToStringVkPipelineStageFlagBits};
        ArrayToString<PointerDecoder<VkPipelineStageFlags>>(out, indent, 1, "const VkPipelineStageFlags*", &pstruct_in.pWaitDstStageMask, "pWaitDstStageMask", pstruct->waitSemaphoreCount,  vinfo_pWaitDstStageMask);  // CCR
    }
    *out += "\n"; // GDS

    // struct member: uint32_t commandBufferCount
    IndentSpaces(out, indent);
    *out += "commandBufferCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->commandBufferCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkCommandBuffer* pCommandBuffers
    IndentSpaces(out, indent);
    *out += "pCommandBuffers:                ";
    *out += "const VkCommandBuffer* = "; // TEQ
    if (pstruct->pCommandBuffers == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pCommandBuffers.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pCommandBuffers = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkCommandBuffer>>(out, indent, 1, "const VkCommandBuffer*", &pstruct_in.pCommandBuffers, "pCommandBuffers", pstruct->commandBufferCount,  vinfo_pCommandBuffers);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t signalSemaphoreCount
    IndentSpaces(out, indent);
    *out += "signalSemaphoreCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->signalSemaphoreCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSemaphore* pSignalSemaphores
    IndentSpaces(out, indent);
    *out += "pSignalSemaphores:              ";
    *out += "const VkSemaphore* = "; // TEQ
    if (pstruct->pSignalSemaphores == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSignalSemaphores.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSignalSemaphores = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkSemaphore>>(out, indent, 1, "const VkSemaphore*", &pstruct_in.pSignalSemaphores, "pSignalSemaphores", pstruct->signalSemaphoreCount,  vinfo_pSignalSemaphores);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkMemoryAllocateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryAllocateInfo *pstruct = (const VkMemoryAllocateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceSize allocationSize
    IndentSpaces(out, indent);
    *out += "allocationSize:                 ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->allocationSize); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t memoryTypeIndex
    IndentSpaces(out, indent);
    *out += "memoryTypeIndex:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->memoryTypeIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkMappedMemoryRange &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMappedMemoryRange *pstruct = (const VkMappedMemoryRange *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceMemory memory
    IndentSpaces(out, indent);
    *out += "memory:                         ";
    *out += "VkDeviceMemory = "; // TEQ
    AddrToString(out, pstruct_in.memory); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->offset); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->size); //EQA
}

void StructureToString(std::string* out, const Decoded_VkMemoryRequirements &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryRequirements *pstruct = (const VkMemoryRequirements *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDeviceSize size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->size); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize alignment
    IndentSpaces(out, indent);
    *out += "alignment:                      ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->alignment); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t memoryTypeBits
    IndentSpaces(out, indent);
    *out += "memoryTypeBits:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->memoryTypeBits); // UYW
}

void StructureToString(std::string* out, const Decoded_VkSparseImageFormatProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSparseImageFormatProperties *pstruct = (const VkSparseImageFormatProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageAspectFlags aspectMask
    IndentSpaces(out, indent);
    *out += "aspectMask:                     ";
    *out += "VkImageAspectFlags = "; // TEQ
    FlagsToString(out, pstruct->aspectMask, EnumToStringVkImageAspectFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExtent3D imageGranularity
    IndentSpaces(out, indent);
    *out += "imageGranularity:               ";
    *out += "VkExtent3D = "; // TEQ
    StructureToString(out, *pstruct_in.imageGranularity, indent+1,  base_addr + offsetof(VkSparseImageFormatProperties, imageGranularity)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkSparseImageFormatFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSparseImageFormatFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSparseImageFormatFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkSparseImageMemoryRequirements &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSparseImageMemoryRequirements *pstruct = (const VkSparseImageMemoryRequirements *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkSparseImageFormatProperties formatProperties
    IndentSpaces(out, indent);
    *out += "formatProperties:               ";
    *out += "VkSparseImageFormatProperties = "; // TEQ
    StructureToString(out, *pstruct_in.formatProperties, indent+1,  base_addr + offsetof(VkSparseImageMemoryRequirements, formatProperties)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t imageMipTailFirstLod
    IndentSpaces(out, indent);
    *out += "imageMipTailFirstLod:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->imageMipTailFirstLod); // UYW
    *out += "\n"; // GDS

    // struct member: VkDeviceSize imageMipTailSize
    IndentSpaces(out, indent);
    *out += "imageMipTailSize:               ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->imageMipTailSize); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize imageMipTailOffset
    IndentSpaces(out, indent);
    *out += "imageMipTailOffset:             ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->imageMipTailOffset); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize imageMipTailStride
    IndentSpaces(out, indent);
    *out += "imageMipTailStride:             ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->imageMipTailStride); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSparseMemoryBind &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSparseMemoryBind *pstruct = (const VkSparseMemoryBind *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDeviceSize resourceOffset
    IndentSpaces(out, indent);
    *out += "resourceOffset:                 ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->resourceOffset); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->size); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceMemory memory
    IndentSpaces(out, indent);
    *out += "memory:                         ";
    *out += "VkDeviceMemory = "; // TEQ
    AddrToString(out, pstruct_in.memory); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize memoryOffset
    IndentSpaces(out, indent);
    *out += "memoryOffset:                   ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->memoryOffset); //EQA
    *out += "\n"; // GDS

    // struct member: VkSparseMemoryBindFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSparseMemoryBindFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSparseMemoryBindFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkSparseBufferMemoryBindInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSparseBufferMemoryBindInfo *pstruct = (const VkSparseBufferMemoryBindInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t bindCount
    IndentSpaces(out, indent);
    *out += "bindCount:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->bindCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSparseMemoryBind* pBinds
    IndentSpaces(out, indent);
    *out += "pBinds:                         ";
    *out += "const VkSparseMemoryBind* = "; // TEQ
    if (pstruct->pBinds == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pBinds->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSparseMemoryBind>(out, indent+1, 1, "VkSparseMemoryBind", pstruct_in.pBinds->GetMetaStructPointer(), "pBinds", pstruct->bindCount, false, pstruct_in.pBinds->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkSparseImageOpaqueMemoryBindInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSparseImageOpaqueMemoryBindInfo *pstruct = (const VkSparseImageOpaqueMemoryBindInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImage image
    IndentSpaces(out, indent);
    *out += "image:                          ";
    *out += "VkImage = "; // TEQ
    AddrToString(out, pstruct_in.image); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t bindCount
    IndentSpaces(out, indent);
    *out += "bindCount:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->bindCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSparseMemoryBind* pBinds
    IndentSpaces(out, indent);
    *out += "pBinds:                         ";
    *out += "const VkSparseMemoryBind* = "; // TEQ
    if (pstruct->pBinds == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pBinds->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSparseMemoryBind>(out, indent+1, 1, "VkSparseMemoryBind", pstruct_in.pBinds->GetMetaStructPointer(), "pBinds", pstruct->bindCount, false, pstruct_in.pBinds->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkImageSubresource &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageSubresource *pstruct = (const VkImageSubresource *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageAspectFlags aspectMask
    IndentSpaces(out, indent);
    *out += "aspectMask:                     ";
    *out += "VkImageAspectFlags = "; // TEQ
    FlagsToString(out, pstruct->aspectMask, EnumToStringVkImageAspectFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t mipLevel
    IndentSpaces(out, indent);
    *out += "mipLevel:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->mipLevel); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t arrayLayer
    IndentSpaces(out, indent);
    *out += "arrayLayer:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->arrayLayer); // UYW
}

void StructureToString(std::string* out, const Decoded_VkOffset3D &pstruct_in, int indent, uint64_t base_addr)
{
    const VkOffset3D *pstruct = (const VkOffset3D *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: int32_t x
    IndentSpaces(out, indent);
    *out += "x:                              ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->x); //EQA
    *out += "\n"; // GDS

    // struct member: int32_t y
    IndentSpaces(out, indent);
    *out += "y:                              ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->y); //EQA
    *out += "\n"; // GDS

    // struct member: int32_t z
    IndentSpaces(out, indent);
    *out += "z:                              ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->z); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSparseImageMemoryBind &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSparseImageMemoryBind *pstruct = (const VkSparseImageMemoryBind *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageSubresource subresource
    IndentSpaces(out, indent);
    *out += "subresource:                    ";
    *out += "VkImageSubresource = "; // TEQ
    StructureToString(out, *pstruct_in.subresource, indent+1,  base_addr + offsetof(VkSparseImageMemoryBind, subresource)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset3D offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkOffset3D = "; // TEQ
    StructureToString(out, *pstruct_in.offset, indent+1,  base_addr + offsetof(VkSparseImageMemoryBind, offset)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent3D extent
    IndentSpaces(out, indent);
    *out += "extent:                         ";
    *out += "VkExtent3D = "; // TEQ
    StructureToString(out, *pstruct_in.extent, indent+1,  base_addr + offsetof(VkSparseImageMemoryBind, extent)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkDeviceMemory memory
    IndentSpaces(out, indent);
    *out += "memory:                         ";
    *out += "VkDeviceMemory = "; // TEQ
    AddrToString(out, pstruct_in.memory); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize memoryOffset
    IndentSpaces(out, indent);
    *out += "memoryOffset:                   ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->memoryOffset); //EQA
    *out += "\n"; // GDS

    // struct member: VkSparseMemoryBindFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSparseMemoryBindFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSparseMemoryBindFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkSparseImageMemoryBindInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSparseImageMemoryBindInfo *pstruct = (const VkSparseImageMemoryBindInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImage image
    IndentSpaces(out, indent);
    *out += "image:                          ";
    *out += "VkImage = "; // TEQ
    AddrToString(out, pstruct_in.image); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t bindCount
    IndentSpaces(out, indent);
    *out += "bindCount:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->bindCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSparseImageMemoryBind* pBinds
    IndentSpaces(out, indent);
    *out += "pBinds:                         ";
    *out += "const VkSparseImageMemoryBind* = "; // TEQ
    if (pstruct->pBinds == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pBinds->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSparseImageMemoryBind>(out, indent+1, 1, "VkSparseImageMemoryBind", pstruct_in.pBinds->GetMetaStructPointer(), "pBinds", pstruct->bindCount, false, pstruct_in.pBinds->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkBindSparseInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBindSparseInfo *pstruct = (const VkBindSparseInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t waitSemaphoreCount
    IndentSpaces(out, indent);
    *out += "waitSemaphoreCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->waitSemaphoreCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSemaphore* pWaitSemaphores
    IndentSpaces(out, indent);
    *out += "pWaitSemaphores:                ";
    *out += "const VkSemaphore* = "; // TEQ
    if (pstruct->pWaitSemaphores == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pWaitSemaphores.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pWaitSemaphores = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkSemaphore>>(out, indent, 1, "const VkSemaphore*", &pstruct_in.pWaitSemaphores, "pWaitSemaphores", pstruct->waitSemaphoreCount,  vinfo_pWaitSemaphores);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t bufferBindCount
    IndentSpaces(out, indent);
    *out += "bufferBindCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->bufferBindCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSparseBufferMemoryBindInfo* pBufferBinds
    IndentSpaces(out, indent);
    *out += "pBufferBinds:                   ";
    *out += "const VkSparseBufferMemoryBindInfo* = "; // TEQ
    if (pstruct->pBufferBinds == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pBufferBinds->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSparseBufferMemoryBindInfo>(out, indent+1, 1, "VkSparseBufferMemoryBindInfo", pstruct_in.pBufferBinds->GetMetaStructPointer(), "pBufferBinds", pstruct->bufferBindCount, false, pstruct_in.pBufferBinds->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t imageOpaqueBindCount
    IndentSpaces(out, indent);
    *out += "imageOpaqueBindCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->imageOpaqueBindCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds
    IndentSpaces(out, indent);
    *out += "pImageOpaqueBinds:              ";
    *out += "const VkSparseImageOpaqueMemoryBindInfo* = "; // TEQ
    if (pstruct->pImageOpaqueBinds == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pImageOpaqueBinds->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSparseImageOpaqueMemoryBindInfo>(out, indent+1, 1, "VkSparseImageOpaqueMemoryBindInfo", pstruct_in.pImageOpaqueBinds->GetMetaStructPointer(), "pImageOpaqueBinds", pstruct->imageOpaqueBindCount, false, pstruct_in.pImageOpaqueBinds->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t imageBindCount
    IndentSpaces(out, indent);
    *out += "imageBindCount:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->imageBindCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSparseImageMemoryBindInfo* pImageBinds
    IndentSpaces(out, indent);
    *out += "pImageBinds:                    ";
    *out += "const VkSparseImageMemoryBindInfo* = "; // TEQ
    if (pstruct->pImageBinds == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pImageBinds->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSparseImageMemoryBindInfo>(out, indent+1, 1, "VkSparseImageMemoryBindInfo", pstruct_in.pImageBinds->GetMetaStructPointer(), "pImageBinds", pstruct->imageBindCount, false, pstruct_in.pImageBinds->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t signalSemaphoreCount
    IndentSpaces(out, indent);
    *out += "signalSemaphoreCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->signalSemaphoreCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSemaphore* pSignalSemaphores
    IndentSpaces(out, indent);
    *out += "pSignalSemaphores:              ";
    *out += "const VkSemaphore* = "; // TEQ
    if (pstruct->pSignalSemaphores == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSignalSemaphores.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSignalSemaphores = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkSemaphore>>(out, indent, 1, "const VkSemaphore*", &pstruct_in.pSignalSemaphores, "pSignalSemaphores", pstruct->signalSemaphoreCount,  vinfo_pSignalSemaphores);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkFenceCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFenceCreateInfo *pstruct = (const VkFenceCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFenceCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkFenceCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkFenceCreateFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkSemaphoreCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSemaphoreCreateInfo *pstruct = (const VkSemaphoreCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSemaphoreCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSemaphoreCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
}

void StructureToString(std::string* out, const Decoded_VkEventCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkEventCreateInfo *pstruct = (const VkEventCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkEventCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkEventCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
}

void StructureToString(std::string* out, const Decoded_VkQueryPoolCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkQueryPoolCreateInfo *pstruct = (const VkQueryPoolCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkQueryPoolCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkQueryPoolCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkQueryType queryType
    IndentSpaces(out, indent);
    *out += "queryType:                      ";
    *out += "VkQueryType = "; // TEQ
    EnumToStringVkQueryType(out, pstruct->queryType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->queryType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t queryCount
    IndentSpaces(out, indent);
    *out += "queryCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queryCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkQueryPipelineStatisticFlags pipelineStatistics
    IndentSpaces(out, indent);
    *out += "pipelineStatistics:             ";
    *out += "VkQueryPipelineStatisticFlags = "; // TEQ
    FlagsToString(out, pstruct->pipelineStatistics, EnumToStringVkQueryPipelineStatisticFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkBufferCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBufferCreateInfo *pstruct = (const VkBufferCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBufferCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkBufferCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkBufferCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkDeviceSize size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->size); //EQA
    *out += "\n"; // GDS

    // struct member: VkBufferUsageFlags usage
    IndentSpaces(out, indent);
    *out += "usage:                          ";
    *out += "VkBufferUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->usage, EnumToStringVkBufferUsageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSharingMode sharingMode
    IndentSpaces(out, indent);
    *out += "sharingMode:                    ";
    *out += "VkSharingMode = "; // TEQ
    EnumToStringVkSharingMode(out, pstruct->sharingMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sharingMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t queueFamilyIndexCount
    IndentSpaces(out, indent);
    *out += "queueFamilyIndexCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueFamilyIndexCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pQueueFamilyIndices
    IndentSpaces(out, indent);
    *out += "pQueueFamilyIndices:            ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pQueueFamilyIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pQueueFamilyIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pQueueFamilyIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pQueueFamilyIndices, "pQueueFamilyIndices", pstruct->queueFamilyIndexCount,  vinfo_pQueueFamilyIndices);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkBufferViewCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBufferViewCreateInfo *pstruct = (const VkBufferViewCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBufferViewCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkBufferViewCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkDeviceSize offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->offset); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize range
    IndentSpaces(out, indent);
    *out += "range:                          ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->range); //EQA
}

void StructureToString(std::string* out, const Decoded_VkImageCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageCreateInfo *pstruct = (const VkImageCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkImageCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkImageCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkImageType imageType
    IndentSpaces(out, indent);
    *out += "imageType:                      ";
    *out += "VkImageType = "; // TEQ
    EnumToStringVkImageType(out, pstruct->imageType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->imageType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkExtent3D extent
    IndentSpaces(out, indent);
    *out += "extent:                         ";
    *out += "VkExtent3D = "; // TEQ
    StructureToString(out, *pstruct_in.extent, indent+1,  base_addr + offsetof(VkImageCreateInfo, extent)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t mipLevels
    IndentSpaces(out, indent);
    *out += "mipLevels:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->mipLevels); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t arrayLayers
    IndentSpaces(out, indent);
    *out += "arrayLayers:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->arrayLayers); // UYW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlagBits samples
    IndentSpaces(out, indent);
    *out += "samples:                        ";
    *out += "VkSampleCountFlagBits = "; // TEQ
    EnumToStringVkSampleCountFlagBits(out, pstruct->samples); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->samples);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageTiling tiling
    IndentSpaces(out, indent);
    *out += "tiling:                         ";
    *out += "VkImageTiling = "; // TEQ
    EnumToStringVkImageTiling(out, pstruct->tiling); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->tiling);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags usage
    IndentSpaces(out, indent);
    *out += "usage:                          ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->usage, EnumToStringVkImageUsageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSharingMode sharingMode
    IndentSpaces(out, indent);
    *out += "sharingMode:                    ";
    *out += "VkSharingMode = "; // TEQ
    EnumToStringVkSharingMode(out, pstruct->sharingMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sharingMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t queueFamilyIndexCount
    IndentSpaces(out, indent);
    *out += "queueFamilyIndexCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueFamilyIndexCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pQueueFamilyIndices
    IndentSpaces(out, indent);
    *out += "pQueueFamilyIndices:            ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pQueueFamilyIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pQueueFamilyIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pQueueFamilyIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pQueueFamilyIndices, "pQueueFamilyIndices", pstruct->queueFamilyIndexCount,  vinfo_pQueueFamilyIndices);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: VkImageLayout initialLayout
    IndentSpaces(out, indent);
    *out += "initialLayout:                  ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->initialLayout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->initialLayout);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkSubresourceLayout &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubresourceLayout *pstruct = (const VkSubresourceLayout *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDeviceSize offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->offset); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->size); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize rowPitch
    IndentSpaces(out, indent);
    *out += "rowPitch:                       ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->rowPitch); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize arrayPitch
    IndentSpaces(out, indent);
    *out += "arrayPitch:                     ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->arrayPitch); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize depthPitch
    IndentSpaces(out, indent);
    *out += "depthPitch:                     ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->depthPitch); //EQA
}

void StructureToString(std::string* out, const Decoded_VkComponentMapping &pstruct_in, int indent, uint64_t base_addr)
{
    const VkComponentMapping *pstruct = (const VkComponentMapping *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkComponentSwizzle r
    IndentSpaces(out, indent);
    *out += "r:                              ";
    *out += "VkComponentSwizzle = "; // TEQ
    EnumToStringVkComponentSwizzle(out, pstruct->r); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->r);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkComponentSwizzle g
    IndentSpaces(out, indent);
    *out += "g:                              ";
    *out += "VkComponentSwizzle = "; // TEQ
    EnumToStringVkComponentSwizzle(out, pstruct->g); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->g);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkComponentSwizzle b
    IndentSpaces(out, indent);
    *out += "b:                              ";
    *out += "VkComponentSwizzle = "; // TEQ
    EnumToStringVkComponentSwizzle(out, pstruct->b); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->b);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkComponentSwizzle a
    IndentSpaces(out, indent);
    *out += "a:                              ";
    *out += "VkComponentSwizzle = "; // TEQ
    EnumToStringVkComponentSwizzle(out, pstruct->a); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->a);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkImageSubresourceRange &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageSubresourceRange *pstruct = (const VkImageSubresourceRange *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageAspectFlags aspectMask
    IndentSpaces(out, indent);
    *out += "aspectMask:                     ";
    *out += "VkImageAspectFlags = "; // TEQ
    FlagsToString(out, pstruct->aspectMask, EnumToStringVkImageAspectFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t baseMipLevel
    IndentSpaces(out, indent);
    *out += "baseMipLevel:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->baseMipLevel); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t levelCount
    IndentSpaces(out, indent);
    *out += "levelCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->levelCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t baseArrayLayer
    IndentSpaces(out, indent);
    *out += "baseArrayLayer:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->baseArrayLayer); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t layerCount
    IndentSpaces(out, indent);
    *out += "layerCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->layerCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkImageViewCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageViewCreateInfo *pstruct = (const VkImageViewCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageViewCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkImageViewCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkImageViewCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkImage image
    IndentSpaces(out, indent);
    *out += "image:                          ";
    *out += "VkImage = "; // TEQ
    AddrToString(out, pstruct_in.image); // PAQ
    *out += "\n"; // GDS

    // struct member: VkImageViewType viewType
    IndentSpaces(out, indent);
    *out += "viewType:                       ";
    *out += "VkImageViewType = "; // TEQ
    EnumToStringVkImageViewType(out, pstruct->viewType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->viewType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkComponentMapping components
    IndentSpaces(out, indent);
    *out += "components:                     ";
    *out += "VkComponentMapping = "; // TEQ
    StructureToString(out, *pstruct_in.components, indent+1,  base_addr + offsetof(VkImageViewCreateInfo, components)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkImageSubresourceRange subresourceRange
    IndentSpaces(out, indent);
    *out += "subresourceRange:               ";
    *out += "VkImageSubresourceRange = "; // TEQ
    StructureToString(out, *pstruct_in.subresourceRange, indent+1,  base_addr + offsetof(VkImageViewCreateInfo, subresourceRange)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkShaderModuleCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkShaderModuleCreateInfo *pstruct = (const VkShaderModuleCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkShaderModuleCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkShaderModuleCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkShaderModuleCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: size_t codeSize
    IndentSpaces(out, indent);
    *out += "codeSize:                       ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->codeSize); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pCode
    IndentSpaces(out, indent);
    *out += "pCode:                          ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pCode == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pCode.GetAddress()); // WUX
        if (kPrintShaderCode)
        {
            ScalarValueToStringStruct vinfo_pCode = {false, false, false, nullptr};
            ArrayOfScalarsToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pCode, "pCode", pstruct->codeSize / 4, vinfo_pCode);  // CCY
        }
    }
}

void StructureToString(std::string* out, const Decoded_VkPipelineCacheCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineCacheCreateInfo *pstruct = (const VkPipelineCacheCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineCacheCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineCacheCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: size_t initialDataSize
    IndentSpaces(out, indent);
    *out += "initialDataSize:                ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->initialDataSize); // UYW
    *out += "\n"; // GDS

    // struct member: const void* pInitialData
    IndentSpaces(out, indent);
    *out += "pInitialData:                   ";
    *out += "const void* = "; // TEQ
    if (pstruct->pInitialData == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pInitialData.GetAddress()); // AHW
    }
}

void StructureToString(std::string* out, const Decoded_VkSpecializationMapEntry &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSpecializationMapEntry *pstruct = (const VkSpecializationMapEntry *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t constantID
    IndentSpaces(out, indent);
    *out += "constantID:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->constantID); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->offset); // UYW
    *out += "\n"; // GDS

    // struct member: size_t size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->size); // UYW
}

void StructureToString(std::string* out, const Decoded_VkSpecializationInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSpecializationInfo *pstruct = (const VkSpecializationInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t mapEntryCount
    IndentSpaces(out, indent);
    *out += "mapEntryCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->mapEntryCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSpecializationMapEntry* pMapEntries
    IndentSpaces(out, indent);
    *out += "pMapEntries:                    ";
    *out += "const VkSpecializationMapEntry* = "; // TEQ
    if (pstruct->pMapEntries == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pMapEntries->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSpecializationMapEntry>(out, indent+1, 1, "VkSpecializationMapEntry", pstruct_in.pMapEntries->GetMetaStructPointer(), "pMapEntries", pstruct->mapEntryCount, false, pstruct_in.pMapEntries->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: size_t dataSize
    IndentSpaces(out, indent);
    *out += "dataSize:                       ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dataSize); // UYW
    *out += "\n"; // GDS

    // struct member: const void* pData
    IndentSpaces(out, indent);
    *out += "pData:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pData == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pData.GetAddress()); // AHW
    }
}

void StructureToString(std::string* out, const Decoded_VkPipelineShaderStageCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineShaderStageCreateInfo *pstruct = (const VkPipelineShaderStageCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineShaderStageCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineShaderStageCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkPipelineShaderStageCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkShaderStageFlagBits stage
    IndentSpaces(out, indent);
    *out += "stage:                          ";
    *out += "VkShaderStageFlagBits = "; // TEQ
    EnumToStringVkShaderStageFlagBits(out, pstruct->stage); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->stage);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkShaderModule module
    IndentSpaces(out, indent);
    *out += "module:                         ";
    *out += "VkShaderModule = "; // TEQ
    AddrToString(out, pstruct_in.module); // PAQ
    *out += "\n"; // GDS

    // struct member: const char* pName
    IndentSpaces(out, indent);
    *out += "pName:                          ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->pName); // TGI
    *out += "\n"; // GDS

    // struct member: const VkSpecializationInfo* pSpecializationInfo
    IndentSpaces(out, indent);
    *out += "pSpecializationInfo:            ";
    *out += "const VkSpecializationInfo* = "; // TEQ
    if (pstruct->pSpecializationInfo == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSpecializationInfo->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pSpecializationInfo->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkPipelineShaderStageCreateInfo, pSpecializationInfo)); // GLN
    }
}

void StructureToString(std::string* out, const Decoded_VkVertexInputBindingDescription &pstruct_in, int indent, uint64_t base_addr)
{
    const VkVertexInputBindingDescription *pstruct = (const VkVertexInputBindingDescription *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t binding
    IndentSpaces(out, indent);
    *out += "binding:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->binding); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t stride
    IndentSpaces(out, indent);
    *out += "stride:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->stride); // UYW
    *out += "\n"; // GDS

    // struct member: VkVertexInputRate inputRate
    IndentSpaces(out, indent);
    *out += "inputRate:                      ";
    *out += "VkVertexInputRate = "; // TEQ
    EnumToStringVkVertexInputRate(out, pstruct->inputRate); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->inputRate);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkVertexInputAttributeDescription &pstruct_in, int indent, uint64_t base_addr)
{
    const VkVertexInputAttributeDescription *pstruct = (const VkVertexInputAttributeDescription *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t location
    IndentSpaces(out, indent);
    *out += "location:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->location); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t binding
    IndentSpaces(out, indent);
    *out += "binding:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->binding); // UYW
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->offset); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineVertexInputStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineVertexInputStateCreateInfo *pstruct = (const VkPipelineVertexInputStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineVertexInputStateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineVertexInputStateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t vertexBindingDescriptionCount
    IndentSpaces(out, indent);
    *out += "vertexBindingDescriptionCount:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->vertexBindingDescriptionCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkVertexInputBindingDescription* pVertexBindingDescriptions
    IndentSpaces(out, indent);
    *out += "pVertexBindingDescriptions:     ";
    *out += "const VkVertexInputBindingDescription* = "; // TEQ
    if (pstruct->pVertexBindingDescriptions == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pVertexBindingDescriptions->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkVertexInputBindingDescription>(out, indent+1, 1, "VkVertexInputBindingDescription", pstruct_in.pVertexBindingDescriptions->GetMetaStructPointer(), "pVertexBindingDescriptions", pstruct->vertexBindingDescriptionCount, false, pstruct_in.pVertexBindingDescriptions->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t vertexAttributeDescriptionCount
    IndentSpaces(out, indent);
    *out += "vertexAttributeDescriptionCount: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->vertexAttributeDescriptionCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkVertexInputAttributeDescription* pVertexAttributeDescriptions
    IndentSpaces(out, indent);
    *out += "pVertexAttributeDescriptions:   ";
    *out += "const VkVertexInputAttributeDescription* = "; // TEQ
    if (pstruct->pVertexAttributeDescriptions == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pVertexAttributeDescriptions->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkVertexInputAttributeDescription>(out, indent+1, 1, "VkVertexInputAttributeDescription", pstruct_in.pVertexAttributeDescriptions->GetMetaStructPointer(), "pVertexAttributeDescriptions", pstruct->vertexAttributeDescriptionCount, false, pstruct_in.pVertexAttributeDescriptions->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPipelineInputAssemblyStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineInputAssemblyStateCreateInfo *pstruct = (const VkPipelineInputAssemblyStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineInputAssemblyStateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineInputAssemblyStateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkPrimitiveTopology topology
    IndentSpaces(out, indent);
    *out += "topology:                       ";
    *out += "VkPrimitiveTopology = "; // TEQ
    EnumToStringVkPrimitiveTopology(out, pstruct->topology); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->topology);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 primitiveRestartEnable
    IndentSpaces(out, indent);
    *out += "primitiveRestartEnable:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->primitiveRestartEnable); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineTessellationStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineTessellationStateCreateInfo *pstruct = (const VkPipelineTessellationStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineTessellationStateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineTessellationStateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t patchControlPoints
    IndentSpaces(out, indent);
    *out += "patchControlPoints:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->patchControlPoints); // UYW
}

void StructureToString(std::string* out, const Decoded_VkViewport &pstruct_in, int indent, uint64_t base_addr)
{
    const VkViewport *pstruct = (const VkViewport *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: float x
    IndentSpaces(out, indent);
    *out += "x:                              ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->x); // PEZ
    *out += "\n"; // GDS

    // struct member: float y
    IndentSpaces(out, indent);
    *out += "y:                              ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->y); // PEZ
    *out += "\n"; // GDS

    // struct member: float width
    IndentSpaces(out, indent);
    *out += "width:                          ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->width); // PEZ
    *out += "\n"; // GDS

    // struct member: float height
    IndentSpaces(out, indent);
    *out += "height:                         ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->height); // PEZ
    *out += "\n"; // GDS

    // struct member: float minDepth
    IndentSpaces(out, indent);
    *out += "minDepth:                       ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->minDepth); // PEZ
    *out += "\n"; // GDS

    // struct member: float maxDepth
    IndentSpaces(out, indent);
    *out += "maxDepth:                       ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxDepth); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkOffset2D &pstruct_in, int indent, uint64_t base_addr)
{
    const VkOffset2D *pstruct = (const VkOffset2D *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: int32_t x
    IndentSpaces(out, indent);
    *out += "x:                              ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->x); //EQA
    *out += "\n"; // GDS

    // struct member: int32_t y
    IndentSpaces(out, indent);
    *out += "y:                              ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->y); //EQA
}

void StructureToString(std::string* out, const Decoded_VkExtent2D &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExtent2D *pstruct = (const VkExtent2D *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t width
    IndentSpaces(out, indent);
    *out += "width:                          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->width); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t height
    IndentSpaces(out, indent);
    *out += "height:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->height); // UYW
}

void StructureToString(std::string* out, const Decoded_VkRect2D &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRect2D *pstruct = (const VkRect2D *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkOffset2D offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkOffset2D = "; // TEQ
    StructureToString(out, *pstruct_in.offset, indent+1,  base_addr + offsetof(VkRect2D, offset)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D extent
    IndentSpaces(out, indent);
    *out += "extent:                         ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.extent, indent+1,  base_addr + offsetof(VkRect2D, extent)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPipelineViewportStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineViewportStateCreateInfo *pstruct = (const VkPipelineViewportStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineViewportStateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineViewportStateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t viewportCount
    IndentSpaces(out, indent);
    *out += "viewportCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->viewportCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkViewport* pViewports
    IndentSpaces(out, indent);
    *out += "pViewports:                     ";
    *out += "const VkViewport* = "; // TEQ
    if (pstruct->pViewports == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pViewports->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkViewport>(out, indent+1, 1, "VkViewport", pstruct_in.pViewports->GetMetaStructPointer(), "pViewports", pstruct->viewportCount, false, pstruct_in.pViewports->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t scissorCount
    IndentSpaces(out, indent);
    *out += "scissorCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->scissorCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkRect2D* pScissors
    IndentSpaces(out, indent);
    *out += "pScissors:                      ";
    *out += "const VkRect2D* = "; // TEQ
    if (pstruct->pScissors == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pScissors->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkRect2D>(out, indent+1, 1, "VkRect2D", pstruct_in.pScissors->GetMetaStructPointer(), "pScissors", pstruct->scissorCount, false, pstruct_in.pScissors->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineRasterizationStateCreateInfo *pstruct = (const VkPipelineRasterizationStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineRasterizationStateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineRasterizationStateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 depthClampEnable
    IndentSpaces(out, indent);
    *out += "depthClampEnable:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthClampEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 rasterizerDiscardEnable
    IndentSpaces(out, indent);
    *out += "rasterizerDiscardEnable:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->rasterizerDiscardEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkPolygonMode polygonMode
    IndentSpaces(out, indent);
    *out += "polygonMode:                    ";
    *out += "VkPolygonMode = "; // TEQ
    EnumToStringVkPolygonMode(out, pstruct->polygonMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->polygonMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkCullModeFlags cullMode
    IndentSpaces(out, indent);
    *out += "cullMode:                       ";
    *out += "VkCullModeFlags = "; // TEQ
    FlagsToString(out, pstruct->cullMode, EnumToStringVkCullModeFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkFrontFace frontFace
    IndentSpaces(out, indent);
    *out += "frontFace:                      ";
    *out += "VkFrontFace = "; // TEQ
    EnumToStringVkFrontFace(out, pstruct->frontFace); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->frontFace);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 depthBiasEnable
    IndentSpaces(out, indent);
    *out += "depthBiasEnable:                ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthBiasEnable); //EQA
    *out += "\n"; // GDS

    // struct member: float depthBiasConstantFactor
    IndentSpaces(out, indent);
    *out += "depthBiasConstantFactor:        ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->depthBiasConstantFactor); // PEZ
    *out += "\n"; // GDS

    // struct member: float depthBiasClamp
    IndentSpaces(out, indent);
    *out += "depthBiasClamp:                 ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->depthBiasClamp); // PEZ
    *out += "\n"; // GDS

    // struct member: float depthBiasSlopeFactor
    IndentSpaces(out, indent);
    *out += "depthBiasSlopeFactor:           ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->depthBiasSlopeFactor); // PEZ
    *out += "\n"; // GDS

    // struct member: float lineWidth
    IndentSpaces(out, indent);
    *out += "lineWidth:                      ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->lineWidth); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkPipelineMultisampleStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineMultisampleStateCreateInfo *pstruct = (const VkPipelineMultisampleStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineMultisampleStateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineMultisampleStateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlagBits rasterizationSamples
    IndentSpaces(out, indent);
    *out += "rasterizationSamples:           ";
    *out += "VkSampleCountFlagBits = "; // TEQ
    EnumToStringVkSampleCountFlagBits(out, pstruct->rasterizationSamples); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->rasterizationSamples);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 sampleShadingEnable
    IndentSpaces(out, indent);
    *out += "sampleShadingEnable:            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sampleShadingEnable); //EQA
    *out += "\n"; // GDS

    // struct member: float minSampleShading
    IndentSpaces(out, indent);
    *out += "minSampleShading:               ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->minSampleShading); // PEZ
    *out += "\n"; // GDS

    // struct member: const VkSampleMask* pSampleMask
    IndentSpaces(out, indent);
    *out += "pSampleMask:                    ";
    *out += "const VkSampleMask* = "; // TEQ
    if (pstruct->pSampleMask == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSampleMask.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSampleMask = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<VkSampleMask>>(out, indent, 1, "const VkSampleMask*", &pstruct_in.pSampleMask, "pSampleMask", pstruct->rasterizationSamples,  vinfo_pSampleMask);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 alphaToCoverageEnable
    IndentSpaces(out, indent);
    *out += "alphaToCoverageEnable:          ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->alphaToCoverageEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 alphaToOneEnable
    IndentSpaces(out, indent);
    *out += "alphaToOneEnable:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->alphaToOneEnable); //EQA
}

void StructureToString(std::string* out, const Decoded_VkStencilOpState &pstruct_in, int indent, uint64_t base_addr)
{
    const VkStencilOpState *pstruct = (const VkStencilOpState *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStencilOp failOp
    IndentSpaces(out, indent);
    *out += "failOp:                         ";
    *out += "VkStencilOp = "; // TEQ
    EnumToStringVkStencilOp(out, pstruct->failOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->failOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkStencilOp passOp
    IndentSpaces(out, indent);
    *out += "passOp:                         ";
    *out += "VkStencilOp = "; // TEQ
    EnumToStringVkStencilOp(out, pstruct->passOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->passOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkStencilOp depthFailOp
    IndentSpaces(out, indent);
    *out += "depthFailOp:                    ";
    *out += "VkStencilOp = "; // TEQ
    EnumToStringVkStencilOp(out, pstruct->depthFailOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->depthFailOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkCompareOp compareOp
    IndentSpaces(out, indent);
    *out += "compareOp:                      ";
    *out += "VkCompareOp = "; // TEQ
    EnumToStringVkCompareOp(out, pstruct->compareOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->compareOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t compareMask
    IndentSpaces(out, indent);
    *out += "compareMask:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->compareMask); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t writeMask
    IndentSpaces(out, indent);
    *out += "writeMask:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->writeMask); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t reference
    IndentSpaces(out, indent);
    *out += "reference:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->reference); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineDepthStencilStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineDepthStencilStateCreateInfo *pstruct = (const VkPipelineDepthStencilStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineDepthStencilStateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineDepthStencilStateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 depthTestEnable
    IndentSpaces(out, indent);
    *out += "depthTestEnable:                ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthTestEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 depthWriteEnable
    IndentSpaces(out, indent);
    *out += "depthWriteEnable:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthWriteEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkCompareOp depthCompareOp
    IndentSpaces(out, indent);
    *out += "depthCompareOp:                 ";
    *out += "VkCompareOp = "; // TEQ
    EnumToStringVkCompareOp(out, pstruct->depthCompareOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->depthCompareOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 depthBoundsTestEnable
    IndentSpaces(out, indent);
    *out += "depthBoundsTestEnable:          ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthBoundsTestEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 stencilTestEnable
    IndentSpaces(out, indent);
    *out += "stencilTestEnable:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->stencilTestEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkStencilOpState front
    IndentSpaces(out, indent);
    *out += "front:                          ";
    *out += "VkStencilOpState = "; // TEQ
    StructureToString(out, *pstruct_in.front, indent+1,  base_addr + offsetof(VkPipelineDepthStencilStateCreateInfo, front)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkStencilOpState back
    IndentSpaces(out, indent);
    *out += "back:                           ";
    *out += "VkStencilOpState = "; // TEQ
    StructureToString(out, *pstruct_in.back, indent+1,  base_addr + offsetof(VkPipelineDepthStencilStateCreateInfo, back)); // AZJ
    *out += "\n"; // GDS

    // struct member: float minDepthBounds
    IndentSpaces(out, indent);
    *out += "minDepthBounds:                 ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->minDepthBounds); // PEZ
    *out += "\n"; // GDS

    // struct member: float maxDepthBounds
    IndentSpaces(out, indent);
    *out += "maxDepthBounds:                 ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxDepthBounds); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkPipelineColorBlendAttachmentState &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineColorBlendAttachmentState *pstruct = (const VkPipelineColorBlendAttachmentState *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkBool32 blendEnable
    IndentSpaces(out, indent);
    *out += "blendEnable:                    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->blendEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkBlendFactor srcColorBlendFactor
    IndentSpaces(out, indent);
    *out += "srcColorBlendFactor:            ";
    *out += "VkBlendFactor = "; // TEQ
    EnumToStringVkBlendFactor(out, pstruct->srcColorBlendFactor); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->srcColorBlendFactor);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBlendFactor dstColorBlendFactor
    IndentSpaces(out, indent);
    *out += "dstColorBlendFactor:            ";
    *out += "VkBlendFactor = "; // TEQ
    EnumToStringVkBlendFactor(out, pstruct->dstColorBlendFactor); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->dstColorBlendFactor);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBlendOp colorBlendOp
    IndentSpaces(out, indent);
    *out += "colorBlendOp:                   ";
    *out += "VkBlendOp = "; // TEQ
    EnumToStringVkBlendOp(out, pstruct->colorBlendOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->colorBlendOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBlendFactor srcAlphaBlendFactor
    IndentSpaces(out, indent);
    *out += "srcAlphaBlendFactor:            ";
    *out += "VkBlendFactor = "; // TEQ
    EnumToStringVkBlendFactor(out, pstruct->srcAlphaBlendFactor); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->srcAlphaBlendFactor);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBlendFactor dstAlphaBlendFactor
    IndentSpaces(out, indent);
    *out += "dstAlphaBlendFactor:            ";
    *out += "VkBlendFactor = "; // TEQ
    EnumToStringVkBlendFactor(out, pstruct->dstAlphaBlendFactor); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->dstAlphaBlendFactor);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBlendOp alphaBlendOp
    IndentSpaces(out, indent);
    *out += "alphaBlendOp:                   ";
    *out += "VkBlendOp = "; // TEQ
    EnumToStringVkBlendOp(out, pstruct->alphaBlendOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->alphaBlendOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkColorComponentFlags colorWriteMask
    IndentSpaces(out, indent);
    *out += "colorWriteMask:                 ";
    *out += "VkColorComponentFlags = "; // TEQ
    FlagsToString(out, pstruct->colorWriteMask, EnumToStringVkColorComponentFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPipelineColorBlendStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineColorBlendStateCreateInfo *pstruct = (const VkPipelineColorBlendStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineColorBlendStateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineColorBlendStateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 logicOpEnable
    IndentSpaces(out, indent);
    *out += "logicOpEnable:                  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->logicOpEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkLogicOp logicOp
    IndentSpaces(out, indent);
    *out += "logicOp:                        ";
    *out += "VkLogicOp = "; // TEQ
    EnumToStringVkLogicOp(out, pstruct->logicOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->logicOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t attachmentCount
    IndentSpaces(out, indent);
    *out += "attachmentCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkPipelineColorBlendAttachmentState* pAttachments
    IndentSpaces(out, indent);
    *out += "pAttachments:                   ";
    *out += "const VkPipelineColorBlendAttachmentState* = "; // TEQ
    if (pstruct->pAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAttachments->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkPipelineColorBlendAttachmentState>(out, indent+1, 1, "VkPipelineColorBlendAttachmentState", pstruct_in.pAttachments->GetMetaStructPointer(), "pAttachments", pstruct->attachmentCount, false, pstruct_in.pAttachments->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: float blendConstants
    IndentSpaces(out, indent);
    *out += "blendConstants:                 ";
    *out += "float[";
    *out += "4"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPipelineColorBlendStateCreateInfo, blendConstants)); // IYY
    ScalarValueToStringStruct vinfo_blendConstants = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<float>>(out, indent, 0, "float", &pstruct_in.blendConstants, "blendConstants", 4, vinfo_blendConstants); // JPE
}

void StructureToString(std::string* out, const Decoded_VkPipelineDynamicStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineDynamicStateCreateInfo *pstruct = (const VkPipelineDynamicStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineDynamicStateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineDynamicStateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t dynamicStateCount
    IndentSpaces(out, indent);
    *out += "dynamicStateCount:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dynamicStateCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDynamicState* pDynamicStates
    IndentSpaces(out, indent);
    *out += "pDynamicStates:                 ";
    *out += "const VkDynamicState* = "; // TEQ
    if (pstruct->pDynamicStates == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDynamicStates.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pDynamicStates = {false, true, false, EnumToStringVkDynamicState};
        ArrayToString<PointerDecoder<VkDynamicState>>(out, indent, 1, "const VkDynamicState*", &pstruct_in.pDynamicStates, "pDynamicStates", pstruct->dynamicStateCount,  vinfo_pDynamicStates);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkGraphicsPipelineCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkGraphicsPipelineCreateInfo *pstruct = (const VkGraphicsPipelineCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkPipelineCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t stageCount
    IndentSpaces(out, indent);
    *out += "stageCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->stageCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkPipelineShaderStageCreateInfo* pStages
    IndentSpaces(out, indent);
    *out += "pStages:                        ";
    *out += "const VkPipelineShaderStageCreateInfo* = "; // TEQ
    if (pstruct->pStages == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pStages->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkPipelineShaderStageCreateInfo>(out, indent+1, 1, "VkPipelineShaderStageCreateInfo", pstruct_in.pStages->GetMetaStructPointer(), "pStages", pstruct->stageCount, false, pstruct_in.pStages->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineVertexInputStateCreateInfo* pVertexInputState
    IndentSpaces(out, indent);
    *out += "pVertexInputState:              ";
    *out += "const VkPipelineVertexInputStateCreateInfo* = "; // TEQ
    if (pstruct->pVertexInputState == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pVertexInputState->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pVertexInputState->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkGraphicsPipelineCreateInfo, pVertexInputState)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState
    IndentSpaces(out, indent);
    *out += "pInputAssemblyState:            ";
    *out += "const VkPipelineInputAssemblyStateCreateInfo* = "; // TEQ
    if (pstruct->pInputAssemblyState == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pInputAssemblyState->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pInputAssemblyState->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkGraphicsPipelineCreateInfo, pInputAssemblyState)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineTessellationStateCreateInfo* pTessellationState
    IndentSpaces(out, indent);
    *out += "pTessellationState:             ";
    *out += "const VkPipelineTessellationStateCreateInfo* = "; // TEQ
    if (pstruct->pTessellationState == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pTessellationState->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pTessellationState->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkGraphicsPipelineCreateInfo, pTessellationState)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineViewportStateCreateInfo* pViewportState
    IndentSpaces(out, indent);
    *out += "pViewportState:                 ";
    *out += "const VkPipelineViewportStateCreateInfo* = "; // TEQ
    if (pstruct->pViewportState == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pViewportState->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pViewportState->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkGraphicsPipelineCreateInfo, pViewportState)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineRasterizationStateCreateInfo* pRasterizationState
    IndentSpaces(out, indent);
    *out += "pRasterizationState:            ";
    *out += "const VkPipelineRasterizationStateCreateInfo* = "; // TEQ
    if (pstruct->pRasterizationState == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pRasterizationState->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pRasterizationState->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkGraphicsPipelineCreateInfo, pRasterizationState)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineMultisampleStateCreateInfo* pMultisampleState
    IndentSpaces(out, indent);
    *out += "pMultisampleState:              ";
    *out += "const VkPipelineMultisampleStateCreateInfo* = "; // TEQ
    if (pstruct->pMultisampleState == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pMultisampleState->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pMultisampleState->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkGraphicsPipelineCreateInfo, pMultisampleState)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineDepthStencilStateCreateInfo* pDepthStencilState
    IndentSpaces(out, indent);
    *out += "pDepthStencilState:             ";
    *out += "const VkPipelineDepthStencilStateCreateInfo* = "; // TEQ
    if (pstruct->pDepthStencilState == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDepthStencilState->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pDepthStencilState->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkGraphicsPipelineCreateInfo, pDepthStencilState)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineColorBlendStateCreateInfo* pColorBlendState
    IndentSpaces(out, indent);
    *out += "pColorBlendState:               ";
    *out += "const VkPipelineColorBlendStateCreateInfo* = "; // TEQ
    if (pstruct->pColorBlendState == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pColorBlendState->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pColorBlendState->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkGraphicsPipelineCreateInfo, pColorBlendState)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: const VkPipelineDynamicStateCreateInfo* pDynamicState
    IndentSpaces(out, indent);
    *out += "pDynamicState:                  ";
    *out += "const VkPipelineDynamicStateCreateInfo* = "; // TEQ
    if (pstruct->pDynamicState == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDynamicState->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pDynamicState->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkGraphicsPipelineCreateInfo, pDynamicState)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineLayout layout
    IndentSpaces(out, indent);
    *out += "layout:                         ";
    *out += "VkPipelineLayout = "; // TEQ
    AddrToString(out, pstruct_in.layout); // PAQ
    *out += "\n"; // GDS

    // struct member: VkRenderPass renderPass
    IndentSpaces(out, indent);
    *out += "renderPass:                     ";
    *out += "VkRenderPass = "; // TEQ
    AddrToString(out, pstruct_in.renderPass); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t subpass
    IndentSpaces(out, indent);
    *out += "subpass:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subpass); // UYW
    *out += "\n"; // GDS

    // struct member: VkPipeline basePipelineHandle
    IndentSpaces(out, indent);
    *out += "basePipelineHandle:             ";
    *out += "VkPipeline = "; // TEQ
    AddrToString(out, pstruct_in.basePipelineHandle); // PAQ
    *out += "\n"; // GDS

    // struct member: int32_t basePipelineIndex
    IndentSpaces(out, indent);
    *out += "basePipelineIndex:              ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->basePipelineIndex); //EQA
}

void StructureToString(std::string* out, const Decoded_VkComputePipelineCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkComputePipelineCreateInfo *pstruct = (const VkComputePipelineCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkPipelineCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkPipelineShaderStageCreateInfo stage
    IndentSpaces(out, indent);
    *out += "stage:                          ";
    *out += "VkPipelineShaderStageCreateInfo = "; // TEQ
    StructureToString(out, *pstruct_in.stage, indent+1,  base_addr + offsetof(VkComputePipelineCreateInfo, stage)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkPipelineLayout layout
    IndentSpaces(out, indent);
    *out += "layout:                         ";
    *out += "VkPipelineLayout = "; // TEQ
    AddrToString(out, pstruct_in.layout); // PAQ
    *out += "\n"; // GDS

    // struct member: VkPipeline basePipelineHandle
    IndentSpaces(out, indent);
    *out += "basePipelineHandle:             ";
    *out += "VkPipeline = "; // TEQ
    AddrToString(out, pstruct_in.basePipelineHandle); // PAQ
    *out += "\n"; // GDS

    // struct member: int32_t basePipelineIndex
    IndentSpaces(out, indent);
    *out += "basePipelineIndex:              ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->basePipelineIndex); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPushConstantRange &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPushConstantRange *pstruct = (const VkPushConstantRange *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkShaderStageFlags stageFlags
    IndentSpaces(out, indent);
    *out += "stageFlags:                     ";
    *out += "VkShaderStageFlags = "; // TEQ
    FlagsToString(out, pstruct->stageFlags, EnumToStringVkShaderStageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->offset); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->size); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineLayoutCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineLayoutCreateInfo *pstruct = (const VkPipelineLayoutCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineLayoutCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineLayoutCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t setLayoutCount
    IndentSpaces(out, indent);
    *out += "setLayoutCount:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->setLayoutCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDescriptorSetLayout* pSetLayouts
    IndentSpaces(out, indent);
    *out += "pSetLayouts:                    ";
    *out += "const VkDescriptorSetLayout* = "; // TEQ
    if (pstruct->pSetLayouts == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSetLayouts.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSetLayouts = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkDescriptorSetLayout>>(out, indent, 1, "const VkDescriptorSetLayout*", &pstruct_in.pSetLayouts, "pSetLayouts", pstruct->setLayoutCount,  vinfo_pSetLayouts);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t pushConstantRangeCount
    IndentSpaces(out, indent);
    *out += "pushConstantRangeCount:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->pushConstantRangeCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkPushConstantRange* pPushConstantRanges
    IndentSpaces(out, indent);
    *out += "pPushConstantRanges:            ";
    *out += "const VkPushConstantRange* = "; // TEQ
    if (pstruct->pPushConstantRanges == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pPushConstantRanges->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkPushConstantRange>(out, indent+1, 1, "VkPushConstantRange", pstruct_in.pPushConstantRanges->GetMetaStructPointer(), "pPushConstantRanges", pstruct->pushConstantRangeCount, false, pstruct_in.pPushConstantRanges->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkSamplerCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSamplerCreateInfo *pstruct = (const VkSamplerCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSamplerCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSamplerCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSamplerCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkFilter magFilter
    IndentSpaces(out, indent);
    *out += "magFilter:                      ";
    *out += "VkFilter = "; // TEQ
    EnumToStringVkFilter(out, pstruct->magFilter); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->magFilter);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkFilter minFilter
    IndentSpaces(out, indent);
    *out += "minFilter:                      ";
    *out += "VkFilter = "; // TEQ
    EnumToStringVkFilter(out, pstruct->minFilter); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->minFilter);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSamplerMipmapMode mipmapMode
    IndentSpaces(out, indent);
    *out += "mipmapMode:                     ";
    *out += "VkSamplerMipmapMode = "; // TEQ
    EnumToStringVkSamplerMipmapMode(out, pstruct->mipmapMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->mipmapMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSamplerAddressMode addressModeU
    IndentSpaces(out, indent);
    *out += "addressModeU:                   ";
    *out += "VkSamplerAddressMode = "; // TEQ
    EnumToStringVkSamplerAddressMode(out, pstruct->addressModeU); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->addressModeU);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSamplerAddressMode addressModeV
    IndentSpaces(out, indent);
    *out += "addressModeV:                   ";
    *out += "VkSamplerAddressMode = "; // TEQ
    EnumToStringVkSamplerAddressMode(out, pstruct->addressModeV); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->addressModeV);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSamplerAddressMode addressModeW
    IndentSpaces(out, indent);
    *out += "addressModeW:                   ";
    *out += "VkSamplerAddressMode = "; // TEQ
    EnumToStringVkSamplerAddressMode(out, pstruct->addressModeW); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->addressModeW);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: float mipLodBias
    IndentSpaces(out, indent);
    *out += "mipLodBias:                     ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->mipLodBias); // PEZ
    *out += "\n"; // GDS

    // struct member: VkBool32 anisotropyEnable
    IndentSpaces(out, indent);
    *out += "anisotropyEnable:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->anisotropyEnable); //EQA
    *out += "\n"; // GDS

    // struct member: float maxAnisotropy
    IndentSpaces(out, indent);
    *out += "maxAnisotropy:                  ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxAnisotropy); // PEZ
    *out += "\n"; // GDS

    // struct member: VkBool32 compareEnable
    IndentSpaces(out, indent);
    *out += "compareEnable:                  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->compareEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkCompareOp compareOp
    IndentSpaces(out, indent);
    *out += "compareOp:                      ";
    *out += "VkCompareOp = "; // TEQ
    EnumToStringVkCompareOp(out, pstruct->compareOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->compareOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: float minLod
    IndentSpaces(out, indent);
    *out += "minLod:                         ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->minLod); // PEZ
    *out += "\n"; // GDS

    // struct member: float maxLod
    IndentSpaces(out, indent);
    *out += "maxLod:                         ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxLod); // PEZ
    *out += "\n"; // GDS

    // struct member: VkBorderColor borderColor
    IndentSpaces(out, indent);
    *out += "borderColor:                    ";
    *out += "VkBorderColor = "; // TEQ
    EnumToStringVkBorderColor(out, pstruct->borderColor); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->borderColor);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 unnormalizedCoordinates
    IndentSpaces(out, indent);
    *out += "unnormalizedCoordinates:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->unnormalizedCoordinates); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDescriptorSetLayoutBinding &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorSetLayoutBinding *pstruct = (const VkDescriptorSetLayoutBinding *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t binding
    IndentSpaces(out, indent);
    *out += "binding:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->binding); // UYW
    *out += "\n"; // GDS

    // struct member: VkDescriptorType descriptorType
    IndentSpaces(out, indent);
    *out += "descriptorType:                 ";
    *out += "VkDescriptorType = "; // TEQ
    EnumToStringVkDescriptorType(out, pstruct->descriptorType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->descriptorType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t descriptorCount
    IndentSpaces(out, indent);
    *out += "descriptorCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->descriptorCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkShaderStageFlags stageFlags
    IndentSpaces(out, indent);
    *out += "stageFlags:                     ";
    *out += "VkShaderStageFlags = "; // TEQ
    FlagsToString(out, pstruct->stageFlags, EnumToStringVkShaderStageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: const VkSampler* pImmutableSamplers
    IndentSpaces(out, indent);
    *out += "pImmutableSamplers:             ";
    *out += "const VkSampler* = "; // TEQ
    if (pstruct->pImmutableSamplers == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pImmutableSamplers.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pImmutableSamplers = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkSampler>>(out, indent, 1, "const VkSampler*", &pstruct_in.pImmutableSamplers, "pImmutableSamplers", pstruct->descriptorCount,  vinfo_pImmutableSamplers);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkDescriptorSetLayoutCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorSetLayoutCreateInfo *pstruct = (const VkDescriptorSetLayoutCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDescriptorSetLayoutCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDescriptorSetLayoutCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkDescriptorSetLayoutCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t bindingCount
    IndentSpaces(out, indent);
    *out += "bindingCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->bindingCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDescriptorSetLayoutBinding* pBindings
    IndentSpaces(out, indent);
    *out += "pBindings:                      ";
    *out += "const VkDescriptorSetLayoutBinding* = "; // TEQ
    if (pstruct->pBindings == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pBindings->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDescriptorSetLayoutBinding>(out, indent+1, 1, "VkDescriptorSetLayoutBinding", pstruct_in.pBindings->GetMetaStructPointer(), "pBindings", pstruct->bindingCount, false, pstruct_in.pBindings->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkDescriptorPoolSize &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorPoolSize *pstruct = (const VkDescriptorPoolSize *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDescriptorType type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkDescriptorType = "; // TEQ
    EnumToStringVkDescriptorType(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t descriptorCount
    IndentSpaces(out, indent);
    *out += "descriptorCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->descriptorCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDescriptorPoolCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorPoolCreateInfo *pstruct = (const VkDescriptorPoolCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDescriptorPoolCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDescriptorPoolCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkDescriptorPoolCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t maxSets
    IndentSpaces(out, indent);
    *out += "maxSets:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxSets); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t poolSizeCount
    IndentSpaces(out, indent);
    *out += "poolSizeCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->poolSizeCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDescriptorPoolSize* pPoolSizes
    IndentSpaces(out, indent);
    *out += "pPoolSizes:                     ";
    *out += "const VkDescriptorPoolSize* = "; // TEQ
    if (pstruct->pPoolSizes == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pPoolSizes->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDescriptorPoolSize>(out, indent+1, 1, "VkDescriptorPoolSize", pstruct_in.pPoolSizes->GetMetaStructPointer(), "pPoolSizes", pstruct->poolSizeCount, false, pstruct_in.pPoolSizes->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkDescriptorSetAllocateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorSetAllocateInfo *pstruct = (const VkDescriptorSetAllocateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDescriptorPool descriptorPool
    IndentSpaces(out, indent);
    *out += "descriptorPool:                 ";
    *out += "VkDescriptorPool = "; // TEQ
    AddrToString(out, pstruct_in.descriptorPool); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t descriptorSetCount
    IndentSpaces(out, indent);
    *out += "descriptorSetCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->descriptorSetCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDescriptorSetLayout* pSetLayouts
    IndentSpaces(out, indent);
    *out += "pSetLayouts:                    ";
    *out += "const VkDescriptorSetLayout* = "; // TEQ
    if (pstruct->pSetLayouts == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSetLayouts.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSetLayouts = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkDescriptorSetLayout>>(out, indent, 1, "const VkDescriptorSetLayout*", &pstruct_in.pSetLayouts, "pSetLayouts", pstruct->descriptorSetCount,  vinfo_pSetLayouts);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkDescriptorImageInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorImageInfo *pstruct = (const VkDescriptorImageInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkSampler sampler
    IndentSpaces(out, indent);
    *out += "sampler:                        ";
    *out += "VkSampler = "; // TEQ
    AddrToString(out, pstruct_in.sampler); // PAQ
    *out += "\n"; // GDS

    // struct member: VkImageView imageView
    IndentSpaces(out, indent);
    *out += "imageView:                      ";
    *out += "VkImageView = "; // TEQ
    AddrToString(out, pstruct_in.imageView); // PAQ
    *out += "\n"; // GDS

    // struct member: VkImageLayout imageLayout
    IndentSpaces(out, indent);
    *out += "imageLayout:                    ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->imageLayout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->imageLayout);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkDescriptorBufferInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorBufferInfo *pstruct = (const VkDescriptorBufferInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->offset); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize range
    IndentSpaces(out, indent);
    *out += "range:                          ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->range); //EQA
}

void StructureToString(std::string* out, const Decoded_VkWriteDescriptorSet &pstruct_in, int indent, uint64_t base_addr)
{
    const VkWriteDescriptorSet *pstruct = (const VkWriteDescriptorSet *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDescriptorSet dstSet
    IndentSpaces(out, indent);
    *out += "dstSet:                         ";
    *out += "VkDescriptorSet = "; // TEQ
    AddrToString(out, pstruct_in.dstSet); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t dstBinding
    IndentSpaces(out, indent);
    *out += "dstBinding:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstBinding); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t dstArrayElement
    IndentSpaces(out, indent);
    *out += "dstArrayElement:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstArrayElement); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t descriptorCount
    IndentSpaces(out, indent);
    *out += "descriptorCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->descriptorCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkDescriptorType descriptorType
    IndentSpaces(out, indent);
    *out += "descriptorType:                 ";
    *out += "VkDescriptorType = "; // TEQ
    EnumToStringVkDescriptorType(out, pstruct->descriptorType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->descriptorType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const VkDescriptorImageInfo* pImageInfo
    IndentSpaces(out, indent);
    *out += "pImageInfo:                     ";
    *out += "const VkDescriptorImageInfo* = "; // TEQ
    if (pstruct->pImageInfo == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pImageInfo->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDescriptorImageInfo>(out, indent+1, 1, "VkDescriptorImageInfo", pstruct_in.pImageInfo->GetMetaStructPointer(), "pImageInfo", pstruct->descriptorCount, false, pstruct_in.pImageInfo->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: const VkDescriptorBufferInfo* pBufferInfo
    IndentSpaces(out, indent);
    *out += "pBufferInfo:                    ";
    *out += "const VkDescriptorBufferInfo* = "; // TEQ
    if (pstruct->pBufferInfo == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pBufferInfo->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDescriptorBufferInfo>(out, indent+1, 1, "VkDescriptorBufferInfo", pstruct_in.pBufferInfo->GetMetaStructPointer(), "pBufferInfo", pstruct->descriptorCount, false, pstruct_in.pBufferInfo->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: const VkBufferView* pTexelBufferView
    IndentSpaces(out, indent);
    *out += "pTexelBufferView:               ";
    *out += "const VkBufferView* = "; // TEQ
    if (pstruct->pTexelBufferView == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pTexelBufferView.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pTexelBufferView = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkBufferView>>(out, indent, 1, "const VkBufferView*", &pstruct_in.pTexelBufferView, "pTexelBufferView", pstruct->descriptorCount,  vinfo_pTexelBufferView);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkCopyDescriptorSet &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCopyDescriptorSet *pstruct = (const VkCopyDescriptorSet *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDescriptorSet srcSet
    IndentSpaces(out, indent);
    *out += "srcSet:                         ";
    *out += "VkDescriptorSet = "; // TEQ
    AddrToString(out, pstruct_in.srcSet); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t srcBinding
    IndentSpaces(out, indent);
    *out += "srcBinding:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->srcBinding); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t srcArrayElement
    IndentSpaces(out, indent);
    *out += "srcArrayElement:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->srcArrayElement); // UYW
    *out += "\n"; // GDS

    // struct member: VkDescriptorSet dstSet
    IndentSpaces(out, indent);
    *out += "dstSet:                         ";
    *out += "VkDescriptorSet = "; // TEQ
    AddrToString(out, pstruct_in.dstSet); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t dstBinding
    IndentSpaces(out, indent);
    *out += "dstBinding:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstBinding); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t dstArrayElement
    IndentSpaces(out, indent);
    *out += "dstArrayElement:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstArrayElement); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t descriptorCount
    IndentSpaces(out, indent);
    *out += "descriptorCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->descriptorCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkFramebufferCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFramebufferCreateInfo *pstruct = (const VkFramebufferCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFramebufferCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkFramebufferCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkFramebufferCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkRenderPass renderPass
    IndentSpaces(out, indent);
    *out += "renderPass:                     ";
    *out += "VkRenderPass = "; // TEQ
    AddrToString(out, pstruct_in.renderPass); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t attachmentCount
    IndentSpaces(out, indent);
    *out += "attachmentCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkImageView* pAttachments
    IndentSpaces(out, indent);
    *out += "pAttachments:                   ";
    *out += "const VkImageView* = "; // TEQ
    if (pstruct->pAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAttachments.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pAttachments = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkImageView>>(out, indent, 1, "const VkImageView*", &pstruct_in.pAttachments, "pAttachments", pstruct->attachmentCount,  vinfo_pAttachments);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t width
    IndentSpaces(out, indent);
    *out += "width:                          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->width); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t height
    IndentSpaces(out, indent);
    *out += "height:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->height); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t layers
    IndentSpaces(out, indent);
    *out += "layers:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->layers); // UYW
}

void StructureToString(std::string* out, const Decoded_VkAttachmentDescription &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAttachmentDescription *pstruct = (const VkAttachmentDescription *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkAttachmentDescriptionFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkAttachmentDescriptionFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkAttachmentDescriptionFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlagBits samples
    IndentSpaces(out, indent);
    *out += "samples:                        ";
    *out += "VkSampleCountFlagBits = "; // TEQ
    EnumToStringVkSampleCountFlagBits(out, pstruct->samples); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->samples);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkAttachmentLoadOp loadOp
    IndentSpaces(out, indent);
    *out += "loadOp:                         ";
    *out += "VkAttachmentLoadOp = "; // TEQ
    EnumToStringVkAttachmentLoadOp(out, pstruct->loadOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->loadOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkAttachmentStoreOp storeOp
    IndentSpaces(out, indent);
    *out += "storeOp:                        ";
    *out += "VkAttachmentStoreOp = "; // TEQ
    EnumToStringVkAttachmentStoreOp(out, pstruct->storeOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->storeOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkAttachmentLoadOp stencilLoadOp
    IndentSpaces(out, indent);
    *out += "stencilLoadOp:                  ";
    *out += "VkAttachmentLoadOp = "; // TEQ
    EnumToStringVkAttachmentLoadOp(out, pstruct->stencilLoadOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->stencilLoadOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkAttachmentStoreOp stencilStoreOp
    IndentSpaces(out, indent);
    *out += "stencilStoreOp:                 ";
    *out += "VkAttachmentStoreOp = "; // TEQ
    EnumToStringVkAttachmentStoreOp(out, pstruct->stencilStoreOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->stencilStoreOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageLayout initialLayout
    IndentSpaces(out, indent);
    *out += "initialLayout:                  ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->initialLayout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->initialLayout);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageLayout finalLayout
    IndentSpaces(out, indent);
    *out += "finalLayout:                    ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->finalLayout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->finalLayout);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkAttachmentReference &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAttachmentReference *pstruct = (const VkAttachmentReference *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t attachment
    IndentSpaces(out, indent);
    *out += "attachment:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachment); // UYW
    *out += "\n"; // GDS

    // struct member: VkImageLayout layout
    IndentSpaces(out, indent);
    *out += "layout:                         ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->layout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->layout);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkSubpassDescription &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubpassDescription *pstruct = (const VkSubpassDescription *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkSubpassDescriptionFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSubpassDescriptionFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSubpassDescriptionFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkPipelineBindPoint pipelineBindPoint
    IndentSpaces(out, indent);
    *out += "pipelineBindPoint:              ";
    *out += "VkPipelineBindPoint = "; // TEQ
    EnumToStringVkPipelineBindPoint(out, pstruct->pipelineBindPoint); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->pipelineBindPoint);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t inputAttachmentCount
    IndentSpaces(out, indent);
    *out += "inputAttachmentCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->inputAttachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkAttachmentReference* pInputAttachments
    IndentSpaces(out, indent);
    *out += "pInputAttachments:              ";
    *out += "const VkAttachmentReference* = "; // TEQ
    if (pstruct->pInputAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pInputAttachments->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkAttachmentReference>(out, indent+1, 1, "VkAttachmentReference", pstruct_in.pInputAttachments->GetMetaStructPointer(), "pInputAttachments", pstruct->inputAttachmentCount, false, pstruct_in.pInputAttachments->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t colorAttachmentCount
    IndentSpaces(out, indent);
    *out += "colorAttachmentCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->colorAttachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkAttachmentReference* pColorAttachments
    IndentSpaces(out, indent);
    *out += "pColorAttachments:              ";
    *out += "const VkAttachmentReference* = "; // TEQ
    if (pstruct->pColorAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pColorAttachments->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkAttachmentReference>(out, indent+1, 1, "VkAttachmentReference", pstruct_in.pColorAttachments->GetMetaStructPointer(), "pColorAttachments", pstruct->colorAttachmentCount, false, pstruct_in.pColorAttachments->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: const VkAttachmentReference* pResolveAttachments
    IndentSpaces(out, indent);
    *out += "pResolveAttachments:            ";
    *out += "const VkAttachmentReference* = "; // TEQ
    if (pstruct->pResolveAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pResolveAttachments->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkAttachmentReference>(out, indent+1, 1, "VkAttachmentReference", pstruct_in.pResolveAttachments->GetMetaStructPointer(), "pResolveAttachments", pstruct->colorAttachmentCount, false, pstruct_in.pResolveAttachments->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: const VkAttachmentReference* pDepthStencilAttachment
    IndentSpaces(out, indent);
    *out += "pDepthStencilAttachment:        ";
    *out += "const VkAttachmentReference* = "; // TEQ
    if (pstruct->pDepthStencilAttachment == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDepthStencilAttachment->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pDepthStencilAttachment->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkSubpassDescription, pDepthStencilAttachment)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: uint32_t preserveAttachmentCount
    IndentSpaces(out, indent);
    *out += "preserveAttachmentCount:        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->preserveAttachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pPreserveAttachments
    IndentSpaces(out, indent);
    *out += "pPreserveAttachments:           ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pPreserveAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pPreserveAttachments.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pPreserveAttachments = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pPreserveAttachments, "pPreserveAttachments", pstruct->preserveAttachmentCount,  vinfo_pPreserveAttachments);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkSubpassDependency &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubpassDependency *pstruct = (const VkSubpassDependency *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t srcSubpass
    IndentSpaces(out, indent);
    *out += "srcSubpass:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->srcSubpass); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t dstSubpass
    IndentSpaces(out, indent);
    *out += "dstSubpass:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstSubpass); // UYW
    *out += "\n"; // GDS

    // struct member: VkPipelineStageFlags srcStageMask
    IndentSpaces(out, indent);
    *out += "srcStageMask:                   ";
    *out += "VkPipelineStageFlags = "; // TEQ
    FlagsToString(out, pstruct->srcStageMask, EnumToStringVkPipelineStageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkPipelineStageFlags dstStageMask
    IndentSpaces(out, indent);
    *out += "dstStageMask:                   ";
    *out += "VkPipelineStageFlags = "; // TEQ
    FlagsToString(out, pstruct->dstStageMask, EnumToStringVkPipelineStageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkAccessFlags srcAccessMask
    IndentSpaces(out, indent);
    *out += "srcAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->srcAccessMask, EnumToStringVkAccessFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkAccessFlags dstAccessMask
    IndentSpaces(out, indent);
    *out += "dstAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->dstAccessMask, EnumToStringVkAccessFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkDependencyFlags dependencyFlags
    IndentSpaces(out, indent);
    *out += "dependencyFlags:                ";
    *out += "VkDependencyFlags = "; // TEQ
    FlagsToString(out, pstruct->dependencyFlags, EnumToStringVkDependencyFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkRenderPassCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRenderPassCreateInfo *pstruct = (const VkRenderPassCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkRenderPassCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkRenderPassCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkRenderPassCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t attachmentCount
    IndentSpaces(out, indent);
    *out += "attachmentCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkAttachmentDescription* pAttachments
    IndentSpaces(out, indent);
    *out += "pAttachments:                   ";
    *out += "const VkAttachmentDescription* = "; // TEQ
    if (pstruct->pAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAttachments->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkAttachmentDescription>(out, indent+1, 1, "VkAttachmentDescription", pstruct_in.pAttachments->GetMetaStructPointer(), "pAttachments", pstruct->attachmentCount, false, pstruct_in.pAttachments->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t subpassCount
    IndentSpaces(out, indent);
    *out += "subpassCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subpassCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSubpassDescription* pSubpasses
    IndentSpaces(out, indent);
    *out += "pSubpasses:                     ";
    *out += "const VkSubpassDescription* = "; // TEQ
    if (pstruct->pSubpasses == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSubpasses->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSubpassDescription>(out, indent+1, 1, "VkSubpassDescription", pstruct_in.pSubpasses->GetMetaStructPointer(), "pSubpasses", pstruct->subpassCount, false, pstruct_in.pSubpasses->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t dependencyCount
    IndentSpaces(out, indent);
    *out += "dependencyCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dependencyCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSubpassDependency* pDependencies
    IndentSpaces(out, indent);
    *out += "pDependencies:                  ";
    *out += "const VkSubpassDependency* = "; // TEQ
    if (pstruct->pDependencies == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDependencies->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSubpassDependency>(out, indent+1, 1, "VkSubpassDependency", pstruct_in.pDependencies->GetMetaStructPointer(), "pDependencies", pstruct->dependencyCount, false, pstruct_in.pDependencies->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkCommandPoolCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCommandPoolCreateInfo *pstruct = (const VkCommandPoolCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkCommandPoolCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkCommandPoolCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkCommandPoolCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t queueFamilyIndex
    IndentSpaces(out, indent);
    *out += "queueFamilyIndex:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueFamilyIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkCommandBufferAllocateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCommandBufferAllocateInfo *pstruct = (const VkCommandBufferAllocateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkCommandPool commandPool
    IndentSpaces(out, indent);
    *out += "commandPool:                    ";
    *out += "VkCommandPool = "; // TEQ
    AddrToString(out, pstruct_in.commandPool); // PAQ
    *out += "\n"; // GDS

    // struct member: VkCommandBufferLevel level
    IndentSpaces(out, indent);
    *out += "level:                          ";
    *out += "VkCommandBufferLevel = "; // TEQ
    EnumToStringVkCommandBufferLevel(out, pstruct->level); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->level);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t commandBufferCount
    IndentSpaces(out, indent);
    *out += "commandBufferCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->commandBufferCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkCommandBufferInheritanceInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCommandBufferInheritanceInfo *pstruct = (const VkCommandBufferInheritanceInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkRenderPass renderPass
    IndentSpaces(out, indent);
    *out += "renderPass:                     ";
    *out += "VkRenderPass = "; // TEQ
    AddrToString(out, pstruct_in.renderPass); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t subpass
    IndentSpaces(out, indent);
    *out += "subpass:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subpass); // UYW
    *out += "\n"; // GDS

    // struct member: VkFramebuffer framebuffer
    IndentSpaces(out, indent);
    *out += "framebuffer:                    ";
    *out += "VkFramebuffer = "; // TEQ
    AddrToString(out, pstruct_in.framebuffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkBool32 occlusionQueryEnable
    IndentSpaces(out, indent);
    *out += "occlusionQueryEnable:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->occlusionQueryEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkQueryControlFlags queryFlags
    IndentSpaces(out, indent);
    *out += "queryFlags:                     ";
    *out += "VkQueryControlFlags = "; // TEQ
    FlagsToString(out, pstruct->queryFlags, EnumToStringVkQueryControlFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkQueryPipelineStatisticFlags pipelineStatistics
    IndentSpaces(out, indent);
    *out += "pipelineStatistics:             ";
    *out += "VkQueryPipelineStatisticFlags = "; // TEQ
    FlagsToString(out, pstruct->pipelineStatistics, EnumToStringVkQueryPipelineStatisticFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkCommandBufferBeginInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCommandBufferBeginInfo *pstruct = (const VkCommandBufferBeginInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkCommandBufferUsageFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkCommandBufferUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkCommandBufferUsageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: const VkCommandBufferInheritanceInfo* pInheritanceInfo
    IndentSpaces(out, indent);
    *out += "pInheritanceInfo:               ";
    *out += "const VkCommandBufferInheritanceInfo* = "; // TEQ
    if (pstruct->pInheritanceInfo == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pInheritanceInfo->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pInheritanceInfo->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkCommandBufferBeginInfo, pInheritanceInfo)); // GLN
    }
}

void StructureToString(std::string* out, const Decoded_VkBufferCopy &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBufferCopy *pstruct = (const VkBufferCopy *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDeviceSize srcOffset
    IndentSpaces(out, indent);
    *out += "srcOffset:                      ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->srcOffset); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize dstOffset
    IndentSpaces(out, indent);
    *out += "dstOffset:                      ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->dstOffset); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->size); //EQA
}

void StructureToString(std::string* out, const Decoded_VkImageSubresourceLayers &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageSubresourceLayers *pstruct = (const VkImageSubresourceLayers *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageAspectFlags aspectMask
    IndentSpaces(out, indent);
    *out += "aspectMask:                     ";
    *out += "VkImageAspectFlags = "; // TEQ
    FlagsToString(out, pstruct->aspectMask, EnumToStringVkImageAspectFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t mipLevel
    IndentSpaces(out, indent);
    *out += "mipLevel:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->mipLevel); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t baseArrayLayer
    IndentSpaces(out, indent);
    *out += "baseArrayLayer:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->baseArrayLayer); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t layerCount
    IndentSpaces(out, indent);
    *out += "layerCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->layerCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkImageCopy &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageCopy *pstruct = (const VkImageCopy *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageSubresourceLayers srcSubresource
    IndentSpaces(out, indent);
    *out += "srcSubresource:                 ";
    *out += "VkImageSubresourceLayers = "; // TEQ
    StructureToString(out, *pstruct_in.srcSubresource, indent+1,  base_addr + offsetof(VkImageCopy, srcSubresource)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset3D srcOffset
    IndentSpaces(out, indent);
    *out += "srcOffset:                      ";
    *out += "VkOffset3D = "; // TEQ
    StructureToString(out, *pstruct_in.srcOffset, indent+1,  base_addr + offsetof(VkImageCopy, srcOffset)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkImageSubresourceLayers dstSubresource
    IndentSpaces(out, indent);
    *out += "dstSubresource:                 ";
    *out += "VkImageSubresourceLayers = "; // TEQ
    StructureToString(out, *pstruct_in.dstSubresource, indent+1,  base_addr + offsetof(VkImageCopy, dstSubresource)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset3D dstOffset
    IndentSpaces(out, indent);
    *out += "dstOffset:                      ";
    *out += "VkOffset3D = "; // TEQ
    StructureToString(out, *pstruct_in.dstOffset, indent+1,  base_addr + offsetof(VkImageCopy, dstOffset)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent3D extent
    IndentSpaces(out, indent);
    *out += "extent:                         ";
    *out += "VkExtent3D = "; // TEQ
    StructureToString(out, *pstruct_in.extent, indent+1,  base_addr + offsetof(VkImageCopy, extent)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkImageBlit &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageBlit *pstruct = (const VkImageBlit *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageSubresourceLayers srcSubresource
    IndentSpaces(out, indent);
    *out += "srcSubresource:                 ";
    *out += "VkImageSubresourceLayers = "; // TEQ
    StructureToString(out, *pstruct_in.srcSubresource, indent+1,  base_addr + offsetof(VkImageBlit, srcSubresource)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset3D srcOffsets
    IndentSpaces(out, indent);
    *out += "srcOffsets:                     ";
    *out += "VkOffset3D[";
    *out += "2"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkImageBlit, srcOffsets)); // IYY
    ArrayOfStructsToString<Decoded_VkOffset3D>(out, indent+1, 0, "VkOffset3D", pstruct_in.srcOffsets->GetMetaStructPointer(), "srcOffsets", 2 , false, pstruct_in.srcOffsets->GetAddress()); // EPB
    *out += "\n"; // GDS

    // struct member: VkImageSubresourceLayers dstSubresource
    IndentSpaces(out, indent);
    *out += "dstSubresource:                 ";
    *out += "VkImageSubresourceLayers = "; // TEQ
    StructureToString(out, *pstruct_in.dstSubresource, indent+1,  base_addr + offsetof(VkImageBlit, dstSubresource)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset3D dstOffsets
    IndentSpaces(out, indent);
    *out += "dstOffsets:                     ";
    *out += "VkOffset3D[";
    *out += "2"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkImageBlit, dstOffsets)); // IYY
    ArrayOfStructsToString<Decoded_VkOffset3D>(out, indent+1, 0, "VkOffset3D", pstruct_in.dstOffsets->GetMetaStructPointer(), "dstOffsets", 2 , false, pstruct_in.dstOffsets->GetAddress()); // EPB
}

void StructureToString(std::string* out, const Decoded_VkBufferImageCopy &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBufferImageCopy *pstruct = (const VkBufferImageCopy *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDeviceSize bufferOffset
    IndentSpaces(out, indent);
    *out += "bufferOffset:                   ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->bufferOffset); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t bufferRowLength
    IndentSpaces(out, indent);
    *out += "bufferRowLength:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->bufferRowLength); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t bufferImageHeight
    IndentSpaces(out, indent);
    *out += "bufferImageHeight:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->bufferImageHeight); // UYW
    *out += "\n"; // GDS

    // struct member: VkImageSubresourceLayers imageSubresource
    IndentSpaces(out, indent);
    *out += "imageSubresource:               ";
    *out += "VkImageSubresourceLayers = "; // TEQ
    StructureToString(out, *pstruct_in.imageSubresource, indent+1,  base_addr + offsetof(VkBufferImageCopy, imageSubresource)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset3D imageOffset
    IndentSpaces(out, indent);
    *out += "imageOffset:                    ";
    *out += "VkOffset3D = "; // TEQ
    StructureToString(out, *pstruct_in.imageOffset, indent+1,  base_addr + offsetof(VkBufferImageCopy, imageOffset)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent3D imageExtent
    IndentSpaces(out, indent);
    *out += "imageExtent:                    ";
    *out += "VkExtent3D = "; // TEQ
    StructureToString(out, *pstruct_in.imageExtent, indent+1,  base_addr + offsetof(VkBufferImageCopy, imageExtent)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkClearColorValue &pstruct_in, int indent, uint64_t base_addr)
{
    const VkClearColorValue *pstruct = (const VkClearColorValue *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: float float32
    IndentSpaces(out, indent);
    *out += "float32:                        ";
    *out += "float[";
    *out += "4"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkClearColorValue, float32)); // IYY
    ScalarValueToStringStruct vinfo_float32 = {false, false, false, nullptr};
    ArrayOfScalarsToString<float>(out, indent, 0, "float", pstruct_in.decoded_value->float32, "float32", 4, vinfo_float32); // JPC
    *out += "\n"; // GDS

    // struct member: int32_t int32
    IndentSpaces(out, indent);
    *out += "int32:                          ";
    *out += "int32_t[";
    *out += "4"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkClearColorValue, int32)); // IYY
    ScalarValueToStringStruct vinfo_int32 = {false, false, false, nullptr};
    ArrayOfScalarsToString<int32_t>(out, indent, 0, "int32_t", pstruct_in.decoded_value->int32, "int32", 4, vinfo_int32); // JPC
    *out += "\n"; // GDS

    // struct member: uint32_t uint32
    IndentSpaces(out, indent);
    *out += "uint32:                         ";
    *out += "uint32_t[";
    *out += "4"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkClearColorValue, uint32)); // IYY
    ScalarValueToStringStruct vinfo_uint32 = {false, false, false, nullptr};
    ArrayOfScalarsToString<uint32_t>(out, indent, 0, "uint32_t", pstruct_in.decoded_value->uint32, "uint32", 4, vinfo_uint32); // JPC
}

void StructureToString(std::string* out, const Decoded_VkClearDepthStencilValue &pstruct_in, int indent, uint64_t base_addr)
{
    const VkClearDepthStencilValue *pstruct = (const VkClearDepthStencilValue *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: float depth
    IndentSpaces(out, indent);
    *out += "depth:                          ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->depth); // PEZ
    *out += "\n"; // GDS

    // struct member: uint32_t stencil
    IndentSpaces(out, indent);
    *out += "stencil:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->stencil); // UYW
}

void StructureToString(std::string* out, const Decoded_VkClearValue &pstruct_in, int indent, uint64_t base_addr)
{
    const VkClearValue *pstruct = (const VkClearValue *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkClearColorValue color
    IndentSpaces(out, indent);
    *out += "color:                          ";
    *out += "VkClearColorValue = "; // TEQ
    *out += "(Union):"; // RGT
    StructureToString(out, reinterpret_cast<const Decoded_VkClearColorValue&>(pstruct_in), indent+1,  base_addr + offsetof(VkClearValue, color)); // RLN
    *out += "\n"; // GDS

    // struct member: VkClearDepthStencilValue depthStencil
    IndentSpaces(out, indent);
    *out += "depthStencil:                   ";
    *out += "VkClearDepthStencilValue = "; // TEQ
    StructureToString(out, reinterpret_cast<const Decoded_VkClearDepthStencilValue&>(pstruct_in), indent+1,  base_addr + offsetof(VkClearValue, depthStencil)); // RLN
}

void StructureToString(std::string* out, const Decoded_VkClearAttachment &pstruct_in, int indent, uint64_t base_addr)
{
    const VkClearAttachment *pstruct = (const VkClearAttachment *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageAspectFlags aspectMask
    IndentSpaces(out, indent);
    *out += "aspectMask:                     ";
    *out += "VkImageAspectFlags = "; // TEQ
    FlagsToString(out, pstruct->aspectMask, EnumToStringVkImageAspectFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t colorAttachment
    IndentSpaces(out, indent);
    *out += "colorAttachment:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->colorAttachment); // UYW
    *out += "\n"; // GDS

    // struct member: VkClearValue clearValue
    IndentSpaces(out, indent);
    *out += "clearValue:                     ";
    *out += "VkClearValue = "; // TEQ
    *out += "(Union):"; // RGT
    StructureToString(out, *pstruct_in.clearValue, indent+1,  base_addr + offsetof(VkClearAttachment, clearValue)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkClearRect &pstruct_in, int indent, uint64_t base_addr)
{
    const VkClearRect *pstruct = (const VkClearRect *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkRect2D rect
    IndentSpaces(out, indent);
    *out += "rect:                           ";
    *out += "VkRect2D = "; // TEQ
    StructureToString(out, *pstruct_in.rect, indent+1,  base_addr + offsetof(VkClearRect, rect)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t baseArrayLayer
    IndentSpaces(out, indent);
    *out += "baseArrayLayer:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->baseArrayLayer); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t layerCount
    IndentSpaces(out, indent);
    *out += "layerCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->layerCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkImageResolve &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageResolve *pstruct = (const VkImageResolve *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageSubresourceLayers srcSubresource
    IndentSpaces(out, indent);
    *out += "srcSubresource:                 ";
    *out += "VkImageSubresourceLayers = "; // TEQ
    StructureToString(out, *pstruct_in.srcSubresource, indent+1,  base_addr + offsetof(VkImageResolve, srcSubresource)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset3D srcOffset
    IndentSpaces(out, indent);
    *out += "srcOffset:                      ";
    *out += "VkOffset3D = "; // TEQ
    StructureToString(out, *pstruct_in.srcOffset, indent+1,  base_addr + offsetof(VkImageResolve, srcOffset)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkImageSubresourceLayers dstSubresource
    IndentSpaces(out, indent);
    *out += "dstSubresource:                 ";
    *out += "VkImageSubresourceLayers = "; // TEQ
    StructureToString(out, *pstruct_in.dstSubresource, indent+1,  base_addr + offsetof(VkImageResolve, dstSubresource)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset3D dstOffset
    IndentSpaces(out, indent);
    *out += "dstOffset:                      ";
    *out += "VkOffset3D = "; // TEQ
    StructureToString(out, *pstruct_in.dstOffset, indent+1,  base_addr + offsetof(VkImageResolve, dstOffset)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent3D extent
    IndentSpaces(out, indent);
    *out += "extent:                         ";
    *out += "VkExtent3D = "; // TEQ
    StructureToString(out, *pstruct_in.extent, indent+1,  base_addr + offsetof(VkImageResolve, extent)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkMemoryBarrier &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryBarrier *pstruct = (const VkMemoryBarrier *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkAccessFlags srcAccessMask
    IndentSpaces(out, indent);
    *out += "srcAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->srcAccessMask, EnumToStringVkAccessFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkAccessFlags dstAccessMask
    IndentSpaces(out, indent);
    *out += "dstAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->dstAccessMask, EnumToStringVkAccessFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkBufferMemoryBarrier &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBufferMemoryBarrier *pstruct = (const VkBufferMemoryBarrier *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkAccessFlags srcAccessMask
    IndentSpaces(out, indent);
    *out += "srcAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->srcAccessMask, EnumToStringVkAccessFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkAccessFlags dstAccessMask
    IndentSpaces(out, indent);
    *out += "dstAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->dstAccessMask, EnumToStringVkAccessFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t srcQueueFamilyIndex
    IndentSpaces(out, indent);
    *out += "srcQueueFamilyIndex:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->srcQueueFamilyIndex); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t dstQueueFamilyIndex
    IndentSpaces(out, indent);
    *out += "dstQueueFamilyIndex:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstQueueFamilyIndex); // UYW
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->offset); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize size
    IndentSpaces(out, indent);
    *out += "size:                           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->size); //EQA
}

void StructureToString(std::string* out, const Decoded_VkImageMemoryBarrier &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageMemoryBarrier *pstruct = (const VkImageMemoryBarrier *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkAccessFlags srcAccessMask
    IndentSpaces(out, indent);
    *out += "srcAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->srcAccessMask, EnumToStringVkAccessFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkAccessFlags dstAccessMask
    IndentSpaces(out, indent);
    *out += "dstAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->dstAccessMask, EnumToStringVkAccessFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkImageLayout oldLayout
    IndentSpaces(out, indent);
    *out += "oldLayout:                      ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->oldLayout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->oldLayout);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageLayout newLayout
    IndentSpaces(out, indent);
    *out += "newLayout:                      ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->newLayout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->newLayout);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t srcQueueFamilyIndex
    IndentSpaces(out, indent);
    *out += "srcQueueFamilyIndex:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->srcQueueFamilyIndex); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t dstQueueFamilyIndex
    IndentSpaces(out, indent);
    *out += "dstQueueFamilyIndex:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstQueueFamilyIndex); // UYW
    *out += "\n"; // GDS

    // struct member: VkImage image
    IndentSpaces(out, indent);
    *out += "image:                          ";
    *out += "VkImage = "; // TEQ
    AddrToString(out, pstruct_in.image); // PAQ
    *out += "\n"; // GDS

    // struct member: VkImageSubresourceRange subresourceRange
    IndentSpaces(out, indent);
    *out += "subresourceRange:               ";
    *out += "VkImageSubresourceRange = "; // TEQ
    StructureToString(out, *pstruct_in.subresourceRange, indent+1,  base_addr + offsetof(VkImageMemoryBarrier, subresourceRange)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkRenderPassBeginInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRenderPassBeginInfo *pstruct = (const VkRenderPassBeginInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkRenderPass renderPass
    IndentSpaces(out, indent);
    *out += "renderPass:                     ";
    *out += "VkRenderPass = "; // TEQ
    AddrToString(out, pstruct_in.renderPass); // PAQ
    *out += "\n"; // GDS

    // struct member: VkFramebuffer framebuffer
    IndentSpaces(out, indent);
    *out += "framebuffer:                    ";
    *out += "VkFramebuffer = "; // TEQ
    AddrToString(out, pstruct_in.framebuffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkRect2D renderArea
    IndentSpaces(out, indent);
    *out += "renderArea:                     ";
    *out += "VkRect2D = "; // TEQ
    StructureToString(out, *pstruct_in.renderArea, indent+1,  base_addr + offsetof(VkRenderPassBeginInfo, renderArea)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t clearValueCount
    IndentSpaces(out, indent);
    *out += "clearValueCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->clearValueCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkClearValue* pClearValues
    IndentSpaces(out, indent);
    *out += "pClearValues:                   ";
    *out += "const VkClearValue* = "; // TEQ
    if (pstruct->pClearValues == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pClearValues->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkClearValue>(out, indent+1, 1, "VkClearValue", pstruct_in.pClearValues->GetMetaStructPointer(), "pClearValues", pstruct->clearValueCount, true, pstruct_in.pClearValues->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkDispatchIndirectCommand &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDispatchIndirectCommand *pstruct = (const VkDispatchIndirectCommand *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t x
    IndentSpaces(out, indent);
    *out += "x:                              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->x); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t y
    IndentSpaces(out, indent);
    *out += "y:                              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->y); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t z
    IndentSpaces(out, indent);
    *out += "z:                              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->z); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDrawIndexedIndirectCommand &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDrawIndexedIndirectCommand *pstruct = (const VkDrawIndexedIndirectCommand *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t indexCount
    IndentSpaces(out, indent);
    *out += "indexCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->indexCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t instanceCount
    IndentSpaces(out, indent);
    *out += "instanceCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->instanceCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t firstIndex
    IndentSpaces(out, indent);
    *out += "firstIndex:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->firstIndex); // UYW
    *out += "\n"; // GDS

    // struct member: int32_t vertexOffset
    IndentSpaces(out, indent);
    *out += "vertexOffset:                   ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->vertexOffset); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t firstInstance
    IndentSpaces(out, indent);
    *out += "firstInstance:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->firstInstance); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDrawIndirectCommand &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDrawIndirectCommand *pstruct = (const VkDrawIndirectCommand *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t vertexCount
    IndentSpaces(out, indent);
    *out += "vertexCount:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->vertexCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t instanceCount
    IndentSpaces(out, indent);
    *out += "instanceCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->instanceCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t firstVertex
    IndentSpaces(out, indent);
    *out += "firstVertex:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->firstVertex); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t firstInstance
    IndentSpaces(out, indent);
    *out += "firstInstance:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->firstInstance); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSubgroupProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceSubgroupProperties *pstruct = (const VkPhysicalDeviceSubgroupProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t subgroupSize
    IndentSpaces(out, indent);
    *out += "subgroupSize:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subgroupSize); // UYW
    *out += "\n"; // GDS

    // struct member: VkShaderStageFlags supportedStages
    IndentSpaces(out, indent);
    *out += "supportedStages:                ";
    *out += "VkShaderStageFlags = "; // TEQ
    FlagsToString(out, pstruct->supportedStages, EnumToStringVkShaderStageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSubgroupFeatureFlags supportedOperations
    IndentSpaces(out, indent);
    *out += "supportedOperations:            ";
    *out += "VkSubgroupFeatureFlags = "; // TEQ
    FlagsToString(out, pstruct->supportedOperations, EnumToStringVkSubgroupFeatureFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkBool32 quadOperationsInAllStages
    IndentSpaces(out, indent);
    *out += "quadOperationsInAllStages:      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->quadOperationsInAllStages); //EQA
}

void StructureToString(std::string* out, const Decoded_VkBindBufferMemoryInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBindBufferMemoryInfo *pstruct = (const VkBindBufferMemoryInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceMemory memory
    IndentSpaces(out, indent);
    *out += "memory:                         ";
    *out += "VkDeviceMemory = "; // TEQ
    AddrToString(out, pstruct_in.memory); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize memoryOffset
    IndentSpaces(out, indent);
    *out += "memoryOffset:                   ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->memoryOffset); //EQA
}

void StructureToString(std::string* out, const Decoded_VkBindImageMemoryInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBindImageMemoryInfo *pstruct = (const VkBindImageMemoryInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImage image
    IndentSpaces(out, indent);
    *out += "image:                          ";
    *out += "VkImage = "; // TEQ
    AddrToString(out, pstruct_in.image); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceMemory memory
    IndentSpaces(out, indent);
    *out += "memory:                         ";
    *out += "VkDeviceMemory = "; // TEQ
    AddrToString(out, pstruct_in.memory); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize memoryOffset
    IndentSpaces(out, indent);
    *out += "memoryOffset:                   ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->memoryOffset); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDevice16BitStorageFeatures &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDevice16BitStorageFeatures *pstruct = (const VkPhysicalDevice16BitStorageFeatures *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 storageBuffer16BitAccess
    IndentSpaces(out, indent);
    *out += "storageBuffer16BitAccess:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->storageBuffer16BitAccess); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 uniformAndStorageBuffer16BitAccess
    IndentSpaces(out, indent);
    *out += "uniformAndStorageBuffer16BitAccess: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->uniformAndStorageBuffer16BitAccess); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 storagePushConstant16
    IndentSpaces(out, indent);
    *out += "storagePushConstant16:          ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->storagePushConstant16); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 storageInputOutput16
    IndentSpaces(out, indent);
    *out += "storageInputOutput16:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->storageInputOutput16); //EQA
}

void StructureToString(std::string* out, const Decoded_VkMemoryDedicatedRequirements &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryDedicatedRequirements *pstruct = (const VkMemoryDedicatedRequirements *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 prefersDedicatedAllocation
    IndentSpaces(out, indent);
    *out += "prefersDedicatedAllocation:     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->prefersDedicatedAllocation); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 requiresDedicatedAllocation
    IndentSpaces(out, indent);
    *out += "requiresDedicatedAllocation:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->requiresDedicatedAllocation); //EQA
}

void StructureToString(std::string* out, const Decoded_VkMemoryDedicatedAllocateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryDedicatedAllocateInfo *pstruct = (const VkMemoryDedicatedAllocateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImage image
    IndentSpaces(out, indent);
    *out += "image:                          ";
    *out += "VkImage = "; // TEQ
    AddrToString(out, pstruct_in.image); // PAQ
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkMemoryAllocateFlagsInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryAllocateFlagsInfo *pstruct = (const VkMemoryAllocateFlagsInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkMemoryAllocateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkMemoryAllocateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkMemoryAllocateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t deviceMask
    IndentSpaces(out, indent);
    *out += "deviceMask:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceMask); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDeviceGroupRenderPassBeginInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGroupRenderPassBeginInfo *pstruct = (const VkDeviceGroupRenderPassBeginInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t deviceMask
    IndentSpaces(out, indent);
    *out += "deviceMask:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceMask); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t deviceRenderAreaCount
    IndentSpaces(out, indent);
    *out += "deviceRenderAreaCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceRenderAreaCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkRect2D* pDeviceRenderAreas
    IndentSpaces(out, indent);
    *out += "pDeviceRenderAreas:             ";
    *out += "const VkRect2D* = "; // TEQ
    if (pstruct->pDeviceRenderAreas == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDeviceRenderAreas->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkRect2D>(out, indent+1, 1, "VkRect2D", pstruct_in.pDeviceRenderAreas->GetMetaStructPointer(), "pDeviceRenderAreas", pstruct->deviceRenderAreaCount, false, pstruct_in.pDeviceRenderAreas->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkDeviceGroupCommandBufferBeginInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGroupCommandBufferBeginInfo *pstruct = (const VkDeviceGroupCommandBufferBeginInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t deviceMask
    IndentSpaces(out, indent);
    *out += "deviceMask:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceMask); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDeviceGroupSubmitInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGroupSubmitInfo *pstruct = (const VkDeviceGroupSubmitInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t waitSemaphoreCount
    IndentSpaces(out, indent);
    *out += "waitSemaphoreCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->waitSemaphoreCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pWaitSemaphoreDeviceIndices
    IndentSpaces(out, indent);
    *out += "pWaitSemaphoreDeviceIndices:    ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pWaitSemaphoreDeviceIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pWaitSemaphoreDeviceIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pWaitSemaphoreDeviceIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pWaitSemaphoreDeviceIndices, "pWaitSemaphoreDeviceIndices", pstruct->waitSemaphoreCount,  vinfo_pWaitSemaphoreDeviceIndices);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t commandBufferCount
    IndentSpaces(out, indent);
    *out += "commandBufferCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->commandBufferCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pCommandBufferDeviceMasks
    IndentSpaces(out, indent);
    *out += "pCommandBufferDeviceMasks:      ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pCommandBufferDeviceMasks == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pCommandBufferDeviceMasks.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pCommandBufferDeviceMasks = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pCommandBufferDeviceMasks, "pCommandBufferDeviceMasks", pstruct->commandBufferCount,  vinfo_pCommandBufferDeviceMasks);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t signalSemaphoreCount
    IndentSpaces(out, indent);
    *out += "signalSemaphoreCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->signalSemaphoreCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pSignalSemaphoreDeviceIndices
    IndentSpaces(out, indent);
    *out += "pSignalSemaphoreDeviceIndices:  ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pSignalSemaphoreDeviceIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSignalSemaphoreDeviceIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSignalSemaphoreDeviceIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pSignalSemaphoreDeviceIndices, "pSignalSemaphoreDeviceIndices", pstruct->signalSemaphoreCount,  vinfo_pSignalSemaphoreDeviceIndices);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkDeviceGroupBindSparseInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGroupBindSparseInfo *pstruct = (const VkDeviceGroupBindSparseInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t resourceDeviceIndex
    IndentSpaces(out, indent);
    *out += "resourceDeviceIndex:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->resourceDeviceIndex); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t memoryDeviceIndex
    IndentSpaces(out, indent);
    *out += "memoryDeviceIndex:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->memoryDeviceIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkBindBufferMemoryDeviceGroupInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBindBufferMemoryDeviceGroupInfo *pstruct = (const VkBindBufferMemoryDeviceGroupInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t deviceIndexCount
    IndentSpaces(out, indent);
    *out += "deviceIndexCount:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceIndexCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pDeviceIndices
    IndentSpaces(out, indent);
    *out += "pDeviceIndices:                 ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pDeviceIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDeviceIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pDeviceIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pDeviceIndices, "pDeviceIndices", pstruct->deviceIndexCount,  vinfo_pDeviceIndices);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkBindImageMemoryDeviceGroupInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBindImageMemoryDeviceGroupInfo *pstruct = (const VkBindImageMemoryDeviceGroupInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t deviceIndexCount
    IndentSpaces(out, indent);
    *out += "deviceIndexCount:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceIndexCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pDeviceIndices
    IndentSpaces(out, indent);
    *out += "pDeviceIndices:                 ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pDeviceIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDeviceIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pDeviceIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pDeviceIndices, "pDeviceIndices", pstruct->deviceIndexCount,  vinfo_pDeviceIndices);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t splitInstanceBindRegionCount
    IndentSpaces(out, indent);
    *out += "splitInstanceBindRegionCount:   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->splitInstanceBindRegionCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkRect2D* pSplitInstanceBindRegions
    IndentSpaces(out, indent);
    *out += "pSplitInstanceBindRegions:      ";
    *out += "const VkRect2D* = "; // TEQ
    if (pstruct->pSplitInstanceBindRegions == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSplitInstanceBindRegions->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkRect2D>(out, indent+1, 1, "VkRect2D", pstruct_in.pSplitInstanceBindRegions->GetMetaStructPointer(), "pSplitInstanceBindRegions", pstruct->splitInstanceBindRegionCount, false, pstruct_in.pSplitInstanceBindRegions->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceGroupProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceGroupProperties *pstruct = (const VkPhysicalDeviceGroupProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t physicalDeviceCount
    IndentSpaces(out, indent);
    *out += "physicalDeviceCount:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->physicalDeviceCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkPhysicalDevice physicalDevices
    IndentSpaces(out, indent);
    *out += "physicalDevices:                ";
    *out += "VkPhysicalDevice[";
    UnsignedDecimalToString(out, pstruct->physicalDeviceCount); // DFW
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceGroupProperties, physicalDevices)); // IYY
    ScalarValueToStringStruct vinfo_physicalDevices = {true, false, false, nullptr};
    ArrayToString<HandlePointerDecoder<VkPhysicalDevice>>(out, indent, 0, "VkPhysicalDevice", &pstruct_in.physicalDevices, "physicalDevices", pstruct->physicalDeviceCount, vinfo_physicalDevices); // JPD
    *out += "\n"; // GDS

    // struct member: VkBool32 subsetAllocation
    IndentSpaces(out, indent);
    *out += "subsetAllocation:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->subsetAllocation); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDeviceGroupDeviceCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGroupDeviceCreateInfo *pstruct = (const VkDeviceGroupDeviceCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t physicalDeviceCount
    IndentSpaces(out, indent);
    *out += "physicalDeviceCount:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->physicalDeviceCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkPhysicalDevice* pPhysicalDevices
    IndentSpaces(out, indent);
    *out += "pPhysicalDevices:               ";
    *out += "const VkPhysicalDevice* = "; // TEQ
    if (pstruct->pPhysicalDevices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pPhysicalDevices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pPhysicalDevices = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkPhysicalDevice>>(out, indent, 1, "const VkPhysicalDevice*", &pstruct_in.pPhysicalDevices, "pPhysicalDevices", pstruct->physicalDeviceCount,  vinfo_pPhysicalDevices);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkBufferMemoryRequirementsInfo2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBufferMemoryRequirementsInfo2 *pstruct = (const VkBufferMemoryRequirementsInfo2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkImageMemoryRequirementsInfo2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageMemoryRequirementsInfo2 *pstruct = (const VkImageMemoryRequirementsInfo2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImage image
    IndentSpaces(out, indent);
    *out += "image:                          ";
    *out += "VkImage = "; // TEQ
    AddrToString(out, pstruct_in.image); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkImageSparseMemoryRequirementsInfo2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageSparseMemoryRequirementsInfo2 *pstruct = (const VkImageSparseMemoryRequirementsInfo2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImage image
    IndentSpaces(out, indent);
    *out += "image:                          ";
    *out += "VkImage = "; // TEQ
    AddrToString(out, pstruct_in.image); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkMemoryRequirements2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryRequirements2 *pstruct = (const VkMemoryRequirements2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkMemoryRequirements memoryRequirements
    IndentSpaces(out, indent);
    *out += "memoryRequirements:             ";
    *out += "VkMemoryRequirements = "; // TEQ
    StructureToString(out, *pstruct_in.memoryRequirements, indent+1,  base_addr + offsetof(VkMemoryRequirements2, memoryRequirements)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkSparseImageMemoryRequirements2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSparseImageMemoryRequirements2 *pstruct = (const VkSparseImageMemoryRequirements2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSparseImageMemoryRequirements memoryRequirements
    IndentSpaces(out, indent);
    *out += "memoryRequirements:             ";
    *out += "VkSparseImageMemoryRequirements = "; // TEQ
    StructureToString(out, *pstruct_in.memoryRequirements, indent+1,  base_addr + offsetof(VkSparseImageMemoryRequirements2, memoryRequirements)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFeatures2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceFeatures2 *pstruct = (const VkPhysicalDeviceFeatures2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPhysicalDeviceFeatures features
    IndentSpaces(out, indent);
    *out += "features:                       ";
    *out += "VkPhysicalDeviceFeatures = "; // TEQ
    StructureToString(out, *pstruct_in.features, indent+1,  base_addr + offsetof(VkPhysicalDeviceFeatures2, features)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceProperties2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceProperties2 *pstruct = (const VkPhysicalDeviceProperties2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPhysicalDeviceProperties properties
    IndentSpaces(out, indent);
    *out += "properties:                     ";
    *out += "VkPhysicalDeviceProperties = "; // TEQ
    StructureToString(out, *pstruct_in.properties, indent+1,  base_addr + offsetof(VkPhysicalDeviceProperties2, properties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkFormatProperties2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFormatProperties2 *pstruct = (const VkFormatProperties2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFormatProperties formatProperties
    IndentSpaces(out, indent);
    *out += "formatProperties:               ";
    *out += "VkFormatProperties = "; // TEQ
    StructureToString(out, *pstruct_in.formatProperties, indent+1,  base_addr + offsetof(VkFormatProperties2, formatProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkImageFormatProperties2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageFormatProperties2 *pstruct = (const VkImageFormatProperties2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageFormatProperties imageFormatProperties
    IndentSpaces(out, indent);
    *out += "imageFormatProperties:          ";
    *out += "VkImageFormatProperties = "; // TEQ
    StructureToString(out, *pstruct_in.imageFormatProperties, indent+1,  base_addr + offsetof(VkImageFormatProperties2, imageFormatProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceImageFormatInfo2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceImageFormatInfo2 *pstruct = (const VkPhysicalDeviceImageFormatInfo2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageType type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkImageType = "; // TEQ
    EnumToStringVkImageType(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageTiling tiling
    IndentSpaces(out, indent);
    *out += "tiling:                         ";
    *out += "VkImageTiling = "; // TEQ
    EnumToStringVkImageTiling(out, pstruct->tiling); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->tiling);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags usage
    IndentSpaces(out, indent);
    *out += "usage:                          ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->usage, EnumToStringVkImageUsageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkImageCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkImageCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkImageCreateFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkQueueFamilyProperties2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkQueueFamilyProperties2 *pstruct = (const VkQueueFamilyProperties2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkQueueFamilyProperties queueFamilyProperties
    IndentSpaces(out, indent);
    *out += "queueFamilyProperties:          ";
    *out += "VkQueueFamilyProperties = "; // TEQ
    StructureToString(out, *pstruct_in.queueFamilyProperties, indent+1,  base_addr + offsetof(VkQueueFamilyProperties2, queueFamilyProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMemoryProperties2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMemoryProperties2 *pstruct = (const VkPhysicalDeviceMemoryProperties2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPhysicalDeviceMemoryProperties memoryProperties
    IndentSpaces(out, indent);
    *out += "memoryProperties:               ";
    *out += "VkPhysicalDeviceMemoryProperties = "; // TEQ
    StructureToString(out, *pstruct_in.memoryProperties, indent+1,  base_addr + offsetof(VkPhysicalDeviceMemoryProperties2, memoryProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkSparseImageFormatProperties2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSparseImageFormatProperties2 *pstruct = (const VkSparseImageFormatProperties2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSparseImageFormatProperties properties
    IndentSpaces(out, indent);
    *out += "properties:                     ";
    *out += "VkSparseImageFormatProperties = "; // TEQ
    StructureToString(out, *pstruct_in.properties, indent+1,  base_addr + offsetof(VkSparseImageFormatProperties2, properties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSparseImageFormatInfo2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceSparseImageFormatInfo2 *pstruct = (const VkPhysicalDeviceSparseImageFormatInfo2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageType type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkImageType = "; // TEQ
    EnumToStringVkImageType(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlagBits samples
    IndentSpaces(out, indent);
    *out += "samples:                        ";
    *out += "VkSampleCountFlagBits = "; // TEQ
    EnumToStringVkSampleCountFlagBits(out, pstruct->samples); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->samples);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags usage
    IndentSpaces(out, indent);
    *out += "usage:                          ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->usage, EnumToStringVkImageUsageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkImageTiling tiling
    IndentSpaces(out, indent);
    *out += "tiling:                         ";
    *out += "VkImageTiling = "; // TEQ
    EnumToStringVkImageTiling(out, pstruct->tiling); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->tiling);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDevicePointClippingProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDevicePointClippingProperties *pstruct = (const VkPhysicalDevicePointClippingProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPointClippingBehavior pointClippingBehavior
    IndentSpaces(out, indent);
    *out += "pointClippingBehavior:          ";
    *out += "VkPointClippingBehavior = "; // TEQ
    EnumToStringVkPointClippingBehavior(out, pstruct->pointClippingBehavior); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->pointClippingBehavior);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkInputAttachmentAspectReference &pstruct_in, int indent, uint64_t base_addr)
{
    const VkInputAttachmentAspectReference *pstruct = (const VkInputAttachmentAspectReference *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t subpass
    IndentSpaces(out, indent);
    *out += "subpass:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subpass); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t inputAttachmentIndex
    IndentSpaces(out, indent);
    *out += "inputAttachmentIndex:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->inputAttachmentIndex); // UYW
    *out += "\n"; // GDS

    // struct member: VkImageAspectFlags aspectMask
    IndentSpaces(out, indent);
    *out += "aspectMask:                     ";
    *out += "VkImageAspectFlags = "; // TEQ
    FlagsToString(out, pstruct->aspectMask, EnumToStringVkImageAspectFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkRenderPassInputAttachmentAspectCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRenderPassInputAttachmentAspectCreateInfo *pstruct = (const VkRenderPassInputAttachmentAspectCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t aspectReferenceCount
    IndentSpaces(out, indent);
    *out += "aspectReferenceCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->aspectReferenceCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkInputAttachmentAspectReference* pAspectReferences
    IndentSpaces(out, indent);
    *out += "pAspectReferences:              ";
    *out += "const VkInputAttachmentAspectReference* = "; // TEQ
    if (pstruct->pAspectReferences == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAspectReferences->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkInputAttachmentAspectReference>(out, indent+1, 1, "VkInputAttachmentAspectReference", pstruct_in.pAspectReferences->GetMetaStructPointer(), "pAspectReferences", pstruct->aspectReferenceCount, false, pstruct_in.pAspectReferences->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkImageViewUsageCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageViewUsageCreateInfo *pstruct = (const VkImageViewUsageCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags usage
    IndentSpaces(out, indent);
    *out += "usage:                          ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->usage, EnumToStringVkImageUsageFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPipelineTessellationDomainOriginStateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineTessellationDomainOriginStateCreateInfo *pstruct = (const VkPipelineTessellationDomainOriginStateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkTessellationDomainOrigin domainOrigin
    IndentSpaces(out, indent);
    *out += "domainOrigin:                   ";
    *out += "VkTessellationDomainOrigin = "; // TEQ
    EnumToStringVkTessellationDomainOrigin(out, pstruct->domainOrigin); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->domainOrigin);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkRenderPassMultiviewCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRenderPassMultiviewCreateInfo *pstruct = (const VkRenderPassMultiviewCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t subpassCount
    IndentSpaces(out, indent);
    *out += "subpassCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subpassCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pViewMasks
    IndentSpaces(out, indent);
    *out += "pViewMasks:                     ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pViewMasks == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pViewMasks.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pViewMasks = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pViewMasks, "pViewMasks", pstruct->subpassCount,  vinfo_pViewMasks);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t dependencyCount
    IndentSpaces(out, indent);
    *out += "dependencyCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dependencyCount); // UYW
    *out += "\n"; // GDS

    // struct member: const int32_t* pViewOffsets
    IndentSpaces(out, indent);
    *out += "pViewOffsets:                   ";
    *out += "const int32_t* = "; // TEQ
    if (pstruct->pViewOffsets == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pViewOffsets.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pViewOffsets = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<int32_t>>(out, indent, 1, "const int32_t*", &pstruct_in.pViewOffsets, "pViewOffsets", pstruct->dependencyCount,  vinfo_pViewOffsets);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t correlationMaskCount
    IndentSpaces(out, indent);
    *out += "correlationMaskCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->correlationMaskCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pCorrelationMasks
    IndentSpaces(out, indent);
    *out += "pCorrelationMasks:              ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pCorrelationMasks == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pCorrelationMasks.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pCorrelationMasks = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pCorrelationMasks, "pCorrelationMasks", pstruct->correlationMaskCount,  vinfo_pCorrelationMasks);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMultiviewFeatures &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMultiviewFeatures *pstruct = (const VkPhysicalDeviceMultiviewFeatures *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 multiview
    IndentSpaces(out, indent);
    *out += "multiview:                      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->multiview); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 multiviewGeometryShader
    IndentSpaces(out, indent);
    *out += "multiviewGeometryShader:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->multiviewGeometryShader); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 multiviewTessellationShader
    IndentSpaces(out, indent);
    *out += "multiviewTessellationShader:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->multiviewTessellationShader); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMultiviewProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMultiviewProperties *pstruct = (const VkPhysicalDeviceMultiviewProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxMultiviewViewCount
    IndentSpaces(out, indent);
    *out += "maxMultiviewViewCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxMultiviewViewCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxMultiviewInstanceIndex
    IndentSpaces(out, indent);
    *out += "maxMultiviewInstanceIndex:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxMultiviewInstanceIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceVariablePointersFeatures &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceVariablePointersFeatures *pstruct = (const VkPhysicalDeviceVariablePointersFeatures *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 variablePointersStorageBuffer
    IndentSpaces(out, indent);
    *out += "variablePointersStorageBuffer:  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->variablePointersStorageBuffer); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 variablePointers
    IndentSpaces(out, indent);
    *out += "variablePointers:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->variablePointers); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceProtectedMemoryFeatures &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceProtectedMemoryFeatures *pstruct = (const VkPhysicalDeviceProtectedMemoryFeatures *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 protectedMemory
    IndentSpaces(out, indent);
    *out += "protectedMemory:                ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->protectedMemory); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceProtectedMemoryProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceProtectedMemoryProperties *pstruct = (const VkPhysicalDeviceProtectedMemoryProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 protectedNoFault
    IndentSpaces(out, indent);
    *out += "protectedNoFault:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->protectedNoFault); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDeviceQueueInfo2 &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceQueueInfo2 *pstruct = (const VkDeviceQueueInfo2 *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceQueueCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDeviceQueueCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkDeviceQueueCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t queueFamilyIndex
    IndentSpaces(out, indent);
    *out += "queueFamilyIndex:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueFamilyIndex); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t queueIndex
    IndentSpaces(out, indent);
    *out += "queueIndex:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkProtectedSubmitInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkProtectedSubmitInfo *pstruct = (const VkProtectedSubmitInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 protectedSubmit
    IndentSpaces(out, indent);
    *out += "protectedSubmit:                ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->protectedSubmit); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSamplerYcbcrConversionCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSamplerYcbcrConversionCreateInfo *pstruct = (const VkSamplerYcbcrConversionCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSamplerYcbcrModelConversion ycbcrModel
    IndentSpaces(out, indent);
    *out += "ycbcrModel:                     ";
    *out += "VkSamplerYcbcrModelConversion = "; // TEQ
    EnumToStringVkSamplerYcbcrModelConversion(out, pstruct->ycbcrModel); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->ycbcrModel);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSamplerYcbcrRange ycbcrRange
    IndentSpaces(out, indent);
    *out += "ycbcrRange:                     ";
    *out += "VkSamplerYcbcrRange = "; // TEQ
    EnumToStringVkSamplerYcbcrRange(out, pstruct->ycbcrRange); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->ycbcrRange);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkComponentMapping components
    IndentSpaces(out, indent);
    *out += "components:                     ";
    *out += "VkComponentMapping = "; // TEQ
    StructureToString(out, *pstruct_in.components, indent+1,  base_addr + offsetof(VkSamplerYcbcrConversionCreateInfo, components)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkChromaLocation xChromaOffset
    IndentSpaces(out, indent);
    *out += "xChromaOffset:                  ";
    *out += "VkChromaLocation = "; // TEQ
    EnumToStringVkChromaLocation(out, pstruct->xChromaOffset); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->xChromaOffset);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkChromaLocation yChromaOffset
    IndentSpaces(out, indent);
    *out += "yChromaOffset:                  ";
    *out += "VkChromaLocation = "; // TEQ
    EnumToStringVkChromaLocation(out, pstruct->yChromaOffset); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->yChromaOffset);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkFilter chromaFilter
    IndentSpaces(out, indent);
    *out += "chromaFilter:                   ";
    *out += "VkFilter = "; // TEQ
    EnumToStringVkFilter(out, pstruct->chromaFilter); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->chromaFilter);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 forceExplicitReconstruction
    IndentSpaces(out, indent);
    *out += "forceExplicitReconstruction:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->forceExplicitReconstruction); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSamplerYcbcrConversionInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSamplerYcbcrConversionInfo *pstruct = (const VkSamplerYcbcrConversionInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSamplerYcbcrConversion conversion
    IndentSpaces(out, indent);
    *out += "conversion:                     ";
    *out += "VkSamplerYcbcrConversion = "; // TEQ
    AddrToString(out, pstruct_in.conversion); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkBindImagePlaneMemoryInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBindImagePlaneMemoryInfo *pstruct = (const VkBindImagePlaneMemoryInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageAspectFlagBits planeAspect
    IndentSpaces(out, indent);
    *out += "planeAspect:                    ";
    *out += "VkImageAspectFlagBits = "; // TEQ
    EnumToStringVkImageAspectFlagBits(out, pstruct->planeAspect); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->planeAspect);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkImagePlaneMemoryRequirementsInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImagePlaneMemoryRequirementsInfo *pstruct = (const VkImagePlaneMemoryRequirementsInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageAspectFlagBits planeAspect
    IndentSpaces(out, indent);
    *out += "planeAspect:                    ";
    *out += "VkImageAspectFlagBits = "; // TEQ
    EnumToStringVkImageAspectFlagBits(out, pstruct->planeAspect); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->planeAspect);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSamplerYcbcrConversionFeatures &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceSamplerYcbcrConversionFeatures *pstruct = (const VkPhysicalDeviceSamplerYcbcrConversionFeatures *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 samplerYcbcrConversion
    IndentSpaces(out, indent);
    *out += "samplerYcbcrConversion:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->samplerYcbcrConversion); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSamplerYcbcrConversionImageFormatProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSamplerYcbcrConversionImageFormatProperties *pstruct = (const VkSamplerYcbcrConversionImageFormatProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t combinedImageSamplerDescriptorCount
    IndentSpaces(out, indent);
    *out += "combinedImageSamplerDescriptorCount: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->combinedImageSamplerDescriptorCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDescriptorUpdateTemplateEntry &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorUpdateTemplateEntry *pstruct = (const VkDescriptorUpdateTemplateEntry *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t dstBinding
    IndentSpaces(out, indent);
    *out += "dstBinding:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstBinding); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t dstArrayElement
    IndentSpaces(out, indent);
    *out += "dstArrayElement:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstArrayElement); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t descriptorCount
    IndentSpaces(out, indent);
    *out += "descriptorCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->descriptorCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkDescriptorType descriptorType
    IndentSpaces(out, indent);
    *out += "descriptorType:                 ";
    *out += "VkDescriptorType = "; // TEQ
    EnumToStringVkDescriptorType(out, pstruct->descriptorType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->descriptorType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: size_t offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->offset); // UYW
    *out += "\n"; // GDS

    // struct member: size_t stride
    IndentSpaces(out, indent);
    *out += "stride:                         ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->stride); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDescriptorUpdateTemplateCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorUpdateTemplateCreateInfo *pstruct = (const VkDescriptorUpdateTemplateCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDescriptorUpdateTemplateCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDescriptorUpdateTemplateCreateFlags = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t descriptorUpdateEntryCount
    IndentSpaces(out, indent);
    *out += "descriptorUpdateEntryCount:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->descriptorUpdateEntryCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries
    IndentSpaces(out, indent);
    *out += "pDescriptorUpdateEntries:       ";
    *out += "const VkDescriptorUpdateTemplateEntry* = "; // TEQ
    if (pstruct->pDescriptorUpdateEntries == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDescriptorUpdateEntries->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDescriptorUpdateTemplateEntry>(out, indent+1, 1, "VkDescriptorUpdateTemplateEntry", pstruct_in.pDescriptorUpdateEntries->GetMetaStructPointer(), "pDescriptorUpdateEntries", pstruct->descriptorUpdateEntryCount, false, pstruct_in.pDescriptorUpdateEntries->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: VkDescriptorUpdateTemplateType templateType
    IndentSpaces(out, indent);
    *out += "templateType:                   ";
    *out += "VkDescriptorUpdateTemplateType = "; // TEQ
    EnumToStringVkDescriptorUpdateTemplateType(out, pstruct->templateType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->templateType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkDescriptorSetLayout descriptorSetLayout
    IndentSpaces(out, indent);
    *out += "descriptorSetLayout:            ";
    *out += "VkDescriptorSetLayout = "; // TEQ
    AddrToString(out, pstruct_in.descriptorSetLayout); // PAQ
    *out += "\n"; // GDS

    // struct member: VkPipelineBindPoint pipelineBindPoint
    IndentSpaces(out, indent);
    *out += "pipelineBindPoint:              ";
    *out += "VkPipelineBindPoint = "; // TEQ
    EnumToStringVkPipelineBindPoint(out, pstruct->pipelineBindPoint); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->pipelineBindPoint);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkPipelineLayout pipelineLayout
    IndentSpaces(out, indent);
    *out += "pipelineLayout:                 ";
    *out += "VkPipelineLayout = "; // TEQ
    AddrToString(out, pstruct_in.pipelineLayout); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t set
    IndentSpaces(out, indent);
    *out += "set:                            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->set); // UYW
}

void StructureToString(std::string* out, const Decoded_VkExternalMemoryProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalMemoryProperties *pstruct = (const VkExternalMemoryProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkExternalMemoryFeatureFlags externalMemoryFeatures
    IndentSpaces(out, indent);
    *out += "externalMemoryFeatures:         ";
    *out += "VkExternalMemoryFeatureFlags = "; // TEQ
    FlagsToString(out, pstruct->externalMemoryFeatures, EnumToStringVkExternalMemoryFeatureFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes
    IndentSpaces(out, indent);
    *out += "exportFromImportedHandleTypes:  ";
    *out += "VkExternalMemoryHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->exportFromImportedHandleTypes, EnumToStringVkExternalMemoryHandleTypeFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlags compatibleHandleTypes
    IndentSpaces(out, indent);
    *out += "compatibleHandleTypes:          ";
    *out += "VkExternalMemoryHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->compatibleHandleTypes, EnumToStringVkExternalMemoryHandleTypeFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalImageFormatInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceExternalImageFormatInfo *pstruct = (const VkPhysicalDeviceExternalImageFormatInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalMemoryHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalMemoryHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkExternalImageFormatProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalImageFormatProperties *pstruct = (const VkExternalImageFormatProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryProperties externalMemoryProperties
    IndentSpaces(out, indent);
    *out += "externalMemoryProperties:       ";
    *out += "VkExternalMemoryProperties = "; // TEQ
    StructureToString(out, *pstruct_in.externalMemoryProperties, indent+1,  base_addr + offsetof(VkExternalImageFormatProperties, externalMemoryProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalBufferInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceExternalBufferInfo *pstruct = (const VkPhysicalDeviceExternalBufferInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBufferCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkBufferCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkBufferCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkBufferUsageFlags usage
    IndentSpaces(out, indent);
    *out += "usage:                          ";
    *out += "VkBufferUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->usage, EnumToStringVkBufferUsageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalMemoryHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalMemoryHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkExternalBufferProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalBufferProperties *pstruct = (const VkExternalBufferProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryProperties externalMemoryProperties
    IndentSpaces(out, indent);
    *out += "externalMemoryProperties:       ";
    *out += "VkExternalMemoryProperties = "; // TEQ
    StructureToString(out, *pstruct_in.externalMemoryProperties, indent+1,  base_addr + offsetof(VkExternalBufferProperties, externalMemoryProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceIDProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceIDProperties *pstruct = (const VkPhysicalDeviceIDProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint8_t deviceUUID
    IndentSpaces(out, indent);
    *out += "deviceUUID:                     ";
    *out += "uint8_t[";
    *out += "VK_UUID_SIZE"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceIDProperties, deviceUUID)); // IYY
    ScalarValueToStringStruct vinfo_deviceUUID = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint8_t>>(out, indent, 0, "uint8_t", &pstruct_in.deviceUUID, "deviceUUID", VK_UUID_SIZE, vinfo_deviceUUID); // JPE
    *out += "\n"; // GDS

    // struct member: uint8_t driverUUID
    IndentSpaces(out, indent);
    *out += "driverUUID:                     ";
    *out += "uint8_t[";
    *out += "VK_UUID_SIZE"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceIDProperties, driverUUID)); // IYY
    ScalarValueToStringStruct vinfo_driverUUID = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint8_t>>(out, indent, 0, "uint8_t", &pstruct_in.driverUUID, "driverUUID", VK_UUID_SIZE, vinfo_driverUUID); // JPE
    *out += "\n"; // GDS

    // struct member: uint8_t deviceLUID
    IndentSpaces(out, indent);
    *out += "deviceLUID:                     ";
    *out += "uint8_t[";
    *out += "VK_LUID_SIZE"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceIDProperties, deviceLUID)); // IYY
    ScalarValueToStringStruct vinfo_deviceLUID = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint8_t>>(out, indent, 0, "uint8_t", &pstruct_in.deviceLUID, "deviceLUID", VK_LUID_SIZE, vinfo_deviceLUID); // JPE
    *out += "\n"; // GDS

    // struct member: uint32_t deviceNodeMask
    IndentSpaces(out, indent);
    *out += "deviceNodeMask:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceNodeMask); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 deviceLUIDValid
    IndentSpaces(out, indent);
    *out += "deviceLUIDValid:                ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->deviceLUIDValid); //EQA
}

void StructureToString(std::string* out, const Decoded_VkExternalMemoryImageCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalMemoryImageCreateInfo *pstruct = (const VkExternalMemoryImageCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlags handleTypes
    IndentSpaces(out, indent);
    *out += "handleTypes:                    ";
    *out += "VkExternalMemoryHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->handleTypes, EnumToStringVkExternalMemoryHandleTypeFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkExternalMemoryBufferCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalMemoryBufferCreateInfo *pstruct = (const VkExternalMemoryBufferCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlags handleTypes
    IndentSpaces(out, indent);
    *out += "handleTypes:                    ";
    *out += "VkExternalMemoryHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->handleTypes, EnumToStringVkExternalMemoryHandleTypeFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkExportMemoryAllocateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExportMemoryAllocateInfo *pstruct = (const VkExportMemoryAllocateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlags handleTypes
    IndentSpaces(out, indent);
    *out += "handleTypes:                    ";
    *out += "VkExternalMemoryHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->handleTypes, EnumToStringVkExternalMemoryHandleTypeFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalFenceInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceExternalFenceInfo *pstruct = (const VkPhysicalDeviceExternalFenceInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalFenceHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalFenceHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalFenceHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkExternalFenceProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalFenceProperties *pstruct = (const VkExternalFenceProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes
    IndentSpaces(out, indent);
    *out += "exportFromImportedHandleTypes:  ";
    *out += "VkExternalFenceHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->exportFromImportedHandleTypes, EnumToStringVkExternalFenceHandleTypeFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalFenceHandleTypeFlags compatibleHandleTypes
    IndentSpaces(out, indent);
    *out += "compatibleHandleTypes:          ";
    *out += "VkExternalFenceHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->compatibleHandleTypes, EnumToStringVkExternalFenceHandleTypeFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalFenceFeatureFlags externalFenceFeatures
    IndentSpaces(out, indent);
    *out += "externalFenceFeatures:          ";
    *out += "VkExternalFenceFeatureFlags = "; // TEQ
    FlagsToString(out, pstruct->externalFenceFeatures, EnumToStringVkExternalFenceFeatureFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkExportFenceCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExportFenceCreateInfo *pstruct = (const VkExportFenceCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalFenceHandleTypeFlags handleTypes
    IndentSpaces(out, indent);
    *out += "handleTypes:                    ";
    *out += "VkExternalFenceHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->handleTypes, EnumToStringVkExternalFenceHandleTypeFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkExportSemaphoreCreateInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExportSemaphoreCreateInfo *pstruct = (const VkExportSemaphoreCreateInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalSemaphoreHandleTypeFlags handleTypes
    IndentSpaces(out, indent);
    *out += "handleTypes:                    ";
    *out += "VkExternalSemaphoreHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->handleTypes, EnumToStringVkExternalSemaphoreHandleTypeFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalSemaphoreInfo &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceExternalSemaphoreInfo *pstruct = (const VkPhysicalDeviceExternalSemaphoreInfo *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalSemaphoreHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalSemaphoreHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalSemaphoreHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkExternalSemaphoreProperties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalSemaphoreProperties *pstruct = (const VkExternalSemaphoreProperties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes
    IndentSpaces(out, indent);
    *out += "exportFromImportedHandleTypes:  ";
    *out += "VkExternalSemaphoreHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->exportFromImportedHandleTypes, EnumToStringVkExternalSemaphoreHandleTypeFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes
    IndentSpaces(out, indent);
    *out += "compatibleHandleTypes:          ";
    *out += "VkExternalSemaphoreHandleTypeFlags = "; // TEQ
    FlagsToString(out, pstruct->compatibleHandleTypes, EnumToStringVkExternalSemaphoreHandleTypeFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures
    IndentSpaces(out, indent);
    *out += "externalSemaphoreFeatures:      ";
    *out += "VkExternalSemaphoreFeatureFlags = "; // TEQ
    FlagsToString(out, pstruct->externalSemaphoreFeatures, EnumToStringVkExternalSemaphoreFeatureFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMaintenance3Properties &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMaintenance3Properties *pstruct = (const VkPhysicalDeviceMaintenance3Properties *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerSetDescriptors
    IndentSpaces(out, indent);
    *out += "maxPerSetDescriptors:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerSetDescriptors); // UYW
    *out += "\n"; // GDS

    // struct member: VkDeviceSize maxMemoryAllocationSize
    IndentSpaces(out, indent);
    *out += "maxMemoryAllocationSize:        ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->maxMemoryAllocationSize); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDescriptorSetLayoutSupport &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorSetLayoutSupport *pstruct = (const VkDescriptorSetLayoutSupport *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 supported
    IndentSpaces(out, indent);
    *out += "supported:                      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->supported); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderDrawParametersFeatures &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderDrawParametersFeatures *pstruct = (const VkPhysicalDeviceShaderDrawParametersFeatures *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderDrawParameters
    IndentSpaces(out, indent);
    *out += "shaderDrawParameters:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderDrawParameters); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSurfaceCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSurfaceCapabilitiesKHR *pstruct = (const VkSurfaceCapabilitiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t minImageCount
    IndentSpaces(out, indent);
    *out += "minImageCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minImageCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxImageCount
    IndentSpaces(out, indent);
    *out += "maxImageCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxImageCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkExtent2D currentExtent
    IndentSpaces(out, indent);
    *out += "currentExtent:                  ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.currentExtent, indent+1,  base_addr + offsetof(VkSurfaceCapabilitiesKHR, currentExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D minImageExtent
    IndentSpaces(out, indent);
    *out += "minImageExtent:                 ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.minImageExtent, indent+1,  base_addr + offsetof(VkSurfaceCapabilitiesKHR, minImageExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D maxImageExtent
    IndentSpaces(out, indent);
    *out += "maxImageExtent:                 ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.maxImageExtent, indent+1,  base_addr + offsetof(VkSurfaceCapabilitiesKHR, maxImageExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t maxImageArrayLayers
    IndentSpaces(out, indent);
    *out += "maxImageArrayLayers:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxImageArrayLayers); // UYW
    *out += "\n"; // GDS

    // struct member: VkSurfaceTransformFlagsKHR supportedTransforms
    IndentSpaces(out, indent);
    *out += "supportedTransforms:            ";
    *out += "VkSurfaceTransformFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->supportedTransforms, EnumToStringVkSurfaceTransformFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: VkSurfaceTransformFlagBitsKHR currentTransform
    IndentSpaces(out, indent);
    *out += "currentTransform:               ";
    *out += "VkSurfaceTransformFlagBitsKHR = "; // TEQ
    EnumToStringVkSurfaceTransformFlagBitsKHR(out, pstruct->currentTransform); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->currentTransform);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkCompositeAlphaFlagsKHR supportedCompositeAlpha
    IndentSpaces(out, indent);
    *out += "supportedCompositeAlpha:        ";
    *out += "VkCompositeAlphaFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->supportedCompositeAlpha, EnumToStringVkCompositeAlphaFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags supportedUsageFlags
    IndentSpaces(out, indent);
    *out += "supportedUsageFlags:            ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->supportedUsageFlags, EnumToStringVkImageUsageFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkSurfaceFormatKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSurfaceFormatKHR *pstruct = (const VkSurfaceFormatKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkColorSpaceKHR colorSpace
    IndentSpaces(out, indent);
    *out += "colorSpace:                     ";
    *out += "VkColorSpaceKHR = "; // TEQ
    EnumToStringVkColorSpaceKHR(out, pstruct->colorSpace); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->colorSpace);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkSwapchainCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSwapchainCreateInfoKHR *pstruct = (const VkSwapchainCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSwapchainCreateFlagsKHR flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSwapchainCreateFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSwapchainCreateFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: VkSurfaceKHR surface
    IndentSpaces(out, indent);
    *out += "surface:                        ";
    *out += "VkSurfaceKHR = "; // TEQ
    AddrToString(out, pstruct_in.surface); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t minImageCount
    IndentSpaces(out, indent);
    *out += "minImageCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minImageCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkFormat imageFormat
    IndentSpaces(out, indent);
    *out += "imageFormat:                    ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->imageFormat); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->imageFormat);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkColorSpaceKHR imageColorSpace
    IndentSpaces(out, indent);
    *out += "imageColorSpace:                ";
    *out += "VkColorSpaceKHR = "; // TEQ
    EnumToStringVkColorSpaceKHR(out, pstruct->imageColorSpace); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->imageColorSpace);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkExtent2D imageExtent
    IndentSpaces(out, indent);
    *out += "imageExtent:                    ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.imageExtent, indent+1,  base_addr + offsetof(VkSwapchainCreateInfoKHR, imageExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t imageArrayLayers
    IndentSpaces(out, indent);
    *out += "imageArrayLayers:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->imageArrayLayers); // UYW
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags imageUsage
    IndentSpaces(out, indent);
    *out += "imageUsage:                     ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->imageUsage, EnumToStringVkImageUsageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSharingMode imageSharingMode
    IndentSpaces(out, indent);
    *out += "imageSharingMode:               ";
    *out += "VkSharingMode = "; // TEQ
    EnumToStringVkSharingMode(out, pstruct->imageSharingMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->imageSharingMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t queueFamilyIndexCount
    IndentSpaces(out, indent);
    *out += "queueFamilyIndexCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueFamilyIndexCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pQueueFamilyIndices
    IndentSpaces(out, indent);
    *out += "pQueueFamilyIndices:            ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pQueueFamilyIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pQueueFamilyIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pQueueFamilyIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pQueueFamilyIndices, "pQueueFamilyIndices", pstruct->queueFamilyIndexCount,  vinfo_pQueueFamilyIndices);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: VkSurfaceTransformFlagBitsKHR preTransform
    IndentSpaces(out, indent);
    *out += "preTransform:                   ";
    *out += "VkSurfaceTransformFlagBitsKHR = "; // TEQ
    EnumToStringVkSurfaceTransformFlagBitsKHR(out, pstruct->preTransform); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->preTransform);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkCompositeAlphaFlagBitsKHR compositeAlpha
    IndentSpaces(out, indent);
    *out += "compositeAlpha:                 ";
    *out += "VkCompositeAlphaFlagBitsKHR = "; // TEQ
    EnumToStringVkCompositeAlphaFlagBitsKHR(out, pstruct->compositeAlpha); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->compositeAlpha);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkPresentModeKHR presentMode
    IndentSpaces(out, indent);
    *out += "presentMode:                    ";
    *out += "VkPresentModeKHR = "; // TEQ
    EnumToStringVkPresentModeKHR(out, pstruct->presentMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->presentMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 clipped
    IndentSpaces(out, indent);
    *out += "clipped:                        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->clipped); //EQA
    *out += "\n"; // GDS

    // struct member: VkSwapchainKHR oldSwapchain
    IndentSpaces(out, indent);
    *out += "oldSwapchain:                   ";
    *out += "VkSwapchainKHR = "; // TEQ
    AddrToString(out, pstruct_in.oldSwapchain); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkPresentInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPresentInfoKHR *pstruct = (const VkPresentInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t waitSemaphoreCount
    IndentSpaces(out, indent);
    *out += "waitSemaphoreCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->waitSemaphoreCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSemaphore* pWaitSemaphores
    IndentSpaces(out, indent);
    *out += "pWaitSemaphores:                ";
    *out += "const VkSemaphore* = "; // TEQ
    if (pstruct->pWaitSemaphores == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pWaitSemaphores.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pWaitSemaphores = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkSemaphore>>(out, indent, 1, "const VkSemaphore*", &pstruct_in.pWaitSemaphores, "pWaitSemaphores", pstruct->waitSemaphoreCount,  vinfo_pWaitSemaphores);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t swapchainCount
    IndentSpaces(out, indent);
    *out += "swapchainCount:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->swapchainCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSwapchainKHR* pSwapchains
    IndentSpaces(out, indent);
    *out += "pSwapchains:                    ";
    *out += "const VkSwapchainKHR* = "; // TEQ
    if (pstruct->pSwapchains == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSwapchains.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSwapchains = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkSwapchainKHR>>(out, indent, 1, "const VkSwapchainKHR*", &pstruct_in.pSwapchains, "pSwapchains", pstruct->swapchainCount,  vinfo_pSwapchains);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const uint32_t* pImageIndices
    IndentSpaces(out, indent);
    *out += "pImageIndices:                  ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pImageIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pImageIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pImageIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pImageIndices, "pImageIndices", pstruct->swapchainCount,  vinfo_pImageIndices);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: VkResult* pResults
    IndentSpaces(out, indent);
    *out += "pResults:                       ";
    *out += "VkResult* = "; // TEQ
    if (pstruct->pResults == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pResults.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pResults = {false, true, false, EnumToStringVkResult};
        ArrayToString<PointerDecoder<VkResult>>(out, indent, 1, "VkResult*", &pstruct_in.pResults, "pResults", pstruct->swapchainCount,  vinfo_pResults);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkImageSwapchainCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageSwapchainCreateInfoKHR *pstruct = (const VkImageSwapchainCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSwapchainKHR swapchain
    IndentSpaces(out, indent);
    *out += "swapchain:                      ";
    *out += "VkSwapchainKHR = "; // TEQ
    AddrToString(out, pstruct_in.swapchain); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkBindImageMemorySwapchainInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBindImageMemorySwapchainInfoKHR *pstruct = (const VkBindImageMemorySwapchainInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSwapchainKHR swapchain
    IndentSpaces(out, indent);
    *out += "swapchain:                      ";
    *out += "VkSwapchainKHR = "; // TEQ
    AddrToString(out, pstruct_in.swapchain); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t imageIndex
    IndentSpaces(out, indent);
    *out += "imageIndex:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->imageIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkAcquireNextImageInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAcquireNextImageInfoKHR *pstruct = (const VkAcquireNextImageInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSwapchainKHR swapchain
    IndentSpaces(out, indent);
    *out += "swapchain:                      ";
    *out += "VkSwapchainKHR = "; // TEQ
    AddrToString(out, pstruct_in.swapchain); // PAQ
    *out += "\n"; // GDS

    // struct member: uint64_t timeout
    IndentSpaces(out, indent);
    *out += "timeout:                        ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->timeout); // UYW
    *out += "\n"; // GDS

    // struct member: VkSemaphore semaphore
    IndentSpaces(out, indent);
    *out += "semaphore:                      ";
    *out += "VkSemaphore = "; // TEQ
    AddrToString(out, pstruct_in.semaphore); // PAQ
    *out += "\n"; // GDS

    // struct member: VkFence fence
    IndentSpaces(out, indent);
    *out += "fence:                          ";
    *out += "VkFence = "; // TEQ
    AddrToString(out, pstruct_in.fence); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t deviceMask
    IndentSpaces(out, indent);
    *out += "deviceMask:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceMask); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDeviceGroupPresentCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGroupPresentCapabilitiesKHR *pstruct = (const VkDeviceGroupPresentCapabilitiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t presentMask
    IndentSpaces(out, indent);
    *out += "presentMask:                    ";
    *out += "uint32_t[";
    *out += "VK_MAX_DEVICE_GROUP_SIZE"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkDeviceGroupPresentCapabilitiesKHR, presentMask)); // IYY
    ScalarValueToStringStruct vinfo_presentMask = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint32_t>>(out, indent, 0, "uint32_t", &pstruct_in.presentMask, "presentMask", VK_MAX_DEVICE_GROUP_SIZE, vinfo_presentMask); // JPE
    *out += "\n"; // GDS

    // struct member: VkDeviceGroupPresentModeFlagsKHR modes
    IndentSpaces(out, indent);
    *out += "modes:                          ";
    *out += "VkDeviceGroupPresentModeFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->modes, EnumToStringVkDeviceGroupPresentModeFlagBitsKHR); // URW
}

void StructureToString(std::string* out, const Decoded_VkDeviceGroupPresentInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGroupPresentInfoKHR *pstruct = (const VkDeviceGroupPresentInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t swapchainCount
    IndentSpaces(out, indent);
    *out += "swapchainCount:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->swapchainCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pDeviceMasks
    IndentSpaces(out, indent);
    *out += "pDeviceMasks:                   ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pDeviceMasks == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDeviceMasks.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pDeviceMasks = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pDeviceMasks, "pDeviceMasks", pstruct->swapchainCount,  vinfo_pDeviceMasks);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceGroupPresentModeFlagBitsKHR mode
    IndentSpaces(out, indent);
    *out += "mode:                           ";
    *out += "VkDeviceGroupPresentModeFlagBitsKHR = "; // TEQ
    EnumToStringVkDeviceGroupPresentModeFlagBitsKHR(out, pstruct->mode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->mode);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkDeviceGroupSwapchainCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGroupSwapchainCreateInfoKHR *pstruct = (const VkDeviceGroupSwapchainCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceGroupPresentModeFlagsKHR modes
    IndentSpaces(out, indent);
    *out += "modes:                          ";
    *out += "VkDeviceGroupPresentModeFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->modes, EnumToStringVkDeviceGroupPresentModeFlagBitsKHR); // URW
}

void StructureToString(std::string* out, const Decoded_VkDisplayPropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayPropertiesKHR *pstruct = (const VkDisplayPropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDisplayKHR display
    IndentSpaces(out, indent);
    *out += "display:                        ";
    *out += "VkDisplayKHR = "; // TEQ
    AddrToString(out, pstruct_in.display); // PAQ
    *out += "\n"; // GDS

    // struct member: const char* displayName
    IndentSpaces(out, indent);
    *out += "displayName:                    ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->displayName); // TGI
    *out += "\n"; // GDS

    // struct member: VkExtent2D physicalDimensions
    IndentSpaces(out, indent);
    *out += "physicalDimensions:             ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.physicalDimensions, indent+1,  base_addr + offsetof(VkDisplayPropertiesKHR, physicalDimensions)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D physicalResolution
    IndentSpaces(out, indent);
    *out += "physicalResolution:             ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.physicalResolution, indent+1,  base_addr + offsetof(VkDisplayPropertiesKHR, physicalResolution)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkSurfaceTransformFlagsKHR supportedTransforms
    IndentSpaces(out, indent);
    *out += "supportedTransforms:            ";
    *out += "VkSurfaceTransformFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->supportedTransforms, EnumToStringVkSurfaceTransformFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: VkBool32 planeReorderPossible
    IndentSpaces(out, indent);
    *out += "planeReorderPossible:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->planeReorderPossible); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 persistentContent
    IndentSpaces(out, indent);
    *out += "persistentContent:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->persistentContent); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDisplayModeParametersKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayModeParametersKHR *pstruct = (const VkDisplayModeParametersKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkExtent2D visibleRegion
    IndentSpaces(out, indent);
    *out += "visibleRegion:                  ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.visibleRegion, indent+1,  base_addr + offsetof(VkDisplayModeParametersKHR, visibleRegion)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t refreshRate
    IndentSpaces(out, indent);
    *out += "refreshRate:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->refreshRate); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDisplayModePropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayModePropertiesKHR *pstruct = (const VkDisplayModePropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDisplayModeKHR displayMode
    IndentSpaces(out, indent);
    *out += "displayMode:                    ";
    *out += "VkDisplayModeKHR = "; // TEQ
    AddrToString(out, pstruct_in.displayMode); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDisplayModeParametersKHR parameters
    IndentSpaces(out, indent);
    *out += "parameters:                     ";
    *out += "VkDisplayModeParametersKHR = "; // TEQ
    StructureToString(out, *pstruct_in.parameters, indent+1,  base_addr + offsetof(VkDisplayModePropertiesKHR, parameters)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkDisplayModeCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayModeCreateInfoKHR *pstruct = (const VkDisplayModeCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDisplayModeCreateFlagsKHR flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDisplayModeCreateFlagsKHR = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkDisplayModeParametersKHR parameters
    IndentSpaces(out, indent);
    *out += "parameters:                     ";
    *out += "VkDisplayModeParametersKHR = "; // TEQ
    StructureToString(out, *pstruct_in.parameters, indent+1,  base_addr + offsetof(VkDisplayModeCreateInfoKHR, parameters)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkDisplayPlaneCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayPlaneCapabilitiesKHR *pstruct = (const VkDisplayPlaneCapabilitiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDisplayPlaneAlphaFlagsKHR supportedAlpha
    IndentSpaces(out, indent);
    *out += "supportedAlpha:                 ";
    *out += "VkDisplayPlaneAlphaFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->supportedAlpha, EnumToStringVkDisplayPlaneAlphaFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: VkOffset2D minSrcPosition
    IndentSpaces(out, indent);
    *out += "minSrcPosition:                 ";
    *out += "VkOffset2D = "; // TEQ
    StructureToString(out, *pstruct_in.minSrcPosition, indent+1,  base_addr + offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcPosition)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset2D maxSrcPosition
    IndentSpaces(out, indent);
    *out += "maxSrcPosition:                 ";
    *out += "VkOffset2D = "; // TEQ
    StructureToString(out, *pstruct_in.maxSrcPosition, indent+1,  base_addr + offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcPosition)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D minSrcExtent
    IndentSpaces(out, indent);
    *out += "minSrcExtent:                   ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.minSrcExtent, indent+1,  base_addr + offsetof(VkDisplayPlaneCapabilitiesKHR, minSrcExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D maxSrcExtent
    IndentSpaces(out, indent);
    *out += "maxSrcExtent:                   ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.maxSrcExtent, indent+1,  base_addr + offsetof(VkDisplayPlaneCapabilitiesKHR, maxSrcExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset2D minDstPosition
    IndentSpaces(out, indent);
    *out += "minDstPosition:                 ";
    *out += "VkOffset2D = "; // TEQ
    StructureToString(out, *pstruct_in.minDstPosition, indent+1,  base_addr + offsetof(VkDisplayPlaneCapabilitiesKHR, minDstPosition)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkOffset2D maxDstPosition
    IndentSpaces(out, indent);
    *out += "maxDstPosition:                 ";
    *out += "VkOffset2D = "; // TEQ
    StructureToString(out, *pstruct_in.maxDstPosition, indent+1,  base_addr + offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstPosition)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D minDstExtent
    IndentSpaces(out, indent);
    *out += "minDstExtent:                   ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.minDstExtent, indent+1,  base_addr + offsetof(VkDisplayPlaneCapabilitiesKHR, minDstExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D maxDstExtent
    IndentSpaces(out, indent);
    *out += "maxDstExtent:                   ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.maxDstExtent, indent+1,  base_addr + offsetof(VkDisplayPlaneCapabilitiesKHR, maxDstExtent)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkDisplayPlanePropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayPlanePropertiesKHR *pstruct = (const VkDisplayPlanePropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkDisplayKHR currentDisplay
    IndentSpaces(out, indent);
    *out += "currentDisplay:                 ";
    *out += "VkDisplayKHR = "; // TEQ
    AddrToString(out, pstruct_in.currentDisplay); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t currentStackIndex
    IndentSpaces(out, indent);
    *out += "currentStackIndex:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->currentStackIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDisplaySurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplaySurfaceCreateInfoKHR *pstruct = (const VkDisplaySurfaceCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDisplaySurfaceCreateFlagsKHR flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDisplaySurfaceCreateFlagsKHR = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkDisplayModeKHR displayMode
    IndentSpaces(out, indent);
    *out += "displayMode:                    ";
    *out += "VkDisplayModeKHR = "; // TEQ
    AddrToString(out, pstruct_in.displayMode); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t planeIndex
    IndentSpaces(out, indent);
    *out += "planeIndex:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->planeIndex); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t planeStackIndex
    IndentSpaces(out, indent);
    *out += "planeStackIndex:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->planeStackIndex); // UYW
    *out += "\n"; // GDS

    // struct member: VkSurfaceTransformFlagBitsKHR transform
    IndentSpaces(out, indent);
    *out += "transform:                      ";
    *out += "VkSurfaceTransformFlagBitsKHR = "; // TEQ
    EnumToStringVkSurfaceTransformFlagBitsKHR(out, pstruct->transform); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->transform);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: float globalAlpha
    IndentSpaces(out, indent);
    *out += "globalAlpha:                    ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->globalAlpha); // PEZ
    *out += "\n"; // GDS

    // struct member: VkDisplayPlaneAlphaFlagBitsKHR alphaMode
    IndentSpaces(out, indent);
    *out += "alphaMode:                      ";
    *out += "VkDisplayPlaneAlphaFlagBitsKHR = "; // TEQ
    EnumToStringVkDisplayPlaneAlphaFlagBitsKHR(out, pstruct->alphaMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->alphaMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkExtent2D imageExtent
    IndentSpaces(out, indent);
    *out += "imageExtent:                    ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.imageExtent, indent+1,  base_addr + offsetof(VkDisplaySurfaceCreateInfoKHR, imageExtent)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkDisplayPresentInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayPresentInfoKHR *pstruct = (const VkDisplayPresentInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkRect2D srcRect
    IndentSpaces(out, indent);
    *out += "srcRect:                        ";
    *out += "VkRect2D = "; // TEQ
    StructureToString(out, *pstruct_in.srcRect, indent+1,  base_addr + offsetof(VkDisplayPresentInfoKHR, srcRect)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkRect2D dstRect
    IndentSpaces(out, indent);
    *out += "dstRect:                        ";
    *out += "VkRect2D = "; // TEQ
    StructureToString(out, *pstruct_in.dstRect, indent+1,  base_addr + offsetof(VkDisplayPresentInfoKHR, dstRect)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkBool32 persistent
    IndentSpaces(out, indent);
    *out += "persistent:                     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->persistent); //EQA
}

void StructureToString(std::string* out, const Decoded_VkXlibSurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkXlibSurfaceCreateInfoKHR *pstruct = (const VkXlibSurfaceCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkXlibSurfaceCreateFlagsKHR flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkXlibSurfaceCreateFlagsKHR = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: void* dpy
    IndentSpaces(out, indent);
    *out += "dpy:                            ";
    *out += "void* = "; // TEQ
    AddrToString(out, pstruct_in.dpy); // PAQ
    *out += "\n"; // GDS

    // struct member: size_t window
    IndentSpaces(out, indent);
    *out += "window:                         ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->window); // UYW
}

void StructureToString(std::string* out, const Decoded_VkXcbSurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkXcbSurfaceCreateInfoKHR *pstruct = (const VkXcbSurfaceCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkXcbSurfaceCreateFlagsKHR flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkXcbSurfaceCreateFlagsKHR = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: void* connection
    IndentSpaces(out, indent);
    *out += "connection:                     ";
    *out += "void* = "; // TEQ
    if (pstruct->connection == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.connection); // PWR
    }
    *out += "\n"; // GDS

    // struct member: uint32_t window
    IndentSpaces(out, indent);
    *out += "window:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->window); // UYW
}

void StructureToString(std::string* out, const Decoded_VkWaylandSurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkWaylandSurfaceCreateInfoKHR *pstruct = (const VkWaylandSurfaceCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkWaylandSurfaceCreateFlagsKHR flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkWaylandSurfaceCreateFlagsKHR = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: struct void* display
    IndentSpaces(out, indent);
    *out += "display:                        ";
    *out += "struct void* = "; // TEQ
    if (pstruct->display == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.display); // PWR
    }
    *out += "\n"; // GDS

    // struct member: struct void* surface
    IndentSpaces(out, indent);
    *out += "surface:                        ";
    *out += "struct void* = "; // TEQ
    if (pstruct->surface == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.surface); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkAndroidSurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAndroidSurfaceCreateInfoKHR *pstruct = (const VkAndroidSurfaceCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkAndroidSurfaceCreateFlagsKHR flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkAndroidSurfaceCreateFlagsKHR = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: struct void* window
    IndentSpaces(out, indent);
    *out += "window:                         ";
    *out += "struct void* = "; // TEQ
    if (pstruct->window == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.window); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkWin32SurfaceCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkWin32SurfaceCreateInfoKHR *pstruct = (const VkWin32SurfaceCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkWin32SurfaceCreateFlagsKHR flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkWin32SurfaceCreateFlagsKHR = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: void* hinstance
    IndentSpaces(out, indent);
    *out += "hinstance:                      ";
    *out += "void* = "; // TEQ
    if (pstruct->hinstance == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.hinstance); // PWR
    }
    *out += "\n"; // GDS

    // struct member: void* hwnd
    IndentSpaces(out, indent);
    *out += "hwnd:                           ";
    *out += "void* = "; // TEQ
    if (pstruct->hwnd == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.hwnd); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkImportMemoryWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImportMemoryWin32HandleInfoKHR *pstruct = (const VkImportMemoryWin32HandleInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalMemoryHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalMemoryHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* handle
    IndentSpaces(out, indent);
    *out += "handle:                         ";
    *out += "void* = "; // TEQ
    if (pstruct->handle == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.handle); // PWR
    }
    *out += "\n"; // GDS

    // struct member: const wchar_t* name
    IndentSpaces(out, indent);
    *out += "name:                           ";
    *out += "const wchar_t* = "; // TEQ
    if (pstruct->name == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.name.GetAddress()); // PWQ
    }
}

void StructureToString(std::string* out, const Decoded_VkExportMemoryWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExportMemoryWin32HandleInfoKHR *pstruct = (const VkExportMemoryWin32HandleInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: const SECURITY_ATTRIBUTES* pAttributes
    IndentSpaces(out, indent);
    *out += "pAttributes:                    ";
    *out += "const SECURITY_ATTRIBUTES* = "; // TEQ
    if (pstruct->pAttributes == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pAttributes = {false, false, false, nullptr};
        ScalarValueToString(out, pstruct_in.pAttributes->GetPointer(), vinfo_pAttributes); // PWT
    }
    *out += "\n"; // GDS

    // struct member: uint32_t dwAccess
    IndentSpaces(out, indent);
    *out += "dwAccess:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dwAccess); // UYW
    *out += "\n"; // GDS

    // struct member: const wchar_t* name
    IndentSpaces(out, indent);
    *out += "name:                           ";
    *out += "const wchar_t* = "; // TEQ
    if (pstruct->name == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.name.GetAddress()); // PWQ
    }
}

void StructureToString(std::string* out, const Decoded_VkMemoryWin32HandlePropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryWin32HandlePropertiesKHR *pstruct = (const VkMemoryWin32HandlePropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t memoryTypeBits
    IndentSpaces(out, indent);
    *out += "memoryTypeBits:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->memoryTypeBits); // UYW
}

void StructureToString(std::string* out, const Decoded_VkMemoryGetWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryGetWin32HandleInfoKHR *pstruct = (const VkMemoryGetWin32HandleInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceMemory memory
    IndentSpaces(out, indent);
    *out += "memory:                         ";
    *out += "VkDeviceMemory = "; // TEQ
    AddrToString(out, pstruct_in.memory); // PAQ
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalMemoryHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalMemoryHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkImportMemoryFdInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImportMemoryFdInfoKHR *pstruct = (const VkImportMemoryFdInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalMemoryHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalMemoryHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: int fd
    IndentSpaces(out, indent);
    *out += "fd:                             ";
    *out += "int = "; // TEQ
    SignedDecimalToString(out, pstruct->fd); //EQA
}

void StructureToString(std::string* out, const Decoded_VkMemoryFdPropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryFdPropertiesKHR *pstruct = (const VkMemoryFdPropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t memoryTypeBits
    IndentSpaces(out, indent);
    *out += "memoryTypeBits:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->memoryTypeBits); // UYW
}

void StructureToString(std::string* out, const Decoded_VkMemoryGetFdInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryGetFdInfoKHR *pstruct = (const VkMemoryGetFdInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceMemory memory
    IndentSpaces(out, indent);
    *out += "memory:                         ";
    *out += "VkDeviceMemory = "; // TEQ
    AddrToString(out, pstruct_in.memory); // PAQ
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalMemoryHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalMemoryHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkWin32KeyedMutexAcquireReleaseInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkWin32KeyedMutexAcquireReleaseInfoKHR *pstruct = (const VkWin32KeyedMutexAcquireReleaseInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t acquireCount
    IndentSpaces(out, indent);
    *out += "acquireCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->acquireCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDeviceMemory* pAcquireSyncs
    IndentSpaces(out, indent);
    *out += "pAcquireSyncs:                  ";
    *out += "const VkDeviceMemory* = "; // TEQ
    if (pstruct->pAcquireSyncs == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAcquireSyncs.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pAcquireSyncs = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkDeviceMemory>>(out, indent, 1, "const VkDeviceMemory*", &pstruct_in.pAcquireSyncs, "pAcquireSyncs", pstruct->acquireCount,  vinfo_pAcquireSyncs);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const uint64_t* pAcquireKeys
    IndentSpaces(out, indent);
    *out += "pAcquireKeys:                   ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pAcquireKeys == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAcquireKeys.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pAcquireKeys = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pAcquireKeys, "pAcquireKeys", pstruct->acquireCount,  vinfo_pAcquireKeys);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const uint32_t* pAcquireTimeouts
    IndentSpaces(out, indent);
    *out += "pAcquireTimeouts:               ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pAcquireTimeouts == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAcquireTimeouts.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pAcquireTimeouts = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pAcquireTimeouts, "pAcquireTimeouts", pstruct->acquireCount,  vinfo_pAcquireTimeouts);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t releaseCount
    IndentSpaces(out, indent);
    *out += "releaseCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->releaseCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDeviceMemory* pReleaseSyncs
    IndentSpaces(out, indent);
    *out += "pReleaseSyncs:                  ";
    *out += "const VkDeviceMemory* = "; // TEQ
    if (pstruct->pReleaseSyncs == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pReleaseSyncs.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pReleaseSyncs = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkDeviceMemory>>(out, indent, 1, "const VkDeviceMemory*", &pstruct_in.pReleaseSyncs, "pReleaseSyncs", pstruct->releaseCount,  vinfo_pReleaseSyncs);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const uint64_t* pReleaseKeys
    IndentSpaces(out, indent);
    *out += "pReleaseKeys:                   ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pReleaseKeys == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pReleaseKeys.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pReleaseKeys = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pReleaseKeys, "pReleaseKeys", pstruct->releaseCount,  vinfo_pReleaseKeys);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkImportSemaphoreWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImportSemaphoreWin32HandleInfoKHR *pstruct = (const VkImportSemaphoreWin32HandleInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSemaphore semaphore
    IndentSpaces(out, indent);
    *out += "semaphore:                      ";
    *out += "VkSemaphore = "; // TEQ
    AddrToString(out, pstruct_in.semaphore); // PAQ
    *out += "\n"; // GDS

    // struct member: VkSemaphoreImportFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSemaphoreImportFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSemaphoreImportFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalSemaphoreHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalSemaphoreHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalSemaphoreHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* handle
    IndentSpaces(out, indent);
    *out += "handle:                         ";
    *out += "void* = "; // TEQ
    if (pstruct->handle == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.handle); // PWR
    }
    *out += "\n"; // GDS

    // struct member: const wchar_t* name
    IndentSpaces(out, indent);
    *out += "name:                           ";
    *out += "const wchar_t* = "; // TEQ
    if (pstruct->name == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.name.GetAddress()); // PWQ
    }
}

void StructureToString(std::string* out, const Decoded_VkExportSemaphoreWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExportSemaphoreWin32HandleInfoKHR *pstruct = (const VkExportSemaphoreWin32HandleInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: const SECURITY_ATTRIBUTES* pAttributes
    IndentSpaces(out, indent);
    *out += "pAttributes:                    ";
    *out += "const SECURITY_ATTRIBUTES* = "; // TEQ
    if (pstruct->pAttributes == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pAttributes = {false, false, false, nullptr};
        ScalarValueToString(out, pstruct_in.pAttributes->GetPointer(), vinfo_pAttributes); // PWT
    }
    *out += "\n"; // GDS

    // struct member: uint32_t dwAccess
    IndentSpaces(out, indent);
    *out += "dwAccess:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dwAccess); // UYW
    *out += "\n"; // GDS

    // struct member: const wchar_t* name
    IndentSpaces(out, indent);
    *out += "name:                           ";
    *out += "const wchar_t* = "; // TEQ
    if (pstruct->name == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.name.GetAddress()); // PWQ
    }
}

void StructureToString(std::string* out, const Decoded_VkD3D12FenceSubmitInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkD3D12FenceSubmitInfoKHR *pstruct = (const VkD3D12FenceSubmitInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t waitSemaphoreValuesCount
    IndentSpaces(out, indent);
    *out += "waitSemaphoreValuesCount:       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->waitSemaphoreValuesCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint64_t* pWaitSemaphoreValues
    IndentSpaces(out, indent);
    *out += "pWaitSemaphoreValues:           ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pWaitSemaphoreValues == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pWaitSemaphoreValues.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pWaitSemaphoreValues = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pWaitSemaphoreValues, "pWaitSemaphoreValues", pstruct->waitSemaphoreValuesCount,  vinfo_pWaitSemaphoreValues);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t signalSemaphoreValuesCount
    IndentSpaces(out, indent);
    *out += "signalSemaphoreValuesCount:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->signalSemaphoreValuesCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint64_t* pSignalSemaphoreValues
    IndentSpaces(out, indent);
    *out += "pSignalSemaphoreValues:         ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pSignalSemaphoreValues == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSignalSemaphoreValues.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSignalSemaphoreValues = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pSignalSemaphoreValues, "pSignalSemaphoreValues", pstruct->signalSemaphoreValuesCount,  vinfo_pSignalSemaphoreValues);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkSemaphoreGetWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSemaphoreGetWin32HandleInfoKHR *pstruct = (const VkSemaphoreGetWin32HandleInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSemaphore semaphore
    IndentSpaces(out, indent);
    *out += "semaphore:                      ";
    *out += "VkSemaphore = "; // TEQ
    AddrToString(out, pstruct_in.semaphore); // PAQ
    *out += "\n"; // GDS

    // struct member: VkExternalSemaphoreHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalSemaphoreHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalSemaphoreHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkImportSemaphoreFdInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImportSemaphoreFdInfoKHR *pstruct = (const VkImportSemaphoreFdInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSemaphore semaphore
    IndentSpaces(out, indent);
    *out += "semaphore:                      ";
    *out += "VkSemaphore = "; // TEQ
    AddrToString(out, pstruct_in.semaphore); // PAQ
    *out += "\n"; // GDS

    // struct member: VkSemaphoreImportFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSemaphoreImportFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSemaphoreImportFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalSemaphoreHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalSemaphoreHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalSemaphoreHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: int fd
    IndentSpaces(out, indent);
    *out += "fd:                             ";
    *out += "int = "; // TEQ
    SignedDecimalToString(out, pstruct->fd); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSemaphoreGetFdInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSemaphoreGetFdInfoKHR *pstruct = (const VkSemaphoreGetFdInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSemaphore semaphore
    IndentSpaces(out, indent);
    *out += "semaphore:                      ";
    *out += "VkSemaphore = "; // TEQ
    AddrToString(out, pstruct_in.semaphore); // PAQ
    *out += "\n"; // GDS

    // struct member: VkExternalSemaphoreHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalSemaphoreHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalSemaphoreHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDevicePushDescriptorPropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDevicePushDescriptorPropertiesKHR *pstruct = (const VkPhysicalDevicePushDescriptorPropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxPushDescriptors
    IndentSpaces(out, indent);
    *out += "maxPushDescriptors:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPushDescriptors); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderFloat16Int8FeaturesKHR *pstruct = (const VkPhysicalDeviceShaderFloat16Int8FeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderFloat16
    IndentSpaces(out, indent);
    *out += "shaderFloat16:                  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderFloat16); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderInt8
    IndentSpaces(out, indent);
    *out += "shaderInt8:                     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderInt8); //EQA
}

void StructureToString(std::string* out, const Decoded_VkRectLayerKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRectLayerKHR *pstruct = (const VkRectLayerKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkOffset2D offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkOffset2D = "; // TEQ
    StructureToString(out, *pstruct_in.offset, indent+1,  base_addr + offsetof(VkRectLayerKHR, offset)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D extent
    IndentSpaces(out, indent);
    *out += "extent:                         ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.extent, indent+1,  base_addr + offsetof(VkRectLayerKHR, extent)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t layer
    IndentSpaces(out, indent);
    *out += "layer:                          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->layer); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPresentRegionKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPresentRegionKHR *pstruct = (const VkPresentRegionKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t rectangleCount
    IndentSpaces(out, indent);
    *out += "rectangleCount:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->rectangleCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkRectLayerKHR* pRectangles
    IndentSpaces(out, indent);
    *out += "pRectangles:                    ";
    *out += "const VkRectLayerKHR* = "; // TEQ
    if (pstruct->pRectangles == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pRectangles->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkRectLayerKHR>(out, indent+1, 1, "VkRectLayerKHR", pstruct_in.pRectangles->GetMetaStructPointer(), "pRectangles", pstruct->rectangleCount, false, pstruct_in.pRectangles->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPresentRegionsKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPresentRegionsKHR *pstruct = (const VkPresentRegionsKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t swapchainCount
    IndentSpaces(out, indent);
    *out += "swapchainCount:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->swapchainCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkPresentRegionKHR* pRegions
    IndentSpaces(out, indent);
    *out += "pRegions:                       ";
    *out += "const VkPresentRegionKHR* = "; // TEQ
    if (pstruct->pRegions == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pRegions->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkPresentRegionKHR>(out, indent+1, 1, "VkPresentRegionKHR", pstruct_in.pRegions->GetMetaStructPointer(), "pRegions", pstruct->swapchainCount, false, pstruct_in.pRegions->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceImagelessFramebufferFeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceImagelessFramebufferFeaturesKHR *pstruct = (const VkPhysicalDeviceImagelessFramebufferFeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 imagelessFramebuffer
    IndentSpaces(out, indent);
    *out += "imagelessFramebuffer:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->imagelessFramebuffer); //EQA
}

void StructureToString(std::string* out, const Decoded_VkFramebufferAttachmentImageInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFramebufferAttachmentImageInfoKHR *pstruct = (const VkFramebufferAttachmentImageInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkImageCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkImageCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags usage
    IndentSpaces(out, indent);
    *out += "usage:                          ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->usage, EnumToStringVkImageUsageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t width
    IndentSpaces(out, indent);
    *out += "width:                          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->width); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t height
    IndentSpaces(out, indent);
    *out += "height:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->height); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t layerCount
    IndentSpaces(out, indent);
    *out += "layerCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->layerCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t viewFormatCount
    IndentSpaces(out, indent);
    *out += "viewFormatCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->viewFormatCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkFormat* pViewFormats
    IndentSpaces(out, indent);
    *out += "pViewFormats:                   ";
    *out += "const VkFormat* = "; // TEQ
    if (pstruct->pViewFormats == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pViewFormats.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pViewFormats = {false, true, false, EnumToStringVkFormat};
        ArrayToString<PointerDecoder<VkFormat>>(out, indent, 1, "const VkFormat*", &pstruct_in.pViewFormats, "pViewFormats", pstruct->viewFormatCount,  vinfo_pViewFormats);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkFramebufferAttachmentsCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFramebufferAttachmentsCreateInfoKHR *pstruct = (const VkFramebufferAttachmentsCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t attachmentImageInfoCount
    IndentSpaces(out, indent);
    *out += "attachmentImageInfoCount:       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachmentImageInfoCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkFramebufferAttachmentImageInfoKHR* pAttachmentImageInfos
    IndentSpaces(out, indent);
    *out += "pAttachmentImageInfos:          ";
    *out += "const VkFramebufferAttachmentImageInfoKHR* = "; // TEQ
    if (pstruct->pAttachmentImageInfos == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAttachmentImageInfos->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkFramebufferAttachmentImageInfoKHR>(out, indent+1, 1, "VkFramebufferAttachmentImageInfoKHR", pstruct_in.pAttachmentImageInfos->GetMetaStructPointer(), "pAttachmentImageInfos", pstruct->attachmentImageInfoCount, false, pstruct_in.pAttachmentImageInfos->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkRenderPassAttachmentBeginInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRenderPassAttachmentBeginInfoKHR *pstruct = (const VkRenderPassAttachmentBeginInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t attachmentCount
    IndentSpaces(out, indent);
    *out += "attachmentCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkImageView* pAttachments
    IndentSpaces(out, indent);
    *out += "pAttachments:                   ";
    *out += "const VkImageView* = "; // TEQ
    if (pstruct->pAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAttachments.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pAttachments = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkImageView>>(out, indent, 1, "const VkImageView*", &pstruct_in.pAttachments, "pAttachments", pstruct->attachmentCount,  vinfo_pAttachments);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkAttachmentDescription2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAttachmentDescription2KHR *pstruct = (const VkAttachmentDescription2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkAttachmentDescriptionFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkAttachmentDescriptionFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkAttachmentDescriptionFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlagBits samples
    IndentSpaces(out, indent);
    *out += "samples:                        ";
    *out += "VkSampleCountFlagBits = "; // TEQ
    EnumToStringVkSampleCountFlagBits(out, pstruct->samples); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->samples);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkAttachmentLoadOp loadOp
    IndentSpaces(out, indent);
    *out += "loadOp:                         ";
    *out += "VkAttachmentLoadOp = "; // TEQ
    EnumToStringVkAttachmentLoadOp(out, pstruct->loadOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->loadOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkAttachmentStoreOp storeOp
    IndentSpaces(out, indent);
    *out += "storeOp:                        ";
    *out += "VkAttachmentStoreOp = "; // TEQ
    EnumToStringVkAttachmentStoreOp(out, pstruct->storeOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->storeOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkAttachmentLoadOp stencilLoadOp
    IndentSpaces(out, indent);
    *out += "stencilLoadOp:                  ";
    *out += "VkAttachmentLoadOp = "; // TEQ
    EnumToStringVkAttachmentLoadOp(out, pstruct->stencilLoadOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->stencilLoadOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkAttachmentStoreOp stencilStoreOp
    IndentSpaces(out, indent);
    *out += "stencilStoreOp:                 ";
    *out += "VkAttachmentStoreOp = "; // TEQ
    EnumToStringVkAttachmentStoreOp(out, pstruct->stencilStoreOp); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->stencilStoreOp);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageLayout initialLayout
    IndentSpaces(out, indent);
    *out += "initialLayout:                  ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->initialLayout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->initialLayout);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageLayout finalLayout
    IndentSpaces(out, indent);
    *out += "finalLayout:                    ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->finalLayout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->finalLayout);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkAttachmentReference2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAttachmentReference2KHR *pstruct = (const VkAttachmentReference2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t attachment
    IndentSpaces(out, indent);
    *out += "attachment:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachment); // UYW
    *out += "\n"; // GDS

    // struct member: VkImageLayout layout
    IndentSpaces(out, indent);
    *out += "layout:                         ";
    *out += "VkImageLayout = "; // TEQ
    EnumToStringVkImageLayout(out, pstruct->layout); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->layout);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkImageAspectFlags aspectMask
    IndentSpaces(out, indent);
    *out += "aspectMask:                     ";
    *out += "VkImageAspectFlags = "; // TEQ
    FlagsToString(out, pstruct->aspectMask, EnumToStringVkImageAspectFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkSubpassDescription2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubpassDescription2KHR *pstruct = (const VkSubpassDescription2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSubpassDescriptionFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSubpassDescriptionFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSubpassDescriptionFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkPipelineBindPoint pipelineBindPoint
    IndentSpaces(out, indent);
    *out += "pipelineBindPoint:              ";
    *out += "VkPipelineBindPoint = "; // TEQ
    EnumToStringVkPipelineBindPoint(out, pstruct->pipelineBindPoint); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->pipelineBindPoint);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t viewMask
    IndentSpaces(out, indent);
    *out += "viewMask:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->viewMask); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t inputAttachmentCount
    IndentSpaces(out, indent);
    *out += "inputAttachmentCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->inputAttachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkAttachmentReference2KHR* pInputAttachments
    IndentSpaces(out, indent);
    *out += "pInputAttachments:              ";
    *out += "const VkAttachmentReference2KHR* = "; // TEQ
    if (pstruct->pInputAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pInputAttachments->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkAttachmentReference2KHR>(out, indent+1, 1, "VkAttachmentReference2KHR", pstruct_in.pInputAttachments->GetMetaStructPointer(), "pInputAttachments", pstruct->inputAttachmentCount, false, pstruct_in.pInputAttachments->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t colorAttachmentCount
    IndentSpaces(out, indent);
    *out += "colorAttachmentCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->colorAttachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkAttachmentReference2KHR* pColorAttachments
    IndentSpaces(out, indent);
    *out += "pColorAttachments:              ";
    *out += "const VkAttachmentReference2KHR* = "; // TEQ
    if (pstruct->pColorAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pColorAttachments->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkAttachmentReference2KHR>(out, indent+1, 1, "VkAttachmentReference2KHR", pstruct_in.pColorAttachments->GetMetaStructPointer(), "pColorAttachments", pstruct->colorAttachmentCount, false, pstruct_in.pColorAttachments->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: const VkAttachmentReference2KHR* pResolveAttachments
    IndentSpaces(out, indent);
    *out += "pResolveAttachments:            ";
    *out += "const VkAttachmentReference2KHR* = "; // TEQ
    if (pstruct->pResolveAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pResolveAttachments->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkAttachmentReference2KHR>(out, indent+1, 1, "VkAttachmentReference2KHR", pstruct_in.pResolveAttachments->GetMetaStructPointer(), "pResolveAttachments", pstruct->colorAttachmentCount, false, pstruct_in.pResolveAttachments->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: const VkAttachmentReference2KHR* pDepthStencilAttachment
    IndentSpaces(out, indent);
    *out += "pDepthStencilAttachment:        ";
    *out += "const VkAttachmentReference2KHR* = "; // TEQ
    if (pstruct->pDepthStencilAttachment == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDepthStencilAttachment->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pDepthStencilAttachment->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkSubpassDescription2KHR, pDepthStencilAttachment)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: uint32_t preserveAttachmentCount
    IndentSpaces(out, indent);
    *out += "preserveAttachmentCount:        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->preserveAttachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pPreserveAttachments
    IndentSpaces(out, indent);
    *out += "pPreserveAttachments:           ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pPreserveAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pPreserveAttachments.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pPreserveAttachments = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pPreserveAttachments, "pPreserveAttachments", pstruct->preserveAttachmentCount,  vinfo_pPreserveAttachments);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkSubpassDependency2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubpassDependency2KHR *pstruct = (const VkSubpassDependency2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t srcSubpass
    IndentSpaces(out, indent);
    *out += "srcSubpass:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->srcSubpass); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t dstSubpass
    IndentSpaces(out, indent);
    *out += "dstSubpass:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dstSubpass); // UYW
    *out += "\n"; // GDS

    // struct member: VkPipelineStageFlags srcStageMask
    IndentSpaces(out, indent);
    *out += "srcStageMask:                   ";
    *out += "VkPipelineStageFlags = "; // TEQ
    FlagsToString(out, pstruct->srcStageMask, EnumToStringVkPipelineStageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkPipelineStageFlags dstStageMask
    IndentSpaces(out, indent);
    *out += "dstStageMask:                   ";
    *out += "VkPipelineStageFlags = "; // TEQ
    FlagsToString(out, pstruct->dstStageMask, EnumToStringVkPipelineStageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkAccessFlags srcAccessMask
    IndentSpaces(out, indent);
    *out += "srcAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->srcAccessMask, EnumToStringVkAccessFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkAccessFlags dstAccessMask
    IndentSpaces(out, indent);
    *out += "dstAccessMask:                  ";
    *out += "VkAccessFlags = "; // TEQ
    FlagsToString(out, pstruct->dstAccessMask, EnumToStringVkAccessFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkDependencyFlags dependencyFlags
    IndentSpaces(out, indent);
    *out += "dependencyFlags:                ";
    *out += "VkDependencyFlags = "; // TEQ
    FlagsToString(out, pstruct->dependencyFlags, EnumToStringVkDependencyFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: int32_t viewOffset
    IndentSpaces(out, indent);
    *out += "viewOffset:                     ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->viewOffset); //EQA
}

void StructureToString(std::string* out, const Decoded_VkRenderPassCreateInfo2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRenderPassCreateInfo2KHR *pstruct = (const VkRenderPassCreateInfo2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkRenderPassCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkRenderPassCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkRenderPassCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t attachmentCount
    IndentSpaces(out, indent);
    *out += "attachmentCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachmentCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkAttachmentDescription2KHR* pAttachments
    IndentSpaces(out, indent);
    *out += "pAttachments:                   ";
    *out += "const VkAttachmentDescription2KHR* = "; // TEQ
    if (pstruct->pAttachments == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAttachments->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkAttachmentDescription2KHR>(out, indent+1, 1, "VkAttachmentDescription2KHR", pstruct_in.pAttachments->GetMetaStructPointer(), "pAttachments", pstruct->attachmentCount, false, pstruct_in.pAttachments->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t subpassCount
    IndentSpaces(out, indent);
    *out += "subpassCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subpassCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSubpassDescription2KHR* pSubpasses
    IndentSpaces(out, indent);
    *out += "pSubpasses:                     ";
    *out += "const VkSubpassDescription2KHR* = "; // TEQ
    if (pstruct->pSubpasses == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSubpasses->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSubpassDescription2KHR>(out, indent+1, 1, "VkSubpassDescription2KHR", pstruct_in.pSubpasses->GetMetaStructPointer(), "pSubpasses", pstruct->subpassCount, false, pstruct_in.pSubpasses->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t dependencyCount
    IndentSpaces(out, indent);
    *out += "dependencyCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dependencyCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSubpassDependency2KHR* pDependencies
    IndentSpaces(out, indent);
    *out += "pDependencies:                  ";
    *out += "const VkSubpassDependency2KHR* = "; // TEQ
    if (pstruct->pDependencies == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDependencies->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSubpassDependency2KHR>(out, indent+1, 1, "VkSubpassDependency2KHR", pstruct_in.pDependencies->GetMetaStructPointer(), "pDependencies", pstruct->dependencyCount, false, pstruct_in.pDependencies->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t correlatedViewMaskCount
    IndentSpaces(out, indent);
    *out += "correlatedViewMaskCount:        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->correlatedViewMaskCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pCorrelatedViewMasks
    IndentSpaces(out, indent);
    *out += "pCorrelatedViewMasks:           ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pCorrelatedViewMasks == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pCorrelatedViewMasks.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pCorrelatedViewMasks = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pCorrelatedViewMasks, "pCorrelatedViewMasks", pstruct->correlatedViewMaskCount,  vinfo_pCorrelatedViewMasks);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkSubpassBeginInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubpassBeginInfoKHR *pstruct = (const VkSubpassBeginInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSubpassContents contents
    IndentSpaces(out, indent);
    *out += "contents:                       ";
    *out += "VkSubpassContents = "; // TEQ
    EnumToStringVkSubpassContents(out, pstruct->contents); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->contents);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkSubpassEndInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubpassEndInfoKHR *pstruct = (const VkSubpassEndInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
}

void StructureToString(std::string* out, const Decoded_VkSharedPresentSurfaceCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSharedPresentSurfaceCapabilitiesKHR *pstruct = (const VkSharedPresentSurfaceCapabilitiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags sharedPresentSupportedUsageFlags
    IndentSpaces(out, indent);
    *out += "sharedPresentSupportedUsageFlags: ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->sharedPresentSupportedUsageFlags, EnumToStringVkImageUsageFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkImportFenceWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImportFenceWin32HandleInfoKHR *pstruct = (const VkImportFenceWin32HandleInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFence fence
    IndentSpaces(out, indent);
    *out += "fence:                          ";
    *out += "VkFence = "; // TEQ
    AddrToString(out, pstruct_in.fence); // PAQ
    *out += "\n"; // GDS

    // struct member: VkFenceImportFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkFenceImportFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkFenceImportFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalFenceHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalFenceHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalFenceHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* handle
    IndentSpaces(out, indent);
    *out += "handle:                         ";
    *out += "void* = "; // TEQ
    if (pstruct->handle == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.handle); // PWR
    }
    *out += "\n"; // GDS

    // struct member: const wchar_t* name
    IndentSpaces(out, indent);
    *out += "name:                           ";
    *out += "const wchar_t* = "; // TEQ
    if (pstruct->name == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.name.GetAddress()); // PWQ
    }
}

void StructureToString(std::string* out, const Decoded_VkExportFenceWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExportFenceWin32HandleInfoKHR *pstruct = (const VkExportFenceWin32HandleInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: const SECURITY_ATTRIBUTES* pAttributes
    IndentSpaces(out, indent);
    *out += "pAttributes:                    ";
    *out += "const SECURITY_ATTRIBUTES* = "; // TEQ
    if (pstruct->pAttributes == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pAttributes = {false, false, false, nullptr};
        ScalarValueToString(out, pstruct_in.pAttributes->GetPointer(), vinfo_pAttributes); // PWT
    }
    *out += "\n"; // GDS

    // struct member: uint32_t dwAccess
    IndentSpaces(out, indent);
    *out += "dwAccess:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dwAccess); // UYW
    *out += "\n"; // GDS

    // struct member: const wchar_t* name
    IndentSpaces(out, indent);
    *out += "name:                           ";
    *out += "const wchar_t* = "; // TEQ
    if (pstruct->name == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.name.GetAddress()); // PWQ
    }
}

void StructureToString(std::string* out, const Decoded_VkFenceGetWin32HandleInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFenceGetWin32HandleInfoKHR *pstruct = (const VkFenceGetWin32HandleInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFence fence
    IndentSpaces(out, indent);
    *out += "fence:                          ";
    *out += "VkFence = "; // TEQ
    AddrToString(out, pstruct_in.fence); // PAQ
    *out += "\n"; // GDS

    // struct member: VkExternalFenceHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalFenceHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalFenceHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkImportFenceFdInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImportFenceFdInfoKHR *pstruct = (const VkImportFenceFdInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFence fence
    IndentSpaces(out, indent);
    *out += "fence:                          ";
    *out += "VkFence = "; // TEQ
    AddrToString(out, pstruct_in.fence); // PAQ
    *out += "\n"; // GDS

    // struct member: VkFenceImportFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkFenceImportFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkFenceImportFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalFenceHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalFenceHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalFenceHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: int fd
    IndentSpaces(out, indent);
    *out += "fd:                             ";
    *out += "int = "; // TEQ
    SignedDecimalToString(out, pstruct->fd); //EQA
}

void StructureToString(std::string* out, const Decoded_VkFenceGetFdInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFenceGetFdInfoKHR *pstruct = (const VkFenceGetFdInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFence fence
    IndentSpaces(out, indent);
    *out += "fence:                          ";
    *out += "VkFence = "; // TEQ
    AddrToString(out, pstruct_in.fence); // PAQ
    *out += "\n"; // GDS

    // struct member: VkExternalFenceHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalFenceHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalFenceHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSurfaceInfo2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceSurfaceInfo2KHR *pstruct = (const VkPhysicalDeviceSurfaceInfo2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSurfaceKHR surface
    IndentSpaces(out, indent);
    *out += "surface:                        ";
    *out += "VkSurfaceKHR = "; // TEQ
    AddrToString(out, pstruct_in.surface); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkSurfaceCapabilities2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSurfaceCapabilities2KHR *pstruct = (const VkSurfaceCapabilities2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSurfaceCapabilitiesKHR surfaceCapabilities
    IndentSpaces(out, indent);
    *out += "surfaceCapabilities:            ";
    *out += "VkSurfaceCapabilitiesKHR = "; // TEQ
    StructureToString(out, *pstruct_in.surfaceCapabilities, indent+1,  base_addr + offsetof(VkSurfaceCapabilities2KHR, surfaceCapabilities)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkSurfaceFormat2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSurfaceFormat2KHR *pstruct = (const VkSurfaceFormat2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSurfaceFormatKHR surfaceFormat
    IndentSpaces(out, indent);
    *out += "surfaceFormat:                  ";
    *out += "VkSurfaceFormatKHR = "; // TEQ
    StructureToString(out, *pstruct_in.surfaceFormat, indent+1,  base_addr + offsetof(VkSurfaceFormat2KHR, surfaceFormat)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkDisplayProperties2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayProperties2KHR *pstruct = (const VkDisplayProperties2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDisplayPropertiesKHR displayProperties
    IndentSpaces(out, indent);
    *out += "displayProperties:              ";
    *out += "VkDisplayPropertiesKHR = "; // TEQ
    StructureToString(out, *pstruct_in.displayProperties, indent+1,  base_addr + offsetof(VkDisplayProperties2KHR, displayProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkDisplayPlaneProperties2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayPlaneProperties2KHR *pstruct = (const VkDisplayPlaneProperties2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDisplayPlanePropertiesKHR displayPlaneProperties
    IndentSpaces(out, indent);
    *out += "displayPlaneProperties:         ";
    *out += "VkDisplayPlanePropertiesKHR = "; // TEQ
    StructureToString(out, *pstruct_in.displayPlaneProperties, indent+1,  base_addr + offsetof(VkDisplayPlaneProperties2KHR, displayPlaneProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkDisplayModeProperties2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayModeProperties2KHR *pstruct = (const VkDisplayModeProperties2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDisplayModePropertiesKHR displayModeProperties
    IndentSpaces(out, indent);
    *out += "displayModeProperties:          ";
    *out += "VkDisplayModePropertiesKHR = "; // TEQ
    StructureToString(out, *pstruct_in.displayModeProperties, indent+1,  base_addr + offsetof(VkDisplayModeProperties2KHR, displayModeProperties)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkDisplayPlaneInfo2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayPlaneInfo2KHR *pstruct = (const VkDisplayPlaneInfo2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDisplayModeKHR mode
    IndentSpaces(out, indent);
    *out += "mode:                           ";
    *out += "VkDisplayModeKHR = "; // TEQ
    AddrToString(out, pstruct_in.mode); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t planeIndex
    IndentSpaces(out, indent);
    *out += "planeIndex:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->planeIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDisplayPlaneCapabilities2KHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayPlaneCapabilities2KHR *pstruct = (const VkDisplayPlaneCapabilities2KHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDisplayPlaneCapabilitiesKHR capabilities
    IndentSpaces(out, indent);
    *out += "capabilities:                   ";
    *out += "VkDisplayPlaneCapabilitiesKHR = "; // TEQ
    StructureToString(out, *pstruct_in.capabilities, indent+1,  base_addr + offsetof(VkDisplayPlaneCapabilities2KHR, capabilities)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkImageFormatListCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageFormatListCreateInfoKHR *pstruct = (const VkImageFormatListCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t viewFormatCount
    IndentSpaces(out, indent);
    *out += "viewFormatCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->viewFormatCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkFormat* pViewFormats
    IndentSpaces(out, indent);
    *out += "pViewFormats:                   ";
    *out += "const VkFormat* = "; // TEQ
    if (pstruct->pViewFormats == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pViewFormats.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pViewFormats = {false, true, false, EnumToStringVkFormat};
        ArrayToString<PointerDecoder<VkFormat>>(out, indent, 1, "const VkFormat*", &pstruct_in.pViewFormats, "pViewFormats", pstruct->viewFormatCount,  vinfo_pViewFormats);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR *pstruct = (const VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSubgroupExtendedTypes
    IndentSpaces(out, indent);
    *out += "shaderSubgroupExtendedTypes:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSubgroupExtendedTypes); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDevice8BitStorageFeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDevice8BitStorageFeaturesKHR *pstruct = (const VkPhysicalDevice8BitStorageFeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 storageBuffer8BitAccess
    IndentSpaces(out, indent);
    *out += "storageBuffer8BitAccess:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->storageBuffer8BitAccess); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 uniformAndStorageBuffer8BitAccess
    IndentSpaces(out, indent);
    *out += "uniformAndStorageBuffer8BitAccess: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->uniformAndStorageBuffer8BitAccess); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 storagePushConstant8
    IndentSpaces(out, indent);
    *out += "storagePushConstant8:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->storagePushConstant8); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderAtomicInt64FeaturesKHR *pstruct = (const VkPhysicalDeviceShaderAtomicInt64FeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderBufferInt64Atomics
    IndentSpaces(out, indent);
    *out += "shaderBufferInt64Atomics:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderBufferInt64Atomics); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSharedInt64Atomics
    IndentSpaces(out, indent);
    *out += "shaderSharedInt64Atomics:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSharedInt64Atomics); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderClockFeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderClockFeaturesKHR *pstruct = (const VkPhysicalDeviceShaderClockFeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSubgroupClock
    IndentSpaces(out, indent);
    *out += "shaderSubgroupClock:            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSubgroupClock); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderDeviceClock
    IndentSpaces(out, indent);
    *out += "shaderDeviceClock:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderDeviceClock); //EQA
}

void StructureToString(std::string* out, const Decoded_VkConformanceVersionKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkConformanceVersionKHR *pstruct = (const VkConformanceVersionKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint8_t major
    IndentSpaces(out, indent);
    *out += "major:                          ";
    *out += "uint8_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->major); // UYW
    *out += "\n"; // GDS

    // struct member: uint8_t minor
    IndentSpaces(out, indent);
    *out += "minor:                          ";
    *out += "uint8_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minor); // UYW
    *out += "\n"; // GDS

    // struct member: uint8_t subminor
    IndentSpaces(out, indent);
    *out += "subminor:                       ";
    *out += "uint8_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subminor); // UYW
    *out += "\n"; // GDS

    // struct member: uint8_t patch
    IndentSpaces(out, indent);
    *out += "patch:                          ";
    *out += "uint8_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->patch); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDriverPropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceDriverPropertiesKHR *pstruct = (const VkPhysicalDeviceDriverPropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDriverIdKHR driverID
    IndentSpaces(out, indent);
    *out += "driverID:                       ";
    *out += "VkDriverIdKHR = "; // TEQ
    EnumToStringVkDriverIdKHR(out, pstruct->driverID); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->driverID);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: char driverName
    IndentSpaces(out, indent);
    *out += "driverName:                     ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_driverName = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.driverName.GetPointer(), "driverName", VK_MAX_DRIVER_NAME_SIZE_KHR, vinfo_driverName); // JPB
    *out += "\n"; // GDS

    // struct member: char driverInfo
    IndentSpaces(out, indent);
    *out += "driverInfo:                     ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_driverInfo = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.driverInfo.GetPointer(), "driverInfo", VK_MAX_DRIVER_INFO_SIZE_KHR, vinfo_driverInfo); // JPB
    *out += "\n"; // GDS

    // struct member: VkConformanceVersionKHR conformanceVersion
    IndentSpaces(out, indent);
    *out += "conformanceVersion:             ";
    *out += "VkConformanceVersionKHR = "; // TEQ
    StructureToString(out, *pstruct_in.conformanceVersion, indent+1,  base_addr + offsetof(VkPhysicalDeviceDriverPropertiesKHR, conformanceVersion)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFloatControlsPropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceFloatControlsPropertiesKHR *pstruct = (const VkPhysicalDeviceFloatControlsPropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkShaderFloatControlsIndependenceKHR denormBehaviorIndependence
    IndentSpaces(out, indent);
    *out += "denormBehaviorIndependence:     ";
    *out += "VkShaderFloatControlsIndependenceKHR = "; // TEQ
    EnumToStringVkShaderFloatControlsIndependenceKHR(out, pstruct->denormBehaviorIndependence); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->denormBehaviorIndependence);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkShaderFloatControlsIndependenceKHR roundingModeIndependence
    IndentSpaces(out, indent);
    *out += "roundingModeIndependence:       ";
    *out += "VkShaderFloatControlsIndependenceKHR = "; // TEQ
    EnumToStringVkShaderFloatControlsIndependenceKHR(out, pstruct->roundingModeIndependence); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->roundingModeIndependence);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSignedZeroInfNanPreserveFloat16
    IndentSpaces(out, indent);
    *out += "shaderSignedZeroInfNanPreserveFloat16: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSignedZeroInfNanPreserveFloat16); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSignedZeroInfNanPreserveFloat32
    IndentSpaces(out, indent);
    *out += "shaderSignedZeroInfNanPreserveFloat32: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSignedZeroInfNanPreserveFloat32); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSignedZeroInfNanPreserveFloat64
    IndentSpaces(out, indent);
    *out += "shaderSignedZeroInfNanPreserveFloat64: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSignedZeroInfNanPreserveFloat64); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderDenormPreserveFloat16
    IndentSpaces(out, indent);
    *out += "shaderDenormPreserveFloat16:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderDenormPreserveFloat16); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderDenormPreserveFloat32
    IndentSpaces(out, indent);
    *out += "shaderDenormPreserveFloat32:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderDenormPreserveFloat32); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderDenormPreserveFloat64
    IndentSpaces(out, indent);
    *out += "shaderDenormPreserveFloat64:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderDenormPreserveFloat64); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderDenormFlushToZeroFloat16
    IndentSpaces(out, indent);
    *out += "shaderDenormFlushToZeroFloat16: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderDenormFlushToZeroFloat16); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderDenormFlushToZeroFloat32
    IndentSpaces(out, indent);
    *out += "shaderDenormFlushToZeroFloat32: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderDenormFlushToZeroFloat32); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderDenormFlushToZeroFloat64
    IndentSpaces(out, indent);
    *out += "shaderDenormFlushToZeroFloat64: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderDenormFlushToZeroFloat64); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderRoundingModeRTEFloat16
    IndentSpaces(out, indent);
    *out += "shaderRoundingModeRTEFloat16:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderRoundingModeRTEFloat16); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderRoundingModeRTEFloat32
    IndentSpaces(out, indent);
    *out += "shaderRoundingModeRTEFloat32:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderRoundingModeRTEFloat32); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderRoundingModeRTEFloat64
    IndentSpaces(out, indent);
    *out += "shaderRoundingModeRTEFloat64:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderRoundingModeRTEFloat64); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderRoundingModeRTZFloat16
    IndentSpaces(out, indent);
    *out += "shaderRoundingModeRTZFloat16:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderRoundingModeRTZFloat16); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderRoundingModeRTZFloat32
    IndentSpaces(out, indent);
    *out += "shaderRoundingModeRTZFloat32:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderRoundingModeRTZFloat32); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderRoundingModeRTZFloat64
    IndentSpaces(out, indent);
    *out += "shaderRoundingModeRTZFloat64:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderRoundingModeRTZFloat64); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSubpassDescriptionDepthStencilResolveKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubpassDescriptionDepthStencilResolveKHR *pstruct = (const VkSubpassDescriptionDepthStencilResolveKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkResolveModeFlagBitsKHR depthResolveMode
    IndentSpaces(out, indent);
    *out += "depthResolveMode:               ";
    *out += "VkResolveModeFlagBitsKHR = "; // TEQ
    EnumToStringVkResolveModeFlagBitsKHR(out, pstruct->depthResolveMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->depthResolveMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkResolveModeFlagBitsKHR stencilResolveMode
    IndentSpaces(out, indent);
    *out += "stencilResolveMode:             ";
    *out += "VkResolveModeFlagBitsKHR = "; // TEQ
    EnumToStringVkResolveModeFlagBitsKHR(out, pstruct->stencilResolveMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->stencilResolveMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const VkAttachmentReference2KHR* pDepthStencilResolveAttachment
    IndentSpaces(out, indent);
    *out += "pDepthStencilResolveAttachment: ";
    *out += "const VkAttachmentReference2KHR* = "; // TEQ
    if (pstruct->pDepthStencilResolveAttachment == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDepthStencilResolveAttachment->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pDepthStencilResolveAttachment->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkSubpassDescriptionDepthStencilResolveKHR, pDepthStencilResolveAttachment)); // GLN
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDepthStencilResolvePropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceDepthStencilResolvePropertiesKHR *pstruct = (const VkPhysicalDeviceDepthStencilResolvePropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkResolveModeFlagsKHR supportedDepthResolveModes
    IndentSpaces(out, indent);
    *out += "supportedDepthResolveModes:     ";
    *out += "VkResolveModeFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->supportedDepthResolveModes, EnumToStringVkResolveModeFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: VkResolveModeFlagsKHR supportedStencilResolveModes
    IndentSpaces(out, indent);
    *out += "supportedStencilResolveModes:   ";
    *out += "VkResolveModeFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->supportedStencilResolveModes, EnumToStringVkResolveModeFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: VkBool32 independentResolveNone
    IndentSpaces(out, indent);
    *out += "independentResolveNone:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->independentResolveNone); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 independentResolve
    IndentSpaces(out, indent);
    *out += "independentResolve:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->independentResolve); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceTimelineSemaphoreFeaturesKHR *pstruct = (const VkPhysicalDeviceTimelineSemaphoreFeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 timelineSemaphore
    IndentSpaces(out, indent);
    *out += "timelineSemaphore:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->timelineSemaphore); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTimelineSemaphorePropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceTimelineSemaphorePropertiesKHR *pstruct = (const VkPhysicalDeviceTimelineSemaphorePropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint64_t maxTimelineSemaphoreValueDifference
    IndentSpaces(out, indent);
    *out += "maxTimelineSemaphoreValueDifference: ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTimelineSemaphoreValueDifference); // UYW
}

void StructureToString(std::string* out, const Decoded_VkSemaphoreTypeCreateInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSemaphoreTypeCreateInfoKHR *pstruct = (const VkSemaphoreTypeCreateInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSemaphoreTypeKHR semaphoreType
    IndentSpaces(out, indent);
    *out += "semaphoreType:                  ";
    *out += "VkSemaphoreTypeKHR = "; // TEQ
    EnumToStringVkSemaphoreTypeKHR(out, pstruct->semaphoreType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->semaphoreType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint64_t initialValue
    IndentSpaces(out, indent);
    *out += "initialValue:                   ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->initialValue); // UYW
}

void StructureToString(std::string* out, const Decoded_VkTimelineSemaphoreSubmitInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkTimelineSemaphoreSubmitInfoKHR *pstruct = (const VkTimelineSemaphoreSubmitInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t waitSemaphoreValueCount
    IndentSpaces(out, indent);
    *out += "waitSemaphoreValueCount:        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->waitSemaphoreValueCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint64_t* pWaitSemaphoreValues
    IndentSpaces(out, indent);
    *out += "pWaitSemaphoreValues:           ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pWaitSemaphoreValues == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pWaitSemaphoreValues.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pWaitSemaphoreValues = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pWaitSemaphoreValues, "pWaitSemaphoreValues", pstruct->waitSemaphoreValueCount,  vinfo_pWaitSemaphoreValues);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t signalSemaphoreValueCount
    IndentSpaces(out, indent);
    *out += "signalSemaphoreValueCount:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->signalSemaphoreValueCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint64_t* pSignalSemaphoreValues
    IndentSpaces(out, indent);
    *out += "pSignalSemaphoreValues:         ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pSignalSemaphoreValues == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSignalSemaphoreValues.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSignalSemaphoreValues = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pSignalSemaphoreValues, "pSignalSemaphoreValues", pstruct->signalSemaphoreValueCount,  vinfo_pSignalSemaphoreValues);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkSemaphoreWaitInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSemaphoreWaitInfoKHR *pstruct = (const VkSemaphoreWaitInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSemaphoreWaitFlagsKHR flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkSemaphoreWaitFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkSemaphoreWaitFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t semaphoreCount
    IndentSpaces(out, indent);
    *out += "semaphoreCount:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->semaphoreCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSemaphore* pSemaphores
    IndentSpaces(out, indent);
    *out += "pSemaphores:                    ";
    *out += "const VkSemaphore* = "; // TEQ
    if (pstruct->pSemaphores == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSemaphores.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pSemaphores = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkSemaphore>>(out, indent, 1, "const VkSemaphore*", &pstruct_in.pSemaphores, "pSemaphores", pstruct->semaphoreCount,  vinfo_pSemaphores);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const uint64_t* pValues
    IndentSpaces(out, indent);
    *out += "pValues:                        ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pValues == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pValues.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pValues = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pValues, "pValues", pstruct->semaphoreCount,  vinfo_pValues);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkSemaphoreSignalInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSemaphoreSignalInfoKHR *pstruct = (const VkSemaphoreSignalInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSemaphore semaphore
    IndentSpaces(out, indent);
    *out += "semaphore:                      ";
    *out += "VkSemaphore = "; // TEQ
    AddrToString(out, pstruct_in.semaphore); // PAQ
    *out += "\n"; // GDS

    // struct member: uint64_t value
    IndentSpaces(out, indent);
    *out += "value:                          ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->value); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceVulkanMemoryModelFeaturesKHR *pstruct = (const VkPhysicalDeviceVulkanMemoryModelFeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 vulkanMemoryModel
    IndentSpaces(out, indent);
    *out += "vulkanMemoryModel:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->vulkanMemoryModel); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 vulkanMemoryModelDeviceScope
    IndentSpaces(out, indent);
    *out += "vulkanMemoryModelDeviceScope:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->vulkanMemoryModelDeviceScope); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 vulkanMemoryModelAvailabilityVisibilityChains
    IndentSpaces(out, indent);
    *out += "vulkanMemoryModelAvailabilityVisibilityChains: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->vulkanMemoryModelAvailabilityVisibilityChains); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSurfaceProtectedCapabilitiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSurfaceProtectedCapabilitiesKHR *pstruct = (const VkSurfaceProtectedCapabilitiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 supportsProtected
    IndentSpaces(out, indent);
    *out += "supportsProtected:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->supportsProtected); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR *pstruct = (const VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 uniformBufferStandardLayout
    IndentSpaces(out, indent);
    *out += "uniformBufferStandardLayout:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->uniformBufferStandardLayout); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR *pstruct = (const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 pipelineExecutableInfo
    IndentSpaces(out, indent);
    *out += "pipelineExecutableInfo:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->pipelineExecutableInfo); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineInfoKHR *pstruct = (const VkPipelineInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipeline pipeline
    IndentSpaces(out, indent);
    *out += "pipeline:                       ";
    *out += "VkPipeline = "; // TEQ
    AddrToString(out, pstruct_in.pipeline); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkPipelineExecutablePropertiesKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineExecutablePropertiesKHR *pstruct = (const VkPipelineExecutablePropertiesKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkShaderStageFlags stages
    IndentSpaces(out, indent);
    *out += "stages:                         ";
    *out += "VkShaderStageFlags = "; // TEQ
    FlagsToString(out, pstruct->stages, EnumToStringVkShaderStageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: char name
    IndentSpaces(out, indent);
    *out += "name:                           ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_name = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.name.GetPointer(), "name", VK_MAX_DESCRIPTION_SIZE, vinfo_name); // JPB
    *out += "\n"; // GDS

    // struct member: char description
    IndentSpaces(out, indent);
    *out += "description:                    ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_description = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.description.GetPointer(), "description", VK_MAX_DESCRIPTION_SIZE, vinfo_description); // JPB
    *out += "\n"; // GDS

    // struct member: uint32_t subgroupSize
    IndentSpaces(out, indent);
    *out += "subgroupSize:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subgroupSize); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineExecutableInfoKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineExecutableInfoKHR *pstruct = (const VkPipelineExecutableInfoKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipeline pipeline
    IndentSpaces(out, indent);
    *out += "pipeline:                       ";
    *out += "VkPipeline = "; // TEQ
    AddrToString(out, pstruct_in.pipeline); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t executableIndex
    IndentSpaces(out, indent);
    *out += "executableIndex:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->executableIndex); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineExecutableStatisticValueKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineExecutableStatisticValueKHR *pstruct = (const VkPipelineExecutableStatisticValueKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkBool32 b32
    IndentSpaces(out, indent);
    *out += "b32:                            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->b32); //EQA
    *out += "\n"; // GDS

    // struct member: int64_t i64
    IndentSpaces(out, indent);
    *out += "i64:                            ";
    *out += "int64_t = "; // TEQ
    SignedDecimalToString(out, pstruct->i64); //EQA
    *out += "\n"; // GDS

    // struct member: uint64_t u64
    IndentSpaces(out, indent);
    *out += "u64:                            ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->u64); // UYW
    *out += "\n"; // GDS

    // struct member: double f64
    IndentSpaces(out, indent);
    *out += "f64:                            ";
    *out += "double = "; // TEQ
    DoubleToString(out, pstruct->f64); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkPipelineExecutableStatisticKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineExecutableStatisticKHR *pstruct = (const VkPipelineExecutableStatisticKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: char name
    IndentSpaces(out, indent);
    *out += "name:                           ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_name = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.name.GetPointer(), "name", VK_MAX_DESCRIPTION_SIZE, vinfo_name); // JPB
    *out += "\n"; // GDS

    // struct member: char description
    IndentSpaces(out, indent);
    *out += "description:                    ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_description = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.description.GetPointer(), "description", VK_MAX_DESCRIPTION_SIZE, vinfo_description); // JPB
    *out += "\n"; // GDS

    // struct member: VkPipelineExecutableStatisticFormatKHR format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkPipelineExecutableStatisticFormatKHR = "; // TEQ
    EnumToStringVkPipelineExecutableStatisticFormatKHR(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkPipelineExecutableStatisticValueKHR value
    IndentSpaces(out, indent);
    *out += "value:                          ";
    *out += "VkPipelineExecutableStatisticValueKHR = "; // TEQ
    *out += "(Union):"; // RGT
    StructureToString(out, *pstruct_in.value, indent+1,  base_addr + offsetof(VkPipelineExecutableStatisticKHR, value)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPipelineExecutableInternalRepresentationKHR &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineExecutableInternalRepresentationKHR *pstruct = (const VkPipelineExecutableInternalRepresentationKHR *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: char name
    IndentSpaces(out, indent);
    *out += "name:                           ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_name = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.name.GetPointer(), "name", VK_MAX_DESCRIPTION_SIZE, vinfo_name); // JPB
    *out += "\n"; // GDS

    // struct member: char description
    IndentSpaces(out, indent);
    *out += "description:                    ";
    *out += "char = "; // TEQ
    ScalarValueToStringStruct vinfo_description = {false, false, false, nullptr};
    ArrayOfScalarsToString<char>(out, indent, 0, "char", pstruct_in.description.GetPointer(), "description", VK_MAX_DESCRIPTION_SIZE, vinfo_description); // JPB
    *out += "\n"; // GDS

    // struct member: VkBool32 isText
    IndentSpaces(out, indent);
    *out += "isText:                         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->isText); //EQA
    *out += "\n"; // GDS

    // struct member: size_t dataSize
    IndentSpaces(out, indent);
    *out += "dataSize:                       ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dataSize); // UYW
    *out += "\n"; // GDS

    // struct member: void* pData
    IndentSpaces(out, indent);
    *out += "pData:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pData == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pData.GetAddress()); // AHW
    }
}

void StructureToString(std::string* out, const Decoded_VkDebugReportCallbackCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDebugReportCallbackCreateInfoEXT *pstruct = (const VkDebugReportCallbackCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDebugReportFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDebugReportFlagsEXT = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkDebugReportFlagBitsEXT); // URW
    *out += "\n"; // GDS

    // struct member: PFN_vkDebugReportCallbackEXT pfnCallback
    IndentSpaces(out, indent);
    *out += "pfnCallback:                    ";
    *out += "PFN_vkDebugReportCallbackEXT = "; // TEQ
    AddrToString(out, reinterpret_cast<uint64_t>(pstruct->pfnCallback)); // WRX
    *out += "\n"; // GDS

    // struct member: void* pUserData
    IndentSpaces(out, indent);
    *out += "pUserData:                      ";
    *out += "void* = "; // TEQ
    if (pstruct->pUserData == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pUserData); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationStateRasterizationOrderAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineRasterizationStateRasterizationOrderAMD *pstruct = (const VkPipelineRasterizationStateRasterizationOrderAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkRasterizationOrderAMD rasterizationOrder
    IndentSpaces(out, indent);
    *out += "rasterizationOrder:             ";
    *out += "VkRasterizationOrderAMD = "; // TEQ
    EnumToStringVkRasterizationOrderAMD(out, pstruct->rasterizationOrder); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->rasterizationOrder);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkDebugMarkerObjectNameInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDebugMarkerObjectNameInfoEXT *pstruct = (const VkDebugMarkerObjectNameInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDebugReportObjectTypeEXT objectType
    IndentSpaces(out, indent);
    *out += "objectType:                     ";
    *out += "VkDebugReportObjectTypeEXT = "; // TEQ
    EnumToStringVkDebugReportObjectTypeEXT(out, pstruct->objectType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->objectType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint64_t object
    IndentSpaces(out, indent);
    *out += "object:                         ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->object); // UYW
    *out += "\n"; // GDS

    // struct member: const char* pObjectName
    IndentSpaces(out, indent);
    *out += "pObjectName:                    ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->pObjectName); // TGI
}

void StructureToString(std::string* out, const Decoded_VkDebugMarkerObjectTagInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDebugMarkerObjectTagInfoEXT *pstruct = (const VkDebugMarkerObjectTagInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDebugReportObjectTypeEXT objectType
    IndentSpaces(out, indent);
    *out += "objectType:                     ";
    *out += "VkDebugReportObjectTypeEXT = "; // TEQ
    EnumToStringVkDebugReportObjectTypeEXT(out, pstruct->objectType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->objectType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint64_t object
    IndentSpaces(out, indent);
    *out += "object:                         ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->object); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t tagName
    IndentSpaces(out, indent);
    *out += "tagName:                        ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->tagName); // UYW
    *out += "\n"; // GDS

    // struct member: size_t tagSize
    IndentSpaces(out, indent);
    *out += "tagSize:                        ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->tagSize); // UYW
    *out += "\n"; // GDS

    // struct member: const void* pTag
    IndentSpaces(out, indent);
    *out += "pTag:                           ";
    *out += "const void* = "; // TEQ
    if (pstruct->pTag == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pTag.GetAddress()); // AHW
    }
}

void StructureToString(std::string* out, const Decoded_VkDebugMarkerMarkerInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDebugMarkerMarkerInfoEXT *pstruct = (const VkDebugMarkerMarkerInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: const char* pMarkerName
    IndentSpaces(out, indent);
    *out += "pMarkerName:                    ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->pMarkerName); // TGI
    *out += "\n"; // GDS

    // struct member: float color
    IndentSpaces(out, indent);
    *out += "color:                          ";
    *out += "float[";
    *out += "4"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkDebugMarkerMarkerInfoEXT, color)); // IYY
    ScalarValueToStringStruct vinfo_color = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<float>>(out, indent, 0, "float", &pstruct_in.color, "color", 4, vinfo_color); // JPE
}

void StructureToString(std::string* out, const Decoded_VkDedicatedAllocationImageCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDedicatedAllocationImageCreateInfoNV *pstruct = (const VkDedicatedAllocationImageCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 dedicatedAllocation
    IndentSpaces(out, indent);
    *out += "dedicatedAllocation:            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->dedicatedAllocation); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDedicatedAllocationBufferCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDedicatedAllocationBufferCreateInfoNV *pstruct = (const VkDedicatedAllocationBufferCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 dedicatedAllocation
    IndentSpaces(out, indent);
    *out += "dedicatedAllocation:            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->dedicatedAllocation); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDedicatedAllocationMemoryAllocateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDedicatedAllocationMemoryAllocateInfoNV *pstruct = (const VkDedicatedAllocationMemoryAllocateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImage image
    IndentSpaces(out, indent);
    *out += "image:                          ";
    *out += "VkImage = "; // TEQ
    AddrToString(out, pstruct_in.image); // PAQ
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTransformFeedbackFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceTransformFeedbackFeaturesEXT *pstruct = (const VkPhysicalDeviceTransformFeedbackFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 transformFeedback
    IndentSpaces(out, indent);
    *out += "transformFeedback:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->transformFeedback); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 geometryStreams
    IndentSpaces(out, indent);
    *out += "geometryStreams:                ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->geometryStreams); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTransformFeedbackPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceTransformFeedbackPropertiesEXT *pstruct = (const VkPhysicalDeviceTransformFeedbackPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxTransformFeedbackStreams
    IndentSpaces(out, indent);
    *out += "maxTransformFeedbackStreams:    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTransformFeedbackStreams); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTransformFeedbackBuffers
    IndentSpaces(out, indent);
    *out += "maxTransformFeedbackBuffers:    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTransformFeedbackBuffers); // UYW
    *out += "\n"; // GDS

    // struct member: VkDeviceSize maxTransformFeedbackBufferSize
    IndentSpaces(out, indent);
    *out += "maxTransformFeedbackBufferSize: ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->maxTransformFeedbackBufferSize); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t maxTransformFeedbackStreamDataSize
    IndentSpaces(out, indent);
    *out += "maxTransformFeedbackStreamDataSize: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTransformFeedbackStreamDataSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTransformFeedbackBufferDataSize
    IndentSpaces(out, indent);
    *out += "maxTransformFeedbackBufferDataSize: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTransformFeedbackBufferDataSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTransformFeedbackBufferDataStride
    IndentSpaces(out, indent);
    *out += "maxTransformFeedbackBufferDataStride: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTransformFeedbackBufferDataStride); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 transformFeedbackQueries
    IndentSpaces(out, indent);
    *out += "transformFeedbackQueries:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->transformFeedbackQueries); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 transformFeedbackStreamsLinesTriangles
    IndentSpaces(out, indent);
    *out += "transformFeedbackStreamsLinesTriangles: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->transformFeedbackStreamsLinesTriangles); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 transformFeedbackRasterizationStreamSelect
    IndentSpaces(out, indent);
    *out += "transformFeedbackRasterizationStreamSelect: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->transformFeedbackRasterizationStreamSelect); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 transformFeedbackDraw
    IndentSpaces(out, indent);
    *out += "transformFeedbackDraw:          ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->transformFeedbackDraw); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationStateStreamCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineRasterizationStateStreamCreateInfoEXT *pstruct = (const VkPipelineRasterizationStateStreamCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineRasterizationStateStreamCreateFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineRasterizationStateStreamCreateFlagsEXT = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t rasterizationStream
    IndentSpaces(out, indent);
    *out += "rasterizationStream:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->rasterizationStream); // UYW
}

void StructureToString(std::string* out, const Decoded_VkImageViewHandleInfoNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageViewHandleInfoNVX *pstruct = (const VkImageViewHandleInfoNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageView imageView
    IndentSpaces(out, indent);
    *out += "imageView:                      ";
    *out += "VkImageView = "; // TEQ
    AddrToString(out, pstruct_in.imageView); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDescriptorType descriptorType
    IndentSpaces(out, indent);
    *out += "descriptorType:                 ";
    *out += "VkDescriptorType = "; // TEQ
    EnumToStringVkDescriptorType(out, pstruct->descriptorType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->descriptorType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSampler sampler
    IndentSpaces(out, indent);
    *out += "sampler:                        ";
    *out += "VkSampler = "; // TEQ
    AddrToString(out, pstruct_in.sampler); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkTextureLODGatherFormatPropertiesAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkTextureLODGatherFormatPropertiesAMD *pstruct = (const VkTextureLODGatherFormatPropertiesAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 supportsTextureGatherLODBiasAMD
    IndentSpaces(out, indent);
    *out += "supportsTextureGatherLODBiasAMD: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->supportsTextureGatherLODBiasAMD); //EQA
}

void StructureToString(std::string* out, const Decoded_VkShaderResourceUsageAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkShaderResourceUsageAMD *pstruct = (const VkShaderResourceUsageAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t numUsedVgprs
    IndentSpaces(out, indent);
    *out += "numUsedVgprs:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->numUsedVgprs); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t numUsedSgprs
    IndentSpaces(out, indent);
    *out += "numUsedSgprs:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->numUsedSgprs); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t ldsSizePerLocalWorkGroup
    IndentSpaces(out, indent);
    *out += "ldsSizePerLocalWorkGroup:       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->ldsSizePerLocalWorkGroup); // UYW
    *out += "\n"; // GDS

    // struct member: size_t ldsUsageSizeInBytes
    IndentSpaces(out, indent);
    *out += "ldsUsageSizeInBytes:            ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->ldsUsageSizeInBytes); // UYW
    *out += "\n"; // GDS

    // struct member: size_t scratchMemUsageInBytes
    IndentSpaces(out, indent);
    *out += "scratchMemUsageInBytes:         ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->scratchMemUsageInBytes); // UYW
}

void StructureToString(std::string* out, const Decoded_VkShaderStatisticsInfoAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkShaderStatisticsInfoAMD *pstruct = (const VkShaderStatisticsInfoAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkShaderStageFlags shaderStageMask
    IndentSpaces(out, indent);
    *out += "shaderStageMask:                ";
    *out += "VkShaderStageFlags = "; // TEQ
    FlagsToString(out, pstruct->shaderStageMask, EnumToStringVkShaderStageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkShaderResourceUsageAMD resourceUsage
    IndentSpaces(out, indent);
    *out += "resourceUsage:                  ";
    *out += "VkShaderResourceUsageAMD = "; // TEQ
    StructureToString(out, *pstruct_in.resourceUsage, indent+1,  base_addr + offsetof(VkShaderStatisticsInfoAMD, resourceUsage)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t numPhysicalVgprs
    IndentSpaces(out, indent);
    *out += "numPhysicalVgprs:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->numPhysicalVgprs); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t numPhysicalSgprs
    IndentSpaces(out, indent);
    *out += "numPhysicalSgprs:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->numPhysicalSgprs); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t numAvailableVgprs
    IndentSpaces(out, indent);
    *out += "numAvailableVgprs:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->numAvailableVgprs); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t numAvailableSgprs
    IndentSpaces(out, indent);
    *out += "numAvailableSgprs:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->numAvailableSgprs); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t computeWorkGroupSize
    IndentSpaces(out, indent);
    *out += "computeWorkGroupSize:           ";
    *out += "uint32_t[";
    *out += "3"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkShaderStatisticsInfoAMD, computeWorkGroupSize)); // IYY
    ScalarValueToStringStruct vinfo_computeWorkGroupSize = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint32_t>>(out, indent, 0, "uint32_t", &pstruct_in.computeWorkGroupSize, "computeWorkGroupSize", 3, vinfo_computeWorkGroupSize); // JPE
}

void StructureToString(std::string* out, const Decoded_VkStreamDescriptorSurfaceCreateInfoGGP &pstruct_in, int indent, uint64_t base_addr)
{
    const VkStreamDescriptorSurfaceCreateInfoGGP *pstruct = (const VkStreamDescriptorSurfaceCreateInfoGGP *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkStreamDescriptorSurfaceCreateFlagsGGP flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkStreamDescriptorSurfaceCreateFlagsGGP = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t streamDescriptor
    IndentSpaces(out, indent);
    *out += "streamDescriptor:               ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->streamDescriptor); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCornerSampledImageFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceCornerSampledImageFeaturesNV *pstruct = (const VkPhysicalDeviceCornerSampledImageFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 cornerSampledImage
    IndentSpaces(out, indent);
    *out += "cornerSampledImage:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->cornerSampledImage); //EQA
}

void StructureToString(std::string* out, const Decoded_VkExternalImageFormatPropertiesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalImageFormatPropertiesNV *pstruct = (const VkExternalImageFormatPropertiesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkImageFormatProperties imageFormatProperties
    IndentSpaces(out, indent);
    *out += "imageFormatProperties:          ";
    *out += "VkImageFormatProperties = "; // TEQ
    StructureToString(out, *pstruct_in.imageFormatProperties, indent+1,  base_addr + offsetof(VkExternalImageFormatPropertiesNV, imageFormatProperties)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryFeatureFlagsNV externalMemoryFeatures
    IndentSpaces(out, indent);
    *out += "externalMemoryFeatures:         ";
    *out += "VkExternalMemoryFeatureFlagsNV = "; // TEQ
    FlagsToString(out, pstruct->externalMemoryFeatures, EnumToStringVkExternalMemoryFeatureFlagBitsNV); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes
    IndentSpaces(out, indent);
    *out += "exportFromImportedHandleTypes:  ";
    *out += "VkExternalMemoryHandleTypeFlagsNV = "; // TEQ
    FlagsToString(out, pstruct->exportFromImportedHandleTypes, EnumToStringVkExternalMemoryHandleTypeFlagBitsNV); // URW
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes
    IndentSpaces(out, indent);
    *out += "compatibleHandleTypes:          ";
    *out += "VkExternalMemoryHandleTypeFlagsNV = "; // TEQ
    FlagsToString(out, pstruct->compatibleHandleTypes, EnumToStringVkExternalMemoryHandleTypeFlagBitsNV); // URW
}

void StructureToString(std::string* out, const Decoded_VkExternalMemoryImageCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalMemoryImageCreateInfoNV *pstruct = (const VkExternalMemoryImageCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagsNV handleTypes
    IndentSpaces(out, indent);
    *out += "handleTypes:                    ";
    *out += "VkExternalMemoryHandleTypeFlagsNV = "; // TEQ
    FlagsToString(out, pstruct->handleTypes, EnumToStringVkExternalMemoryHandleTypeFlagBitsNV); // URW
}

void StructureToString(std::string* out, const Decoded_VkExportMemoryAllocateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExportMemoryAllocateInfoNV *pstruct = (const VkExportMemoryAllocateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagsNV handleTypes
    IndentSpaces(out, indent);
    *out += "handleTypes:                    ";
    *out += "VkExternalMemoryHandleTypeFlagsNV = "; // TEQ
    FlagsToString(out, pstruct->handleTypes, EnumToStringVkExternalMemoryHandleTypeFlagBitsNV); // URW
}

void StructureToString(std::string* out, const Decoded_VkImportMemoryWin32HandleInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImportMemoryWin32HandleInfoNV *pstruct = (const VkImportMemoryWin32HandleInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagsNV handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalMemoryHandleTypeFlagsNV = "; // TEQ
    FlagsToString(out, pstruct->handleType, EnumToStringVkExternalMemoryHandleTypeFlagBitsNV); // URW
    *out += "\n"; // GDS

    // struct member: void* handle
    IndentSpaces(out, indent);
    *out += "handle:                         ";
    *out += "void* = "; // TEQ
    if (pstruct->handle == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.handle); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkExportMemoryWin32HandleInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExportMemoryWin32HandleInfoNV *pstruct = (const VkExportMemoryWin32HandleInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: const SECURITY_ATTRIBUTES* pAttributes
    IndentSpaces(out, indent);
    *out += "pAttributes:                    ";
    *out += "const SECURITY_ATTRIBUTES* = "; // TEQ
    if (pstruct->pAttributes == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pAttributes = {false, false, false, nullptr};
        ScalarValueToString(out, pstruct_in.pAttributes->GetPointer(), vinfo_pAttributes); // PWT
    }
    *out += "\n"; // GDS

    // struct member: uint32_t dwAccess
    IndentSpaces(out, indent);
    *out += "dwAccess:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dwAccess); // UYW
}

void StructureToString(std::string* out, const Decoded_VkWin32KeyedMutexAcquireReleaseInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkWin32KeyedMutexAcquireReleaseInfoNV *pstruct = (const VkWin32KeyedMutexAcquireReleaseInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t acquireCount
    IndentSpaces(out, indent);
    *out += "acquireCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->acquireCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDeviceMemory* pAcquireSyncs
    IndentSpaces(out, indent);
    *out += "pAcquireSyncs:                  ";
    *out += "const VkDeviceMemory* = "; // TEQ
    if (pstruct->pAcquireSyncs == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAcquireSyncs.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pAcquireSyncs = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkDeviceMemory>>(out, indent, 1, "const VkDeviceMemory*", &pstruct_in.pAcquireSyncs, "pAcquireSyncs", pstruct->acquireCount,  vinfo_pAcquireSyncs);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const uint64_t* pAcquireKeys
    IndentSpaces(out, indent);
    *out += "pAcquireKeys:                   ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pAcquireKeys == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAcquireKeys.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pAcquireKeys = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pAcquireKeys, "pAcquireKeys", pstruct->acquireCount,  vinfo_pAcquireKeys);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const uint32_t* pAcquireTimeoutMilliseconds
    IndentSpaces(out, indent);
    *out += "pAcquireTimeoutMilliseconds:    ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pAcquireTimeoutMilliseconds == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAcquireTimeoutMilliseconds.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pAcquireTimeoutMilliseconds = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pAcquireTimeoutMilliseconds, "pAcquireTimeoutMilliseconds", pstruct->acquireCount,  vinfo_pAcquireTimeoutMilliseconds);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t releaseCount
    IndentSpaces(out, indent);
    *out += "releaseCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->releaseCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDeviceMemory* pReleaseSyncs
    IndentSpaces(out, indent);
    *out += "pReleaseSyncs:                  ";
    *out += "const VkDeviceMemory* = "; // TEQ
    if (pstruct->pReleaseSyncs == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pReleaseSyncs.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pReleaseSyncs = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkDeviceMemory>>(out, indent, 1, "const VkDeviceMemory*", &pstruct_in.pReleaseSyncs, "pReleaseSyncs", pstruct->releaseCount,  vinfo_pReleaseSyncs);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const uint64_t* pReleaseKeys
    IndentSpaces(out, indent);
    *out += "pReleaseKeys:                   ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pReleaseKeys == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pReleaseKeys.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pReleaseKeys = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pReleaseKeys, "pReleaseKeys", pstruct->releaseCount,  vinfo_pReleaseKeys);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkValidationFlagsEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkValidationFlagsEXT *pstruct = (const VkValidationFlagsEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t disabledValidationCheckCount
    IndentSpaces(out, indent);
    *out += "disabledValidationCheckCount:   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->disabledValidationCheckCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkValidationCheckEXT* pDisabledValidationChecks
    IndentSpaces(out, indent);
    *out += "pDisabledValidationChecks:      ";
    *out += "const VkValidationCheckEXT* = "; // TEQ
    if (pstruct->pDisabledValidationChecks == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDisabledValidationChecks.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pDisabledValidationChecks = {false, true, false, EnumToStringVkValidationCheckEXT};
        ArrayToString<PointerDecoder<VkValidationCheckEXT>>(out, indent, 1, "const VkValidationCheckEXT*", &pstruct_in.pDisabledValidationChecks, "pDisabledValidationChecks", pstruct->disabledValidationCheckCount,  vinfo_pDisabledValidationChecks);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkViSurfaceCreateInfoNN &pstruct_in, int indent, uint64_t base_addr)
{
    const VkViSurfaceCreateInfoNN *pstruct = (const VkViSurfaceCreateInfoNN *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkViSurfaceCreateFlagsNN flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkViSurfaceCreateFlagsNN = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: void* window
    IndentSpaces(out, indent);
    *out += "window:                         ";
    *out += "void* = "; // TEQ
    if (pstruct->window == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.window); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT *pstruct = (const VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 textureCompressionASTC_HDR
    IndentSpaces(out, indent);
    *out += "textureCompressionASTC_HDR:     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->textureCompressionASTC_HDR); //EQA
}

void StructureToString(std::string* out, const Decoded_VkImageViewASTCDecodeModeEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageViewASTCDecodeModeEXT *pstruct = (const VkImageViewASTCDecodeModeEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFormat decodeMode
    IndentSpaces(out, indent);
    *out += "decodeMode:                     ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->decodeMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->decodeMode);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceASTCDecodeFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceASTCDecodeFeaturesEXT *pstruct = (const VkPhysicalDeviceASTCDecodeFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 decodeModeSharedExponent
    IndentSpaces(out, indent);
    *out += "decodeModeSharedExponent:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->decodeModeSharedExponent); //EQA
}

void StructureToString(std::string* out, const Decoded_VkConditionalRenderingBeginInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkConditionalRenderingBeginInfoEXT *pstruct = (const VkConditionalRenderingBeginInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->offset); //EQA
    *out += "\n"; // GDS

    // struct member: VkConditionalRenderingFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkConditionalRenderingFlagsEXT = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkConditionalRenderingFlagBitsEXT); // URW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceConditionalRenderingFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceConditionalRenderingFeaturesEXT *pstruct = (const VkPhysicalDeviceConditionalRenderingFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 conditionalRendering
    IndentSpaces(out, indent);
    *out += "conditionalRendering:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->conditionalRendering); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 inheritedConditionalRendering
    IndentSpaces(out, indent);
    *out += "inheritedConditionalRendering:  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->inheritedConditionalRendering); //EQA
}

void StructureToString(std::string* out, const Decoded_VkCommandBufferInheritanceConditionalRenderingInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCommandBufferInheritanceConditionalRenderingInfoEXT *pstruct = (const VkCommandBufferInheritanceConditionalRenderingInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 conditionalRenderingEnable
    IndentSpaces(out, indent);
    *out += "conditionalRenderingEnable:     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->conditionalRenderingEnable); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDeviceGeneratedCommandsFeaturesNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGeneratedCommandsFeaturesNVX *pstruct = (const VkDeviceGeneratedCommandsFeaturesNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 computeBindingPointSupport
    IndentSpaces(out, indent);
    *out += "computeBindingPointSupport:     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->computeBindingPointSupport); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDeviceGeneratedCommandsLimitsNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceGeneratedCommandsLimitsNVX *pstruct = (const VkDeviceGeneratedCommandsLimitsNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxIndirectCommandsLayoutTokenCount
    IndentSpaces(out, indent);
    *out += "maxIndirectCommandsLayoutTokenCount: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxIndirectCommandsLayoutTokenCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxObjectEntryCounts
    IndentSpaces(out, indent);
    *out += "maxObjectEntryCounts:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxObjectEntryCounts); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t minSequenceCountBufferOffsetAlignment
    IndentSpaces(out, indent);
    *out += "minSequenceCountBufferOffsetAlignment: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minSequenceCountBufferOffsetAlignment); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t minSequenceIndexBufferOffsetAlignment
    IndentSpaces(out, indent);
    *out += "minSequenceIndexBufferOffsetAlignment: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minSequenceIndexBufferOffsetAlignment); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t minCommandsTokenBufferOffsetAlignment
    IndentSpaces(out, indent);
    *out += "minCommandsTokenBufferOffsetAlignment: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minCommandsTokenBufferOffsetAlignment); // UYW
}

void StructureToString(std::string* out, const Decoded_VkIndirectCommandsTokenNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkIndirectCommandsTokenNVX *pstruct = (const VkIndirectCommandsTokenNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkIndirectCommandsTokenTypeNVX tokenType
    IndentSpaces(out, indent);
    *out += "tokenType:                      ";
    *out += "VkIndirectCommandsTokenTypeNVX = "; // TEQ
    EnumToStringVkIndirectCommandsTokenTypeNVX(out, pstruct->tokenType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->tokenType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->offset); //EQA
}

void StructureToString(std::string* out, const Decoded_VkIndirectCommandsLayoutTokenNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkIndirectCommandsLayoutTokenNVX *pstruct = (const VkIndirectCommandsLayoutTokenNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkIndirectCommandsTokenTypeNVX tokenType
    IndentSpaces(out, indent);
    *out += "tokenType:                      ";
    *out += "VkIndirectCommandsTokenTypeNVX = "; // TEQ
    EnumToStringVkIndirectCommandsTokenTypeNVX(out, pstruct->tokenType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->tokenType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t bindingUnit
    IndentSpaces(out, indent);
    *out += "bindingUnit:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->bindingUnit); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t dynamicCount
    IndentSpaces(out, indent);
    *out += "dynamicCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dynamicCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t divisor
    IndentSpaces(out, indent);
    *out += "divisor:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->divisor); // UYW
}

void StructureToString(std::string* out, const Decoded_VkIndirectCommandsLayoutCreateInfoNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkIndirectCommandsLayoutCreateInfoNVX *pstruct = (const VkIndirectCommandsLayoutCreateInfoNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineBindPoint pipelineBindPoint
    IndentSpaces(out, indent);
    *out += "pipelineBindPoint:              ";
    *out += "VkPipelineBindPoint = "; // TEQ
    EnumToStringVkPipelineBindPoint(out, pstruct->pipelineBindPoint); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->pipelineBindPoint);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkIndirectCommandsLayoutUsageFlagsNVX flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkIndirectCommandsLayoutUsageFlagsNVX = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkIndirectCommandsLayoutUsageFlagBitsNVX); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t tokenCount
    IndentSpaces(out, indent);
    *out += "tokenCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->tokenCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkIndirectCommandsLayoutTokenNVX* pTokens
    IndentSpaces(out, indent);
    *out += "pTokens:                        ";
    *out += "const VkIndirectCommandsLayoutTokenNVX* = "; // TEQ
    if (pstruct->pTokens == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pTokens->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkIndirectCommandsLayoutTokenNVX>(out, indent+1, 1, "VkIndirectCommandsLayoutTokenNVX", pstruct_in.pTokens->GetMetaStructPointer(), "pTokens", pstruct->tokenCount, false, pstruct_in.pTokens->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkCmdProcessCommandsInfoNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCmdProcessCommandsInfoNVX *pstruct = (const VkCmdProcessCommandsInfoNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkObjectTableNVX objectTable
    IndentSpaces(out, indent);
    *out += "objectTable:                    ";
    *out += "VkObjectTableNVX = "; // TEQ
    AddrToString(out, pstruct_in.objectTable); // PAQ
    *out += "\n"; // GDS

    // struct member: VkIndirectCommandsLayoutNVX indirectCommandsLayout
    IndentSpaces(out, indent);
    *out += "indirectCommandsLayout:         ";
    *out += "VkIndirectCommandsLayoutNVX = "; // TEQ
    AddrToString(out, pstruct_in.indirectCommandsLayout); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t indirectCommandsTokenCount
    IndentSpaces(out, indent);
    *out += "indirectCommandsTokenCount:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->indirectCommandsTokenCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkIndirectCommandsTokenNVX* pIndirectCommandsTokens
    IndentSpaces(out, indent);
    *out += "pIndirectCommandsTokens:        ";
    *out += "const VkIndirectCommandsTokenNVX* = "; // TEQ
    if (pstruct->pIndirectCommandsTokens == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pIndirectCommandsTokens->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkIndirectCommandsTokenNVX>(out, indent+1, 1, "VkIndirectCommandsTokenNVX", pstruct_in.pIndirectCommandsTokens->GetMetaStructPointer(), "pIndirectCommandsTokens", pstruct->indirectCommandsTokenCount, false, pstruct_in.pIndirectCommandsTokens->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxSequencesCount
    IndentSpaces(out, indent);
    *out += "maxSequencesCount:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxSequencesCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkCommandBuffer targetCommandBuffer
    IndentSpaces(out, indent);
    *out += "targetCommandBuffer:            ";
    *out += "VkCommandBuffer = "; // TEQ
    AddrToString(out, pstruct_in.targetCommandBuffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkBuffer sequencesCountBuffer
    IndentSpaces(out, indent);
    *out += "sequencesCountBuffer:           ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.sequencesCountBuffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize sequencesCountOffset
    IndentSpaces(out, indent);
    *out += "sequencesCountOffset:           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->sequencesCountOffset); //EQA
    *out += "\n"; // GDS

    // struct member: VkBuffer sequencesIndexBuffer
    IndentSpaces(out, indent);
    *out += "sequencesIndexBuffer:           ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.sequencesIndexBuffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize sequencesIndexOffset
    IndentSpaces(out, indent);
    *out += "sequencesIndexOffset:           ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->sequencesIndexOffset); //EQA
}

void StructureToString(std::string* out, const Decoded_VkCmdReserveSpaceForCommandsInfoNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCmdReserveSpaceForCommandsInfoNVX *pstruct = (const VkCmdReserveSpaceForCommandsInfoNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkObjectTableNVX objectTable
    IndentSpaces(out, indent);
    *out += "objectTable:                    ";
    *out += "VkObjectTableNVX = "; // TEQ
    AddrToString(out, pstruct_in.objectTable); // PAQ
    *out += "\n"; // GDS

    // struct member: VkIndirectCommandsLayoutNVX indirectCommandsLayout
    IndentSpaces(out, indent);
    *out += "indirectCommandsLayout:         ";
    *out += "VkIndirectCommandsLayoutNVX = "; // TEQ
    AddrToString(out, pstruct_in.indirectCommandsLayout); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t maxSequencesCount
    IndentSpaces(out, indent);
    *out += "maxSequencesCount:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxSequencesCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkObjectTableCreateInfoNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkObjectTableCreateInfoNVX *pstruct = (const VkObjectTableCreateInfoNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t objectCount
    IndentSpaces(out, indent);
    *out += "objectCount:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->objectCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkObjectEntryTypeNVX* pObjectEntryTypes
    IndentSpaces(out, indent);
    *out += "pObjectEntryTypes:              ";
    *out += "const VkObjectEntryTypeNVX* = "; // TEQ
    if (pstruct->pObjectEntryTypes == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pObjectEntryTypes.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pObjectEntryTypes = {false, true, false, EnumToStringVkObjectEntryTypeNVX};
        ArrayToString<PointerDecoder<VkObjectEntryTypeNVX>>(out, indent, 1, "const VkObjectEntryTypeNVX*", &pstruct_in.pObjectEntryTypes, "pObjectEntryTypes", pstruct->objectCount,  vinfo_pObjectEntryTypes);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const uint32_t* pObjectEntryCounts
    IndentSpaces(out, indent);
    *out += "pObjectEntryCounts:             ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pObjectEntryCounts == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pObjectEntryCounts.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pObjectEntryCounts = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pObjectEntryCounts, "pObjectEntryCounts", pstruct->objectCount,  vinfo_pObjectEntryCounts);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: const VkObjectEntryUsageFlagsNVX* pObjectEntryUsageFlags
    IndentSpaces(out, indent);
    *out += "pObjectEntryUsageFlags:         ";
    *out += "const VkObjectEntryUsageFlagsNVX* = "; // TEQ
    if (pstruct->pObjectEntryUsageFlags == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pObjectEntryUsageFlags.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pObjectEntryUsageFlags = {false, false, true, EnumToStringVkObjectEntryUsageFlagBitsNVX};
        ArrayToString<PointerDecoder<VkObjectEntryUsageFlagsNVX>>(out, indent, 1, "const VkObjectEntryUsageFlagsNVX*", &pstruct_in.pObjectEntryUsageFlags, "pObjectEntryUsageFlags", pstruct->objectCount,  vinfo_pObjectEntryUsageFlags);  // CCR
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxUniformBuffersPerDescriptor
    IndentSpaces(out, indent);
    *out += "maxUniformBuffersPerDescriptor: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxUniformBuffersPerDescriptor); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxStorageBuffersPerDescriptor
    IndentSpaces(out, indent);
    *out += "maxStorageBuffersPerDescriptor: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxStorageBuffersPerDescriptor); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxStorageImagesPerDescriptor
    IndentSpaces(out, indent);
    *out += "maxStorageImagesPerDescriptor:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxStorageImagesPerDescriptor); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxSampledImagesPerDescriptor
    IndentSpaces(out, indent);
    *out += "maxSampledImagesPerDescriptor:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxSampledImagesPerDescriptor); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPipelineLayouts
    IndentSpaces(out, indent);
    *out += "maxPipelineLayouts:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPipelineLayouts); // UYW
}

void StructureToString(std::string* out, const Decoded_VkObjectTableEntryNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkObjectTableEntryNVX *pstruct = (const VkObjectTableEntryNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkObjectEntryTypeNVX type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkObjectEntryTypeNVX = "; // TEQ
    EnumToStringVkObjectEntryTypeNVX(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkObjectEntryUsageFlagsNVX flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkObjectEntryUsageFlagsNVX = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkObjectEntryUsageFlagBitsNVX); // URW
}

void StructureToString(std::string* out, const Decoded_VkObjectTablePipelineEntryNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkObjectTablePipelineEntryNVX *pstruct = (const VkObjectTablePipelineEntryNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkObjectEntryTypeNVX type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkObjectEntryTypeNVX = "; // TEQ
    EnumToStringVkObjectEntryTypeNVX(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkObjectEntryUsageFlagsNVX flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkObjectEntryUsageFlagsNVX = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkObjectEntryUsageFlagBitsNVX); // URW
    *out += "\n"; // GDS

    // struct member: VkPipeline pipeline
    IndentSpaces(out, indent);
    *out += "pipeline:                       ";
    *out += "VkPipeline = "; // TEQ
    AddrToString(out, pstruct_in.pipeline); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkObjectTableDescriptorSetEntryNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkObjectTableDescriptorSetEntryNVX *pstruct = (const VkObjectTableDescriptorSetEntryNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkObjectEntryTypeNVX type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkObjectEntryTypeNVX = "; // TEQ
    EnumToStringVkObjectEntryTypeNVX(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkObjectEntryUsageFlagsNVX flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkObjectEntryUsageFlagsNVX = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkObjectEntryUsageFlagBitsNVX); // URW
    *out += "\n"; // GDS

    // struct member: VkPipelineLayout pipelineLayout
    IndentSpaces(out, indent);
    *out += "pipelineLayout:                 ";
    *out += "VkPipelineLayout = "; // TEQ
    AddrToString(out, pstruct_in.pipelineLayout); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDescriptorSet descriptorSet
    IndentSpaces(out, indent);
    *out += "descriptorSet:                  ";
    *out += "VkDescriptorSet = "; // TEQ
    AddrToString(out, pstruct_in.descriptorSet); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkObjectTableVertexBufferEntryNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkObjectTableVertexBufferEntryNVX *pstruct = (const VkObjectTableVertexBufferEntryNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkObjectEntryTypeNVX type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkObjectEntryTypeNVX = "; // TEQ
    EnumToStringVkObjectEntryTypeNVX(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkObjectEntryUsageFlagsNVX flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkObjectEntryUsageFlagsNVX = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkObjectEntryUsageFlagBitsNVX); // URW
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkObjectTableIndexBufferEntryNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkObjectTableIndexBufferEntryNVX *pstruct = (const VkObjectTableIndexBufferEntryNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkObjectEntryTypeNVX type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkObjectEntryTypeNVX = "; // TEQ
    EnumToStringVkObjectEntryTypeNVX(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkObjectEntryUsageFlagsNVX flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkObjectEntryUsageFlagsNVX = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkObjectEntryUsageFlagBitsNVX); // URW
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
    *out += "\n"; // GDS

    // struct member: VkIndexType indexType
    IndentSpaces(out, indent);
    *out += "indexType:                      ";
    *out += "VkIndexType = "; // TEQ
    EnumToStringVkIndexType(out, pstruct->indexType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->indexType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkObjectTablePushConstantEntryNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkObjectTablePushConstantEntryNVX *pstruct = (const VkObjectTablePushConstantEntryNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkObjectEntryTypeNVX type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkObjectEntryTypeNVX = "; // TEQ
    EnumToStringVkObjectEntryTypeNVX(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkObjectEntryUsageFlagsNVX flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkObjectEntryUsageFlagsNVX = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkObjectEntryUsageFlagBitsNVX); // URW
    *out += "\n"; // GDS

    // struct member: VkPipelineLayout pipelineLayout
    IndentSpaces(out, indent);
    *out += "pipelineLayout:                 ";
    *out += "VkPipelineLayout = "; // TEQ
    AddrToString(out, pstruct_in.pipelineLayout); // PAQ
    *out += "\n"; // GDS

    // struct member: VkShaderStageFlags stageFlags
    IndentSpaces(out, indent);
    *out += "stageFlags:                     ";
    *out += "VkShaderStageFlags = "; // TEQ
    FlagsToString(out, pstruct->stageFlags, EnumToStringVkShaderStageFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkViewportWScalingNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkViewportWScalingNV *pstruct = (const VkViewportWScalingNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: float xcoeff
    IndentSpaces(out, indent);
    *out += "xcoeff:                         ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->xcoeff); // PEZ
    *out += "\n"; // GDS

    // struct member: float ycoeff
    IndentSpaces(out, indent);
    *out += "ycoeff:                         ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->ycoeff); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkPipelineViewportWScalingStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineViewportWScalingStateCreateInfoNV *pstruct = (const VkPipelineViewportWScalingStateCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 viewportWScalingEnable
    IndentSpaces(out, indent);
    *out += "viewportWScalingEnable:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->viewportWScalingEnable); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t viewportCount
    IndentSpaces(out, indent);
    *out += "viewportCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->viewportCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkViewportWScalingNV* pViewportWScalings
    IndentSpaces(out, indent);
    *out += "pViewportWScalings:             ";
    *out += "const VkViewportWScalingNV* = "; // TEQ
    if (pstruct->pViewportWScalings == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pViewportWScalings->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkViewportWScalingNV>(out, indent+1, 1, "VkViewportWScalingNV", pstruct_in.pViewportWScalings->GetMetaStructPointer(), "pViewportWScalings", pstruct->viewportCount, false, pstruct_in.pViewportWScalings->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkSurfaceCapabilities2EXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSurfaceCapabilities2EXT *pstruct = (const VkSurfaceCapabilities2EXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t minImageCount
    IndentSpaces(out, indent);
    *out += "minImageCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minImageCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxImageCount
    IndentSpaces(out, indent);
    *out += "maxImageCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxImageCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkExtent2D currentExtent
    IndentSpaces(out, indent);
    *out += "currentExtent:                  ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.currentExtent, indent+1,  base_addr + offsetof(VkSurfaceCapabilities2EXT, currentExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D minImageExtent
    IndentSpaces(out, indent);
    *out += "minImageExtent:                 ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.minImageExtent, indent+1,  base_addr + offsetof(VkSurfaceCapabilities2EXT, minImageExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D maxImageExtent
    IndentSpaces(out, indent);
    *out += "maxImageExtent:                 ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.maxImageExtent, indent+1,  base_addr + offsetof(VkSurfaceCapabilities2EXT, maxImageExtent)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t maxImageArrayLayers
    IndentSpaces(out, indent);
    *out += "maxImageArrayLayers:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxImageArrayLayers); // UYW
    *out += "\n"; // GDS

    // struct member: VkSurfaceTransformFlagsKHR supportedTransforms
    IndentSpaces(out, indent);
    *out += "supportedTransforms:            ";
    *out += "VkSurfaceTransformFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->supportedTransforms, EnumToStringVkSurfaceTransformFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: VkSurfaceTransformFlagBitsKHR currentTransform
    IndentSpaces(out, indent);
    *out += "currentTransform:               ";
    *out += "VkSurfaceTransformFlagBitsKHR = "; // TEQ
    EnumToStringVkSurfaceTransformFlagBitsKHR(out, pstruct->currentTransform); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->currentTransform);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkCompositeAlphaFlagsKHR supportedCompositeAlpha
    IndentSpaces(out, indent);
    *out += "supportedCompositeAlpha:        ";
    *out += "VkCompositeAlphaFlagsKHR = "; // TEQ
    FlagsToString(out, pstruct->supportedCompositeAlpha, EnumToStringVkCompositeAlphaFlagBitsKHR); // URW
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags supportedUsageFlags
    IndentSpaces(out, indent);
    *out += "supportedUsageFlags:            ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->supportedUsageFlags, EnumToStringVkImageUsageFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSurfaceCounterFlagsEXT supportedSurfaceCounters
    IndentSpaces(out, indent);
    *out += "supportedSurfaceCounters:       ";
    *out += "VkSurfaceCounterFlagsEXT = "; // TEQ
    FlagsToString(out, pstruct->supportedSurfaceCounters, EnumToStringVkSurfaceCounterFlagBitsEXT); // URW
}

void StructureToString(std::string* out, const Decoded_VkDisplayPowerInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayPowerInfoEXT *pstruct = (const VkDisplayPowerInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDisplayPowerStateEXT powerState
    IndentSpaces(out, indent);
    *out += "powerState:                     ";
    *out += "VkDisplayPowerStateEXT = "; // TEQ
    EnumToStringVkDisplayPowerStateEXT(out, pstruct->powerState); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->powerState);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkDeviceEventInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceEventInfoEXT *pstruct = (const VkDeviceEventInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceEventTypeEXT deviceEvent
    IndentSpaces(out, indent);
    *out += "deviceEvent:                    ";
    *out += "VkDeviceEventTypeEXT = "; // TEQ
    EnumToStringVkDeviceEventTypeEXT(out, pstruct->deviceEvent); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->deviceEvent);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkDisplayEventInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayEventInfoEXT *pstruct = (const VkDisplayEventInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDisplayEventTypeEXT displayEvent
    IndentSpaces(out, indent);
    *out += "displayEvent:                   ";
    *out += "VkDisplayEventTypeEXT = "; // TEQ
    EnumToStringVkDisplayEventTypeEXT(out, pstruct->displayEvent); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->displayEvent);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkSwapchainCounterCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSwapchainCounterCreateInfoEXT *pstruct = (const VkSwapchainCounterCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSurfaceCounterFlagsEXT surfaceCounters
    IndentSpaces(out, indent);
    *out += "surfaceCounters:                ";
    *out += "VkSurfaceCounterFlagsEXT = "; // TEQ
    FlagsToString(out, pstruct->surfaceCounters, EnumToStringVkSurfaceCounterFlagBitsEXT); // URW
}

void StructureToString(std::string* out, const Decoded_VkRefreshCycleDurationGOOGLE &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRefreshCycleDurationGOOGLE *pstruct = (const VkRefreshCycleDurationGOOGLE *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint64_t refreshDuration
    IndentSpaces(out, indent);
    *out += "refreshDuration:                ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->refreshDuration); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPastPresentationTimingGOOGLE &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPastPresentationTimingGOOGLE *pstruct = (const VkPastPresentationTimingGOOGLE *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t presentID
    IndentSpaces(out, indent);
    *out += "presentID:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->presentID); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t desiredPresentTime
    IndentSpaces(out, indent);
    *out += "desiredPresentTime:             ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->desiredPresentTime); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t actualPresentTime
    IndentSpaces(out, indent);
    *out += "actualPresentTime:              ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->actualPresentTime); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t earliestPresentTime
    IndentSpaces(out, indent);
    *out += "earliestPresentTime:            ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->earliestPresentTime); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t presentMargin
    IndentSpaces(out, indent);
    *out += "presentMargin:                  ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->presentMargin); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPresentTimeGOOGLE &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPresentTimeGOOGLE *pstruct = (const VkPresentTimeGOOGLE *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t presentID
    IndentSpaces(out, indent);
    *out += "presentID:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->presentID); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t desiredPresentTime
    IndentSpaces(out, indent);
    *out += "desiredPresentTime:             ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->desiredPresentTime); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPresentTimesInfoGOOGLE &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPresentTimesInfoGOOGLE *pstruct = (const VkPresentTimesInfoGOOGLE *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t swapchainCount
    IndentSpaces(out, indent);
    *out += "swapchainCount:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->swapchainCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkPresentTimeGOOGLE* pTimes
    IndentSpaces(out, indent);
    *out += "pTimes:                         ";
    *out += "const VkPresentTimeGOOGLE* = "; // TEQ
    if (pstruct->pTimes == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pTimes->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkPresentTimeGOOGLE>(out, indent+1, 1, "VkPresentTimeGOOGLE", pstruct_in.pTimes->GetMetaStructPointer(), "pTimes", pstruct->swapchainCount, false, pstruct_in.pTimes->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX *pstruct = (const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 perViewPositionAllComponents
    IndentSpaces(out, indent);
    *out += "perViewPositionAllComponents:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->perViewPositionAllComponents); //EQA
}

void StructureToString(std::string* out, const Decoded_VkViewportSwizzleNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkViewportSwizzleNV *pstruct = (const VkViewportSwizzleNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkViewportCoordinateSwizzleNV x
    IndentSpaces(out, indent);
    *out += "x:                              ";
    *out += "VkViewportCoordinateSwizzleNV = "; // TEQ
    EnumToStringVkViewportCoordinateSwizzleNV(out, pstruct->x); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->x);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkViewportCoordinateSwizzleNV y
    IndentSpaces(out, indent);
    *out += "y:                              ";
    *out += "VkViewportCoordinateSwizzleNV = "; // TEQ
    EnumToStringVkViewportCoordinateSwizzleNV(out, pstruct->y); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->y);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkViewportCoordinateSwizzleNV z
    IndentSpaces(out, indent);
    *out += "z:                              ";
    *out += "VkViewportCoordinateSwizzleNV = "; // TEQ
    EnumToStringVkViewportCoordinateSwizzleNV(out, pstruct->z); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->z);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkViewportCoordinateSwizzleNV w
    IndentSpaces(out, indent);
    *out += "w:                              ";
    *out += "VkViewportCoordinateSwizzleNV = "; // TEQ
    EnumToStringVkViewportCoordinateSwizzleNV(out, pstruct->w); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->w);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPipelineViewportSwizzleStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineViewportSwizzleStateCreateInfoNV *pstruct = (const VkPipelineViewportSwizzleStateCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineViewportSwizzleStateCreateFlagsNV flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineViewportSwizzleStateCreateFlagsNV = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t viewportCount
    IndentSpaces(out, indent);
    *out += "viewportCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->viewportCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkViewportSwizzleNV* pViewportSwizzles
    IndentSpaces(out, indent);
    *out += "pViewportSwizzles:              ";
    *out += "const VkViewportSwizzleNV* = "; // TEQ
    if (pstruct->pViewportSwizzles == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pViewportSwizzles->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkViewportSwizzleNV>(out, indent+1, 1, "VkViewportSwizzleNV", pstruct_in.pViewportSwizzles->GetMetaStructPointer(), "pViewportSwizzles", pstruct->viewportCount, false, pstruct_in.pViewportSwizzles->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDiscardRectanglePropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceDiscardRectanglePropertiesEXT *pstruct = (const VkPhysicalDeviceDiscardRectanglePropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxDiscardRectangles
    IndentSpaces(out, indent);
    *out += "maxDiscardRectangles:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDiscardRectangles); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineDiscardRectangleStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineDiscardRectangleStateCreateInfoEXT *pstruct = (const VkPipelineDiscardRectangleStateCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineDiscardRectangleStateCreateFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineDiscardRectangleStateCreateFlagsEXT = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkDiscardRectangleModeEXT discardRectangleMode
    IndentSpaces(out, indent);
    *out += "discardRectangleMode:           ";
    *out += "VkDiscardRectangleModeEXT = "; // TEQ
    EnumToStringVkDiscardRectangleModeEXT(out, pstruct->discardRectangleMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->discardRectangleMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t discardRectangleCount
    IndentSpaces(out, indent);
    *out += "discardRectangleCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->discardRectangleCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkRect2D* pDiscardRectangles
    IndentSpaces(out, indent);
    *out += "pDiscardRectangles:             ";
    *out += "const VkRect2D* = "; // TEQ
    if (pstruct->pDiscardRectangles == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDiscardRectangles->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkRect2D>(out, indent+1, 1, "VkRect2D", pstruct_in.pDiscardRectangles->GetMetaStructPointer(), "pDiscardRectangles", pstruct->discardRectangleCount, false, pstruct_in.pDiscardRectangles->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceConservativeRasterizationPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceConservativeRasterizationPropertiesEXT *pstruct = (const VkPhysicalDeviceConservativeRasterizationPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: float primitiveOverestimationSize
    IndentSpaces(out, indent);
    *out += "primitiveOverestimationSize:    ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->primitiveOverestimationSize); // PEZ
    *out += "\n"; // GDS

    // struct member: float maxExtraPrimitiveOverestimationSize
    IndentSpaces(out, indent);
    *out += "maxExtraPrimitiveOverestimationSize: ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxExtraPrimitiveOverestimationSize); // PEZ
    *out += "\n"; // GDS

    // struct member: float extraPrimitiveOverestimationSizeGranularity
    IndentSpaces(out, indent);
    *out += "extraPrimitiveOverestimationSizeGranularity: ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->extraPrimitiveOverestimationSizeGranularity); // PEZ
    *out += "\n"; // GDS

    // struct member: VkBool32 primitiveUnderestimation
    IndentSpaces(out, indent);
    *out += "primitiveUnderestimation:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->primitiveUnderestimation); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 conservativePointAndLineRasterization
    IndentSpaces(out, indent);
    *out += "conservativePointAndLineRasterization: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->conservativePointAndLineRasterization); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 degenerateTrianglesRasterized
    IndentSpaces(out, indent);
    *out += "degenerateTrianglesRasterized:  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->degenerateTrianglesRasterized); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 degenerateLinesRasterized
    IndentSpaces(out, indent);
    *out += "degenerateLinesRasterized:      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->degenerateLinesRasterized); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 fullyCoveredFragmentShaderInputVariable
    IndentSpaces(out, indent);
    *out += "fullyCoveredFragmentShaderInputVariable: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fullyCoveredFragmentShaderInputVariable); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 conservativeRasterizationPostDepthCoverage
    IndentSpaces(out, indent);
    *out += "conservativeRasterizationPostDepthCoverage: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->conservativeRasterizationPostDepthCoverage); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationConservativeStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineRasterizationConservativeStateCreateInfoEXT *pstruct = (const VkPipelineRasterizationConservativeStateCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineRasterizationConservativeStateCreateFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineRasterizationConservativeStateCreateFlagsEXT = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkConservativeRasterizationModeEXT conservativeRasterizationMode
    IndentSpaces(out, indent);
    *out += "conservativeRasterizationMode:  ";
    *out += "VkConservativeRasterizationModeEXT = "; // TEQ
    EnumToStringVkConservativeRasterizationModeEXT(out, pstruct->conservativeRasterizationMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->conservativeRasterizationMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: float extraPrimitiveOverestimationSize
    IndentSpaces(out, indent);
    *out += "extraPrimitiveOverestimationSize: ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->extraPrimitiveOverestimationSize); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDepthClipEnableFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceDepthClipEnableFeaturesEXT *pstruct = (const VkPhysicalDeviceDepthClipEnableFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 depthClipEnable
    IndentSpaces(out, indent);
    *out += "depthClipEnable:                ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthClipEnable); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationDepthClipStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineRasterizationDepthClipStateCreateInfoEXT *pstruct = (const VkPipelineRasterizationDepthClipStateCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineRasterizationDepthClipStateCreateFlagsEXT = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 depthClipEnable
    IndentSpaces(out, indent);
    *out += "depthClipEnable:                ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->depthClipEnable); //EQA
}

void StructureToString(std::string* out, const Decoded_VkXYColorEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkXYColorEXT *pstruct = (const VkXYColorEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: float x
    IndentSpaces(out, indent);
    *out += "x:                              ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->x); // PEZ
    *out += "\n"; // GDS

    // struct member: float y
    IndentSpaces(out, indent);
    *out += "y:                              ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->y); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkHdrMetadataEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkHdrMetadataEXT *pstruct = (const VkHdrMetadataEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkXYColorEXT displayPrimaryRed
    IndentSpaces(out, indent);
    *out += "displayPrimaryRed:              ";
    *out += "VkXYColorEXT = "; // TEQ
    StructureToString(out, *pstruct_in.displayPrimaryRed, indent+1,  base_addr + offsetof(VkHdrMetadataEXT, displayPrimaryRed)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkXYColorEXT displayPrimaryGreen
    IndentSpaces(out, indent);
    *out += "displayPrimaryGreen:            ";
    *out += "VkXYColorEXT = "; // TEQ
    StructureToString(out, *pstruct_in.displayPrimaryGreen, indent+1,  base_addr + offsetof(VkHdrMetadataEXT, displayPrimaryGreen)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkXYColorEXT displayPrimaryBlue
    IndentSpaces(out, indent);
    *out += "displayPrimaryBlue:             ";
    *out += "VkXYColorEXT = "; // TEQ
    StructureToString(out, *pstruct_in.displayPrimaryBlue, indent+1,  base_addr + offsetof(VkHdrMetadataEXT, displayPrimaryBlue)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkXYColorEXT whitePoint
    IndentSpaces(out, indent);
    *out += "whitePoint:                     ";
    *out += "VkXYColorEXT = "; // TEQ
    StructureToString(out, *pstruct_in.whitePoint, indent+1,  base_addr + offsetof(VkHdrMetadataEXT, whitePoint)); // AZJ
    *out += "\n"; // GDS

    // struct member: float maxLuminance
    IndentSpaces(out, indent);
    *out += "maxLuminance:                   ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxLuminance); // PEZ
    *out += "\n"; // GDS

    // struct member: float minLuminance
    IndentSpaces(out, indent);
    *out += "minLuminance:                   ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->minLuminance); // PEZ
    *out += "\n"; // GDS

    // struct member: float maxContentLightLevel
    IndentSpaces(out, indent);
    *out += "maxContentLightLevel:           ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxContentLightLevel); // PEZ
    *out += "\n"; // GDS

    // struct member: float maxFrameAverageLightLevel
    IndentSpaces(out, indent);
    *out += "maxFrameAverageLightLevel:      ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->maxFrameAverageLightLevel); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkIOSSurfaceCreateInfoMVK &pstruct_in, int indent, uint64_t base_addr)
{
    const VkIOSSurfaceCreateInfoMVK *pstruct = (const VkIOSSurfaceCreateInfoMVK *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkIOSSurfaceCreateFlagsMVK flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkIOSSurfaceCreateFlagsMVK = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: const void* pView
    IndentSpaces(out, indent);
    *out += "pView:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pView == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pView); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkMacOSSurfaceCreateInfoMVK &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMacOSSurfaceCreateInfoMVK *pstruct = (const VkMacOSSurfaceCreateInfoMVK *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkMacOSSurfaceCreateFlagsMVK flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkMacOSSurfaceCreateFlagsMVK = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: const void* pView
    IndentSpaces(out, indent);
    *out += "pView:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pView == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pView); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkDebugUtilsObjectNameInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDebugUtilsObjectNameInfoEXT *pstruct = (const VkDebugUtilsObjectNameInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkObjectType objectType
    IndentSpaces(out, indent);
    *out += "objectType:                     ";
    *out += "VkObjectType = "; // TEQ
    EnumToStringVkObjectType(out, pstruct->objectType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->objectType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint64_t objectHandle
    IndentSpaces(out, indent);
    *out += "objectHandle:                   ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->objectHandle); // UYW
    *out += "\n"; // GDS

    // struct member: const char* pObjectName
    IndentSpaces(out, indent);
    *out += "pObjectName:                    ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->pObjectName); // TGI
}

void StructureToString(std::string* out, const Decoded_VkDebugUtilsObjectTagInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDebugUtilsObjectTagInfoEXT *pstruct = (const VkDebugUtilsObjectTagInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkObjectType objectType
    IndentSpaces(out, indent);
    *out += "objectType:                     ";
    *out += "VkObjectType = "; // TEQ
    EnumToStringVkObjectType(out, pstruct->objectType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->objectType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint64_t objectHandle
    IndentSpaces(out, indent);
    *out += "objectHandle:                   ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->objectHandle); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t tagName
    IndentSpaces(out, indent);
    *out += "tagName:                        ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->tagName); // UYW
    *out += "\n"; // GDS

    // struct member: size_t tagSize
    IndentSpaces(out, indent);
    *out += "tagSize:                        ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->tagSize); // UYW
    *out += "\n"; // GDS

    // struct member: const void* pTag
    IndentSpaces(out, indent);
    *out += "pTag:                           ";
    *out += "const void* = "; // TEQ
    if (pstruct->pTag == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pTag.GetAddress()); // AHW
    }
}

void StructureToString(std::string* out, const Decoded_VkDebugUtilsLabelEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDebugUtilsLabelEXT *pstruct = (const VkDebugUtilsLabelEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: const char* pLabelName
    IndentSpaces(out, indent);
    *out += "pLabelName:                     ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->pLabelName); // TGI
    *out += "\n"; // GDS

    // struct member: float color
    IndentSpaces(out, indent);
    *out += "color:                          ";
    *out += "float[";
    *out += "4"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkDebugUtilsLabelEXT, color)); // IYY
    ScalarValueToStringStruct vinfo_color = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<float>>(out, indent, 0, "float", &pstruct_in.color, "color", 4, vinfo_color); // JPE
}

void StructureToString(std::string* out, const Decoded_VkDebugUtilsMessengerCallbackDataEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDebugUtilsMessengerCallbackDataEXT *pstruct = (const VkDebugUtilsMessengerCallbackDataEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDebugUtilsMessengerCallbackDataFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDebugUtilsMessengerCallbackDataFlagsEXT = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: const char* pMessageIdName
    IndentSpaces(out, indent);
    *out += "pMessageIdName:                 ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->pMessageIdName); // TGI
    *out += "\n"; // GDS

    // struct member: int32_t messageIdNumber
    IndentSpaces(out, indent);
    *out += "messageIdNumber:                ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->messageIdNumber); //EQA
    *out += "\n"; // GDS

    // struct member: const char* pMessage
    IndentSpaces(out, indent);
    *out += "pMessage:                       ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->pMessage); // TGI
    *out += "\n"; // GDS

    // struct member: uint32_t queueLabelCount
    IndentSpaces(out, indent);
    *out += "queueLabelCount:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueLabelCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDebugUtilsLabelEXT* pQueueLabels
    IndentSpaces(out, indent);
    *out += "pQueueLabels:                   ";
    *out += "const VkDebugUtilsLabelEXT* = "; // TEQ
    if (pstruct->pQueueLabels == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pQueueLabels->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDebugUtilsLabelEXT>(out, indent+1, 1, "VkDebugUtilsLabelEXT", pstruct_in.pQueueLabels->GetMetaStructPointer(), "pQueueLabels", pstruct->queueLabelCount, false, pstruct_in.pQueueLabels->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t cmdBufLabelCount
    IndentSpaces(out, indent);
    *out += "cmdBufLabelCount:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->cmdBufLabelCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDebugUtilsLabelEXT* pCmdBufLabels
    IndentSpaces(out, indent);
    *out += "pCmdBufLabels:                  ";
    *out += "const VkDebugUtilsLabelEXT* = "; // TEQ
    if (pstruct->pCmdBufLabels == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pCmdBufLabels->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDebugUtilsLabelEXT>(out, indent+1, 1, "VkDebugUtilsLabelEXT", pstruct_in.pCmdBufLabels->GetMetaStructPointer(), "pCmdBufLabels", pstruct->cmdBufLabelCount, false, pstruct_in.pCmdBufLabels->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t objectCount
    IndentSpaces(out, indent);
    *out += "objectCount:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->objectCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDebugUtilsObjectNameInfoEXT* pObjects
    IndentSpaces(out, indent);
    *out += "pObjects:                       ";
    *out += "const VkDebugUtilsObjectNameInfoEXT* = "; // TEQ
    if (pstruct->pObjects == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pObjects->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDebugUtilsObjectNameInfoEXT>(out, indent+1, 1, "VkDebugUtilsObjectNameInfoEXT", pstruct_in.pObjects->GetMetaStructPointer(), "pObjects", pstruct->objectCount, false, pstruct_in.pObjects->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkDebugUtilsMessengerCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDebugUtilsMessengerCreateInfoEXT *pstruct = (const VkDebugUtilsMessengerCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDebugUtilsMessengerCreateFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkDebugUtilsMessengerCreateFlagsEXT = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkDebugUtilsMessageSeverityFlagsEXT messageSeverity
    IndentSpaces(out, indent);
    *out += "messageSeverity:                ";
    *out += "VkDebugUtilsMessageSeverityFlagsEXT = "; // TEQ
    FlagsToString(out, pstruct->messageSeverity, EnumToStringVkDebugUtilsMessageSeverityFlagBitsEXT); // URW
    *out += "\n"; // GDS

    // struct member: VkDebugUtilsMessageTypeFlagsEXT messageType
    IndentSpaces(out, indent);
    *out += "messageType:                    ";
    *out += "VkDebugUtilsMessageTypeFlagsEXT = "; // TEQ
    FlagsToString(out, pstruct->messageType, EnumToStringVkDebugUtilsMessageTypeFlagBitsEXT); // URW
    *out += "\n"; // GDS

    // struct member: PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback
    IndentSpaces(out, indent);
    *out += "pfnUserCallback:                ";
    *out += "PFN_vkDebugUtilsMessengerCallbackEXT = "; // TEQ
    AddrToString(out, reinterpret_cast<uint64_t>(pstruct->pfnUserCallback)); // WRX
    *out += "\n"; // GDS

    // struct member: void* pUserData
    IndentSpaces(out, indent);
    *out += "pUserData:                      ";
    *out += "void* = "; // TEQ
    if (pstruct->pUserData == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pUserData); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkAndroidHardwareBufferUsageANDROID &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAndroidHardwareBufferUsageANDROID *pstruct = (const VkAndroidHardwareBufferUsageANDROID *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint64_t androidHardwareBufferUsage
    IndentSpaces(out, indent);
    *out += "androidHardwareBufferUsage:     ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->androidHardwareBufferUsage); // UYW
}

void StructureToString(std::string* out, const Decoded_VkAndroidHardwareBufferPropertiesANDROID &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAndroidHardwareBufferPropertiesANDROID *pstruct = (const VkAndroidHardwareBufferPropertiesANDROID *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceSize allocationSize
    IndentSpaces(out, indent);
    *out += "allocationSize:                 ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->allocationSize); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t memoryTypeBits
    IndentSpaces(out, indent);
    *out += "memoryTypeBits:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->memoryTypeBits); // UYW
}

void StructureToString(std::string* out, const Decoded_VkAndroidHardwareBufferFormatPropertiesANDROID &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAndroidHardwareBufferFormatPropertiesANDROID *pstruct = (const VkAndroidHardwareBufferFormatPropertiesANDROID *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFormat format
    IndentSpaces(out, indent);
    *out += "format:                         ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->format); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->format);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint64_t externalFormat
    IndentSpaces(out, indent);
    *out += "externalFormat:                 ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->externalFormat); // UYW
    *out += "\n"; // GDS

    // struct member: VkFormatFeatureFlags formatFeatures
    IndentSpaces(out, indent);
    *out += "formatFeatures:                 ";
    *out += "VkFormatFeatureFlags = "; // TEQ
    FlagsToString(out, pstruct->formatFeatures, EnumToStringVkFormatFeatureFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkComponentMapping samplerYcbcrConversionComponents
    IndentSpaces(out, indent);
    *out += "samplerYcbcrConversionComponents: ";
    *out += "VkComponentMapping = "; // TEQ
    StructureToString(out, *pstruct_in.samplerYcbcrConversionComponents, indent+1,  base_addr + offsetof(VkAndroidHardwareBufferFormatPropertiesANDROID, samplerYcbcrConversionComponents)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkSamplerYcbcrModelConversion suggestedYcbcrModel
    IndentSpaces(out, indent);
    *out += "suggestedYcbcrModel:            ";
    *out += "VkSamplerYcbcrModelConversion = "; // TEQ
    EnumToStringVkSamplerYcbcrModelConversion(out, pstruct->suggestedYcbcrModel); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->suggestedYcbcrModel);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSamplerYcbcrRange suggestedYcbcrRange
    IndentSpaces(out, indent);
    *out += "suggestedYcbcrRange:            ";
    *out += "VkSamplerYcbcrRange = "; // TEQ
    EnumToStringVkSamplerYcbcrRange(out, pstruct->suggestedYcbcrRange); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->suggestedYcbcrRange);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkChromaLocation suggestedXChromaOffset
    IndentSpaces(out, indent);
    *out += "suggestedXChromaOffset:         ";
    *out += "VkChromaLocation = "; // TEQ
    EnumToStringVkChromaLocation(out, pstruct->suggestedXChromaOffset); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->suggestedXChromaOffset);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkChromaLocation suggestedYChromaOffset
    IndentSpaces(out, indent);
    *out += "suggestedYChromaOffset:         ";
    *out += "VkChromaLocation = "; // TEQ
    EnumToStringVkChromaLocation(out, pstruct->suggestedYChromaOffset); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->suggestedYChromaOffset);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkImportAndroidHardwareBufferInfoANDROID &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImportAndroidHardwareBufferInfoANDROID *pstruct = (const VkImportAndroidHardwareBufferInfoANDROID *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: struct void* buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "struct void* = "; // TEQ
    if (pstruct->buffer == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.buffer); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkMemoryGetAndroidHardwareBufferInfoANDROID &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryGetAndroidHardwareBufferInfoANDROID *pstruct = (const VkMemoryGetAndroidHardwareBufferInfoANDROID *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceMemory memory
    IndentSpaces(out, indent);
    *out += "memory:                         ";
    *out += "VkDeviceMemory = "; // TEQ
    AddrToString(out, pstruct_in.memory); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkExternalFormatANDROID &pstruct_in, int indent, uint64_t base_addr)
{
    const VkExternalFormatANDROID *pstruct = (const VkExternalFormatANDROID *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint64_t externalFormat
    IndentSpaces(out, indent);
    *out += "externalFormat:                 ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->externalFormat); // UYW
}

void StructureToString(std::string* out, const Decoded_VkSamplerReductionModeCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSamplerReductionModeCreateInfoEXT *pstruct = (const VkSamplerReductionModeCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSamplerReductionModeEXT reductionMode
    IndentSpaces(out, indent);
    *out += "reductionMode:                  ";
    *out += "VkSamplerReductionModeEXT = "; // TEQ
    EnumToStringVkSamplerReductionModeEXT(out, pstruct->reductionMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->reductionMode);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT *pstruct = (const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 filterMinmaxSingleComponentFormats
    IndentSpaces(out, indent);
    *out += "filterMinmaxSingleComponentFormats: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->filterMinmaxSingleComponentFormats); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 filterMinmaxImageComponentMapping
    IndentSpaces(out, indent);
    *out += "filterMinmaxImageComponentMapping: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->filterMinmaxImageComponentMapping); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceInlineUniformBlockFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceInlineUniformBlockFeaturesEXT *pstruct = (const VkPhysicalDeviceInlineUniformBlockFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 inlineUniformBlock
    IndentSpaces(out, indent);
    *out += "inlineUniformBlock:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->inlineUniformBlock); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind
    IndentSpaces(out, indent);
    *out += "descriptorBindingInlineUniformBlockUpdateAfterBind: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingInlineUniformBlockUpdateAfterBind); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceInlineUniformBlockPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceInlineUniformBlockPropertiesEXT *pstruct = (const VkPhysicalDeviceInlineUniformBlockPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxInlineUniformBlockSize
    IndentSpaces(out, indent);
    *out += "maxInlineUniformBlockSize:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxInlineUniformBlockSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorInlineUniformBlocks
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorInlineUniformBlocks: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorInlineUniformBlocks); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetInlineUniformBlocks
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetInlineUniformBlocks: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetInlineUniformBlocks); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUpdateAfterBindInlineUniformBlocks: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUpdateAfterBindInlineUniformBlocks); // UYW
}

void StructureToString(std::string* out, const Decoded_VkWriteDescriptorSetInlineUniformBlockEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkWriteDescriptorSetInlineUniformBlockEXT *pstruct = (const VkWriteDescriptorSetInlineUniformBlockEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t dataSize
    IndentSpaces(out, indent);
    *out += "dataSize:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->dataSize); // UYW
    *out += "\n"; // GDS

    // struct member: const void* pData
    IndentSpaces(out, indent);
    *out += "pData:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pData == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pData.GetAddress()); // AHW
    }
}

void StructureToString(std::string* out, const Decoded_VkDescriptorPoolInlineUniformBlockCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorPoolInlineUniformBlockCreateInfoEXT *pstruct = (const VkDescriptorPoolInlineUniformBlockCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxInlineUniformBlockBindings
    IndentSpaces(out, indent);
    *out += "maxInlineUniformBlockBindings:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxInlineUniformBlockBindings); // UYW
}

void StructureToString(std::string* out, const Decoded_VkSampleLocationEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSampleLocationEXT *pstruct = (const VkSampleLocationEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: float x
    IndentSpaces(out, indent);
    *out += "x:                              ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->x); // PEZ
    *out += "\n"; // GDS

    // struct member: float y
    IndentSpaces(out, indent);
    *out += "y:                              ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->y); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkSampleLocationsInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSampleLocationsInfoEXT *pstruct = (const VkSampleLocationsInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlagBits sampleLocationsPerPixel
    IndentSpaces(out, indent);
    *out += "sampleLocationsPerPixel:        ";
    *out += "VkSampleCountFlagBits = "; // TEQ
    EnumToStringVkSampleCountFlagBits(out, pstruct->sampleLocationsPerPixel); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sampleLocationsPerPixel);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkExtent2D sampleLocationGridSize
    IndentSpaces(out, indent);
    *out += "sampleLocationGridSize:         ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.sampleLocationGridSize, indent+1,  base_addr + offsetof(VkSampleLocationsInfoEXT, sampleLocationGridSize)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t sampleLocationsCount
    IndentSpaces(out, indent);
    *out += "sampleLocationsCount:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->sampleLocationsCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSampleLocationEXT* pSampleLocations
    IndentSpaces(out, indent);
    *out += "pSampleLocations:               ";
    *out += "const VkSampleLocationEXT* = "; // TEQ
    if (pstruct->pSampleLocations == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSampleLocations->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSampleLocationEXT>(out, indent+1, 1, "VkSampleLocationEXT", pstruct_in.pSampleLocations->GetMetaStructPointer(), "pSampleLocations", pstruct->sampleLocationsCount, false, pstruct_in.pSampleLocations->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkAttachmentSampleLocationsEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAttachmentSampleLocationsEXT *pstruct = (const VkAttachmentSampleLocationsEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t attachmentIndex
    IndentSpaces(out, indent);
    *out += "attachmentIndex:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachmentIndex); // UYW
    *out += "\n"; // GDS

    // struct member: VkSampleLocationsInfoEXT sampleLocationsInfo
    IndentSpaces(out, indent);
    *out += "sampleLocationsInfo:            ";
    *out += "VkSampleLocationsInfoEXT = "; // TEQ
    StructureToString(out, *pstruct_in.sampleLocationsInfo, indent+1,  base_addr + offsetof(VkAttachmentSampleLocationsEXT, sampleLocationsInfo)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkSubpassSampleLocationsEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSubpassSampleLocationsEXT *pstruct = (const VkSubpassSampleLocationsEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t subpassIndex
    IndentSpaces(out, indent);
    *out += "subpassIndex:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->subpassIndex); // UYW
    *out += "\n"; // GDS

    // struct member: VkSampleLocationsInfoEXT sampleLocationsInfo
    IndentSpaces(out, indent);
    *out += "sampleLocationsInfo:            ";
    *out += "VkSampleLocationsInfoEXT = "; // TEQ
    StructureToString(out, *pstruct_in.sampleLocationsInfo, indent+1,  base_addr + offsetof(VkSubpassSampleLocationsEXT, sampleLocationsInfo)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkRenderPassSampleLocationsBeginInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRenderPassSampleLocationsBeginInfoEXT *pstruct = (const VkRenderPassSampleLocationsBeginInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t attachmentInitialSampleLocationsCount
    IndentSpaces(out, indent);
    *out += "attachmentInitialSampleLocationsCount: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->attachmentInitialSampleLocationsCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations
    IndentSpaces(out, indent);
    *out += "pAttachmentInitialSampleLocations: ";
    *out += "const VkAttachmentSampleLocationsEXT* = "; // TEQ
    if (pstruct->pAttachmentInitialSampleLocations == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAttachmentInitialSampleLocations->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkAttachmentSampleLocationsEXT>(out, indent+1, 1, "VkAttachmentSampleLocationsEXT", pstruct_in.pAttachmentInitialSampleLocations->GetMetaStructPointer(), "pAttachmentInitialSampleLocations", pstruct->attachmentInitialSampleLocationsCount, false, pstruct_in.pAttachmentInitialSampleLocations->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t postSubpassSampleLocationsCount
    IndentSpaces(out, indent);
    *out += "postSubpassSampleLocationsCount: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->postSubpassSampleLocationsCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations
    IndentSpaces(out, indent);
    *out += "pPostSubpassSampleLocations:    ";
    *out += "const VkSubpassSampleLocationsEXT* = "; // TEQ
    if (pstruct->pPostSubpassSampleLocations == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pPostSubpassSampleLocations->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSubpassSampleLocationsEXT>(out, indent+1, 1, "VkSubpassSampleLocationsEXT", pstruct_in.pPostSubpassSampleLocations->GetMetaStructPointer(), "pPostSubpassSampleLocations", pstruct->postSubpassSampleLocationsCount, false, pstruct_in.pPostSubpassSampleLocations->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPipelineSampleLocationsStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineSampleLocationsStateCreateInfoEXT *pstruct = (const VkPipelineSampleLocationsStateCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 sampleLocationsEnable
    IndentSpaces(out, indent);
    *out += "sampleLocationsEnable:          ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->sampleLocationsEnable); //EQA
    *out += "\n"; // GDS

    // struct member: VkSampleLocationsInfoEXT sampleLocationsInfo
    IndentSpaces(out, indent);
    *out += "sampleLocationsInfo:            ";
    *out += "VkSampleLocationsInfoEXT = "; // TEQ
    StructureToString(out, *pstruct_in.sampleLocationsInfo, indent+1,  base_addr + offsetof(VkPipelineSampleLocationsStateCreateInfoEXT, sampleLocationsInfo)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSampleLocationsPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceSampleLocationsPropertiesEXT *pstruct = (const VkPhysicalDeviceSampleLocationsPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags sampleLocationSampleCounts
    IndentSpaces(out, indent);
    *out += "sampleLocationSampleCounts:     ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->sampleLocationSampleCounts, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkExtent2D maxSampleLocationGridSize
    IndentSpaces(out, indent);
    *out += "maxSampleLocationGridSize:      ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.maxSampleLocationGridSize, indent+1,  base_addr + offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, maxSampleLocationGridSize)); // AZJ
    *out += "\n"; // GDS

    // struct member: float sampleLocationCoordinateRange
    IndentSpaces(out, indent);
    *out += "sampleLocationCoordinateRange:  ";
    *out += "float[";
    *out += "2"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceSampleLocationsPropertiesEXT, sampleLocationCoordinateRange)); // IYY
    ScalarValueToStringStruct vinfo_sampleLocationCoordinateRange = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<float>>(out, indent, 0, "float", &pstruct_in.sampleLocationCoordinateRange, "sampleLocationCoordinateRange", 2, vinfo_sampleLocationCoordinateRange); // JPE
    *out += "\n"; // GDS

    // struct member: uint32_t sampleLocationSubPixelBits
    IndentSpaces(out, indent);
    *out += "sampleLocationSubPixelBits:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->sampleLocationSubPixelBits); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 variableSampleLocations
    IndentSpaces(out, indent);
    *out += "variableSampleLocations:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->variableSampleLocations); //EQA
}

void StructureToString(std::string* out, const Decoded_VkMultisamplePropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMultisamplePropertiesEXT *pstruct = (const VkMultisamplePropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExtent2D maxSampleLocationGridSize
    IndentSpaces(out, indent);
    *out += "maxSampleLocationGridSize:      ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.maxSampleLocationGridSize, indent+1,  base_addr + offsetof(VkMultisamplePropertiesEXT, maxSampleLocationGridSize)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT *pstruct = (const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 advancedBlendCoherentOperations
    IndentSpaces(out, indent);
    *out += "advancedBlendCoherentOperations: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->advancedBlendCoherentOperations); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *pstruct = (const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t advancedBlendMaxColorAttachments
    IndentSpaces(out, indent);
    *out += "advancedBlendMaxColorAttachments: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->advancedBlendMaxColorAttachments); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 advancedBlendIndependentBlend
    IndentSpaces(out, indent);
    *out += "advancedBlendIndependentBlend:  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->advancedBlendIndependentBlend); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 advancedBlendNonPremultipliedSrcColor
    IndentSpaces(out, indent);
    *out += "advancedBlendNonPremultipliedSrcColor: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->advancedBlendNonPremultipliedSrcColor); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 advancedBlendNonPremultipliedDstColor
    IndentSpaces(out, indent);
    *out += "advancedBlendNonPremultipliedDstColor: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->advancedBlendNonPremultipliedDstColor); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 advancedBlendCorrelatedOverlap
    IndentSpaces(out, indent);
    *out += "advancedBlendCorrelatedOverlap: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->advancedBlendCorrelatedOverlap); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 advancedBlendAllOperations
    IndentSpaces(out, indent);
    *out += "advancedBlendAllOperations:     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->advancedBlendAllOperations); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineColorBlendAdvancedStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineColorBlendAdvancedStateCreateInfoEXT *pstruct = (const VkPipelineColorBlendAdvancedStateCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 srcPremultiplied
    IndentSpaces(out, indent);
    *out += "srcPremultiplied:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->srcPremultiplied); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 dstPremultiplied
    IndentSpaces(out, indent);
    *out += "dstPremultiplied:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->dstPremultiplied); //EQA
    *out += "\n"; // GDS

    // struct member: VkBlendOverlapEXT blendOverlap
    IndentSpaces(out, indent);
    *out += "blendOverlap:                   ";
    *out += "VkBlendOverlapEXT = "; // TEQ
    EnumToStringVkBlendOverlapEXT(out, pstruct->blendOverlap); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->blendOverlap);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPipelineCoverageToColorStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineCoverageToColorStateCreateInfoNV *pstruct = (const VkPipelineCoverageToColorStateCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineCoverageToColorStateCreateFlagsNV flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineCoverageToColorStateCreateFlagsNV = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 coverageToColorEnable
    IndentSpaces(out, indent);
    *out += "coverageToColorEnable:          ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->coverageToColorEnable); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t coverageToColorLocation
    IndentSpaces(out, indent);
    *out += "coverageToColorLocation:        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->coverageToColorLocation); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineCoverageModulationStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineCoverageModulationStateCreateInfoNV *pstruct = (const VkPipelineCoverageModulationStateCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineCoverageModulationStateCreateFlagsNV flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineCoverageModulationStateCreateFlagsNV = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkCoverageModulationModeNV coverageModulationMode
    IndentSpaces(out, indent);
    *out += "coverageModulationMode:         ";
    *out += "VkCoverageModulationModeNV = "; // TEQ
    EnumToStringVkCoverageModulationModeNV(out, pstruct->coverageModulationMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->coverageModulationMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 coverageModulationTableEnable
    IndentSpaces(out, indent);
    *out += "coverageModulationTableEnable:  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->coverageModulationTableEnable); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t coverageModulationTableCount
    IndentSpaces(out, indent);
    *out += "coverageModulationTableCount:   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->coverageModulationTableCount); // UYW
    *out += "\n"; // GDS

    // struct member: const float* pCoverageModulationTable
    IndentSpaces(out, indent);
    *out += "pCoverageModulationTable:       ";
    *out += "const float* = "; // TEQ
    if (pstruct->pCoverageModulationTable == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pCoverageModulationTable.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pCoverageModulationTable = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<float>>(out, indent, 1, "const float*", &pstruct_in.pCoverageModulationTable, "pCoverageModulationTable", pstruct->coverageModulationTableCount,  vinfo_pCoverageModulationTable);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV *pstruct = (const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t shaderSMCount
    IndentSpaces(out, indent);
    *out += "shaderSMCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->shaderSMCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t shaderWarpsPerSM
    IndentSpaces(out, indent);
    *out += "shaderWarpsPerSM:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->shaderWarpsPerSM); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV *pstruct = (const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSMBuiltins
    IndentSpaces(out, indent);
    *out += "shaderSMBuiltins:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSMBuiltins); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDrmFormatModifierPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDrmFormatModifierPropertiesEXT *pstruct = (const VkDrmFormatModifierPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint64_t drmFormatModifier
    IndentSpaces(out, indent);
    *out += "drmFormatModifier:              ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->drmFormatModifier); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t drmFormatModifierPlaneCount
    IndentSpaces(out, indent);
    *out += "drmFormatModifierPlaneCount:    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->drmFormatModifierPlaneCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkFormatFeatureFlags drmFormatModifierTilingFeatures
    IndentSpaces(out, indent);
    *out += "drmFormatModifierTilingFeatures: ";
    *out += "VkFormatFeatureFlags = "; // TEQ
    FlagsToString(out, pstruct->drmFormatModifierTilingFeatures, EnumToStringVkFormatFeatureFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkDrmFormatModifierPropertiesListEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDrmFormatModifierPropertiesListEXT *pstruct = (const VkDrmFormatModifierPropertiesListEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t drmFormatModifierCount
    IndentSpaces(out, indent);
    *out += "drmFormatModifierCount:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->drmFormatModifierCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties
    IndentSpaces(out, indent);
    *out += "pDrmFormatModifierProperties:   ";
    *out += "VkDrmFormatModifierPropertiesEXT* = "; // TEQ
    if (pstruct->pDrmFormatModifierProperties == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDrmFormatModifierProperties->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkDrmFormatModifierPropertiesEXT>(out, indent+1, 1, "VkDrmFormatModifierPropertiesEXT", pstruct_in.pDrmFormatModifierProperties->GetMetaStructPointer(), "pDrmFormatModifierProperties", pstruct->drmFormatModifierCount, false, pstruct_in.pDrmFormatModifierProperties->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceImageDrmFormatModifierInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceImageDrmFormatModifierInfoEXT *pstruct = (const VkPhysicalDeviceImageDrmFormatModifierInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint64_t drmFormatModifier
    IndentSpaces(out, indent);
    *out += "drmFormatModifier:              ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->drmFormatModifier); // UYW
    *out += "\n"; // GDS

    // struct member: VkSharingMode sharingMode
    IndentSpaces(out, indent);
    *out += "sharingMode:                    ";
    *out += "VkSharingMode = "; // TEQ
    EnumToStringVkSharingMode(out, pstruct->sharingMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sharingMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t queueFamilyIndexCount
    IndentSpaces(out, indent);
    *out += "queueFamilyIndexCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->queueFamilyIndexCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pQueueFamilyIndices
    IndentSpaces(out, indent);
    *out += "pQueueFamilyIndices:            ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pQueueFamilyIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pQueueFamilyIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pQueueFamilyIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pQueueFamilyIndices, "pQueueFamilyIndices", pstruct->queueFamilyIndexCount,  vinfo_pQueueFamilyIndices);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkImageDrmFormatModifierListCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageDrmFormatModifierListCreateInfoEXT *pstruct = (const VkImageDrmFormatModifierListCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t drmFormatModifierCount
    IndentSpaces(out, indent);
    *out += "drmFormatModifierCount:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->drmFormatModifierCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint64_t* pDrmFormatModifiers
    IndentSpaces(out, indent);
    *out += "pDrmFormatModifiers:            ";
    *out += "const uint64_t* = "; // TEQ
    if (pstruct->pDrmFormatModifiers == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDrmFormatModifiers.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pDrmFormatModifiers = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint64_t>>(out, indent, 1, "const uint64_t*", &pstruct_in.pDrmFormatModifiers, "pDrmFormatModifiers", pstruct->drmFormatModifierCount,  vinfo_pDrmFormatModifiers);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkImageDrmFormatModifierExplicitCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageDrmFormatModifierExplicitCreateInfoEXT *pstruct = (const VkImageDrmFormatModifierExplicitCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint64_t drmFormatModifier
    IndentSpaces(out, indent);
    *out += "drmFormatModifier:              ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->drmFormatModifier); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t drmFormatModifierPlaneCount
    IndentSpaces(out, indent);
    *out += "drmFormatModifierPlaneCount:    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->drmFormatModifierPlaneCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkSubresourceLayout* pPlaneLayouts
    IndentSpaces(out, indent);
    *out += "pPlaneLayouts:                  ";
    *out += "const VkSubresourceLayout* = "; // TEQ
    if (pstruct->pPlaneLayouts == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pPlaneLayouts->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkSubresourceLayout>(out, indent+1, 1, "VkSubresourceLayout", pstruct_in.pPlaneLayouts->GetMetaStructPointer(), "pPlaneLayouts", pstruct->drmFormatModifierPlaneCount, false, pstruct_in.pPlaneLayouts->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkImageDrmFormatModifierPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageDrmFormatModifierPropertiesEXT *pstruct = (const VkImageDrmFormatModifierPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint64_t drmFormatModifier
    IndentSpaces(out, indent);
    *out += "drmFormatModifier:              ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->drmFormatModifier); // UYW
}

void StructureToString(std::string* out, const Decoded_VkValidationCacheCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkValidationCacheCreateInfoEXT *pstruct = (const VkValidationCacheCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkValidationCacheCreateFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkValidationCacheCreateFlagsEXT = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: size_t initialDataSize
    IndentSpaces(out, indent);
    *out += "initialDataSize:                ";
    *out += "size_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->initialDataSize); // UYW
    *out += "\n"; // GDS

    // struct member: const void* pInitialData
    IndentSpaces(out, indent);
    *out += "pInitialData:                   ";
    *out += "const void* = "; // TEQ
    if (pstruct->pInitialData == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pInitialData.GetAddress()); // AHW
    }
}

void StructureToString(std::string* out, const Decoded_VkShaderModuleValidationCacheCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkShaderModuleValidationCacheCreateInfoEXT *pstruct = (const VkShaderModuleValidationCacheCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkValidationCacheEXT validationCache
    IndentSpaces(out, indent);
    *out += "validationCache:                ";
    *out += "VkValidationCacheEXT = "; // TEQ
    AddrToString(out, pstruct_in.validationCache); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *pstruct = (const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t bindingCount
    IndentSpaces(out, indent);
    *out += "bindingCount:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->bindingCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkDescriptorBindingFlagsEXT* pBindingFlags
    IndentSpaces(out, indent);
    *out += "pBindingFlags:                  ";
    *out += "const VkDescriptorBindingFlagsEXT* = "; // TEQ
    if (pstruct->pBindingFlags == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pBindingFlags.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pBindingFlags = {false, false, true, EnumToStringVkDescriptorBindingFlagBitsEXT};
        ArrayToString<PointerDecoder<VkDescriptorBindingFlagsEXT>>(out, indent, 1, "const VkDescriptorBindingFlagsEXT*", &pstruct_in.pBindingFlags, "pBindingFlags", pstruct->bindingCount,  vinfo_pBindingFlags);  // CCR
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDescriptorIndexingFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceDescriptorIndexingFeaturesEXT *pstruct = (const VkPhysicalDeviceDescriptorIndexingFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderInputAttachmentArrayDynamicIndexing
    IndentSpaces(out, indent);
    *out += "shaderInputAttachmentArrayDynamicIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderInputAttachmentArrayDynamicIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderUniformTexelBufferArrayDynamicIndexing
    IndentSpaces(out, indent);
    *out += "shaderUniformTexelBufferArrayDynamicIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderUniformTexelBufferArrayDynamicIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageTexelBufferArrayDynamicIndexing
    IndentSpaces(out, indent);
    *out += "shaderStorageTexelBufferArrayDynamicIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageTexelBufferArrayDynamicIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderUniformBufferArrayNonUniformIndexing
    IndentSpaces(out, indent);
    *out += "shaderUniformBufferArrayNonUniformIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderUniformBufferArrayNonUniformIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSampledImageArrayNonUniformIndexing
    IndentSpaces(out, indent);
    *out += "shaderSampledImageArrayNonUniformIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSampledImageArrayNonUniformIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageBufferArrayNonUniformIndexing
    IndentSpaces(out, indent);
    *out += "shaderStorageBufferArrayNonUniformIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageBufferArrayNonUniformIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageImageArrayNonUniformIndexing
    IndentSpaces(out, indent);
    *out += "shaderStorageImageArrayNonUniformIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageImageArrayNonUniformIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderInputAttachmentArrayNonUniformIndexing
    IndentSpaces(out, indent);
    *out += "shaderInputAttachmentArrayNonUniformIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderInputAttachmentArrayNonUniformIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing
    IndentSpaces(out, indent);
    *out += "shaderUniformTexelBufferArrayNonUniformIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderUniformTexelBufferArrayNonUniformIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing
    IndentSpaces(out, indent);
    *out += "shaderStorageTexelBufferArrayNonUniformIndexing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageTexelBufferArrayNonUniformIndexing); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingUniformBufferUpdateAfterBind
    IndentSpaces(out, indent);
    *out += "descriptorBindingUniformBufferUpdateAfterBind: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingUniformBufferUpdateAfterBind); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingSampledImageUpdateAfterBind
    IndentSpaces(out, indent);
    *out += "descriptorBindingSampledImageUpdateAfterBind: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingSampledImageUpdateAfterBind); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingStorageImageUpdateAfterBind
    IndentSpaces(out, indent);
    *out += "descriptorBindingStorageImageUpdateAfterBind: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingStorageImageUpdateAfterBind); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingStorageBufferUpdateAfterBind
    IndentSpaces(out, indent);
    *out += "descriptorBindingStorageBufferUpdateAfterBind: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingStorageBufferUpdateAfterBind); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind
    IndentSpaces(out, indent);
    *out += "descriptorBindingUniformTexelBufferUpdateAfterBind: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingUniformTexelBufferUpdateAfterBind); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind
    IndentSpaces(out, indent);
    *out += "descriptorBindingStorageTexelBufferUpdateAfterBind: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingStorageTexelBufferUpdateAfterBind); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingUpdateUnusedWhilePending
    IndentSpaces(out, indent);
    *out += "descriptorBindingUpdateUnusedWhilePending: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingUpdateUnusedWhilePending); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingPartiallyBound
    IndentSpaces(out, indent);
    *out += "descriptorBindingPartiallyBound: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingPartiallyBound); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 descriptorBindingVariableDescriptorCount
    IndentSpaces(out, indent);
    *out += "descriptorBindingVariableDescriptorCount: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->descriptorBindingVariableDescriptorCount); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 runtimeDescriptorArray
    IndentSpaces(out, indent);
    *out += "runtimeDescriptorArray:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->runtimeDescriptorArray); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDescriptorIndexingPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceDescriptorIndexingPropertiesEXT *pstruct = (const VkPhysicalDeviceDescriptorIndexingPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxUpdateAfterBindDescriptorsInAllPools
    IndentSpaces(out, indent);
    *out += "maxUpdateAfterBindDescriptorsInAllPools: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxUpdateAfterBindDescriptorsInAllPools); // UYW
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderUniformBufferArrayNonUniformIndexingNative
    IndentSpaces(out, indent);
    *out += "shaderUniformBufferArrayNonUniformIndexingNative: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderUniformBufferArrayNonUniformIndexingNative); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderSampledImageArrayNonUniformIndexingNative
    IndentSpaces(out, indent);
    *out += "shaderSampledImageArrayNonUniformIndexingNative: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderSampledImageArrayNonUniformIndexingNative); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageBufferArrayNonUniformIndexingNative
    IndentSpaces(out, indent);
    *out += "shaderStorageBufferArrayNonUniformIndexingNative: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageBufferArrayNonUniformIndexingNative); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderStorageImageArrayNonUniformIndexingNative
    IndentSpaces(out, indent);
    *out += "shaderStorageImageArrayNonUniformIndexingNative: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderStorageImageArrayNonUniformIndexingNative); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative
    IndentSpaces(out, indent);
    *out += "shaderInputAttachmentArrayNonUniformIndexingNative: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderInputAttachmentArrayNonUniformIndexingNative); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 robustBufferAccessUpdateAfterBind
    IndentSpaces(out, indent);
    *out += "robustBufferAccessUpdateAfterBind: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->robustBufferAccessUpdateAfterBind); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 quadDivergentImplicitLod
    IndentSpaces(out, indent);
    *out += "quadDivergentImplicitLod:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->quadDivergentImplicitLod); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorUpdateAfterBindSamplers
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorUpdateAfterBindSamplers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorUpdateAfterBindSamplers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorUpdateAfterBindUniformBuffers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorUpdateAfterBindUniformBuffers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorUpdateAfterBindStorageBuffers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorUpdateAfterBindStorageBuffers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorUpdateAfterBindSampledImages: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorUpdateAfterBindSampledImages); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorUpdateAfterBindStorageImages: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorUpdateAfterBindStorageImages); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments
    IndentSpaces(out, indent);
    *out += "maxPerStageDescriptorUpdateAfterBindInputAttachments: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageDescriptorUpdateAfterBindInputAttachments); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxPerStageUpdateAfterBindResources
    IndentSpaces(out, indent);
    *out += "maxPerStageUpdateAfterBindResources: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxPerStageUpdateAfterBindResources); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUpdateAfterBindSamplers
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUpdateAfterBindSamplers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUpdateAfterBindSamplers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUpdateAfterBindUniformBuffers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUpdateAfterBindUniformBuffers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUpdateAfterBindStorageBuffers: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUpdateAfterBindStorageBuffers); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUpdateAfterBindSampledImages
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUpdateAfterBindSampledImages: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUpdateAfterBindSampledImages); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUpdateAfterBindStorageImages
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUpdateAfterBindStorageImages: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUpdateAfterBindStorageImages); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetUpdateAfterBindInputAttachments
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetUpdateAfterBindInputAttachments: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetUpdateAfterBindInputAttachments); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *pstruct = (const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t descriptorSetCount
    IndentSpaces(out, indent);
    *out += "descriptorSetCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->descriptorSetCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pDescriptorCounts
    IndentSpaces(out, indent);
    *out += "pDescriptorCounts:              ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pDescriptorCounts == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDescriptorCounts.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pDescriptorCounts = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pDescriptorCounts, "pDescriptorCounts", pstruct->descriptorSetCount,  vinfo_pDescriptorCounts);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT *pstruct = (const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxVariableDescriptorCount
    IndentSpaces(out, indent);
    *out += "maxVariableDescriptorCount:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxVariableDescriptorCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkShadingRatePaletteNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkShadingRatePaletteNV *pstruct = (const VkShadingRatePaletteNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t shadingRatePaletteEntryCount
    IndentSpaces(out, indent);
    *out += "shadingRatePaletteEntryCount:   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->shadingRatePaletteEntryCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries
    IndentSpaces(out, indent);
    *out += "pShadingRatePaletteEntries:     ";
    *out += "const VkShadingRatePaletteEntryNV* = "; // TEQ
    if (pstruct->pShadingRatePaletteEntries == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pShadingRatePaletteEntries.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pShadingRatePaletteEntries = {false, true, false, EnumToStringVkShadingRatePaletteEntryNV};
        ArrayToString<PointerDecoder<VkShadingRatePaletteEntryNV>>(out, indent, 1, "const VkShadingRatePaletteEntryNV*", &pstruct_in.pShadingRatePaletteEntries, "pShadingRatePaletteEntries", pstruct->shadingRatePaletteEntryCount,  vinfo_pShadingRatePaletteEntries);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkPipelineViewportShadingRateImageStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineViewportShadingRateImageStateCreateInfoNV *pstruct = (const VkPipelineViewportShadingRateImageStateCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shadingRateImageEnable
    IndentSpaces(out, indent);
    *out += "shadingRateImageEnable:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shadingRateImageEnable); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t viewportCount
    IndentSpaces(out, indent);
    *out += "viewportCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->viewportCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkShadingRatePaletteNV* pShadingRatePalettes
    IndentSpaces(out, indent);
    *out += "pShadingRatePalettes:           ";
    *out += "const VkShadingRatePaletteNV* = "; // TEQ
    if (pstruct->pShadingRatePalettes == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pShadingRatePalettes->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkShadingRatePaletteNV>(out, indent+1, 1, "VkShadingRatePaletteNV", pstruct_in.pShadingRatePalettes->GetMetaStructPointer(), "pShadingRatePalettes", pstruct->viewportCount, false, pstruct_in.pShadingRatePalettes->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShadingRateImageFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShadingRateImageFeaturesNV *pstruct = (const VkPhysicalDeviceShadingRateImageFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shadingRateImage
    IndentSpaces(out, indent);
    *out += "shadingRateImage:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shadingRateImage); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 shadingRateCoarseSampleOrder
    IndentSpaces(out, indent);
    *out += "shadingRateCoarseSampleOrder:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shadingRateCoarseSampleOrder); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShadingRateImagePropertiesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShadingRateImagePropertiesNV *pstruct = (const VkPhysicalDeviceShadingRateImagePropertiesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExtent2D shadingRateTexelSize
    IndentSpaces(out, indent);
    *out += "shadingRateTexelSize:           ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.shadingRateTexelSize, indent+1,  base_addr + offsetof(VkPhysicalDeviceShadingRateImagePropertiesNV, shadingRateTexelSize)); // AZJ
    *out += "\n"; // GDS

    // struct member: uint32_t shadingRatePaletteSize
    IndentSpaces(out, indent);
    *out += "shadingRatePaletteSize:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->shadingRatePaletteSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t shadingRateMaxCoarseSamples
    IndentSpaces(out, indent);
    *out += "shadingRateMaxCoarseSamples:    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->shadingRateMaxCoarseSamples); // UYW
}

void StructureToString(std::string* out, const Decoded_VkCoarseSampleLocationNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCoarseSampleLocationNV *pstruct = (const VkCoarseSampleLocationNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t pixelX
    IndentSpaces(out, indent);
    *out += "pixelX:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->pixelX); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t pixelY
    IndentSpaces(out, indent);
    *out += "pixelY:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->pixelY); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t sample
    IndentSpaces(out, indent);
    *out += "sample:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->sample); // UYW
}

void StructureToString(std::string* out, const Decoded_VkCoarseSampleOrderCustomNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCoarseSampleOrderCustomNV *pstruct = (const VkCoarseSampleOrderCustomNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkShadingRatePaletteEntryNV shadingRate
    IndentSpaces(out, indent);
    *out += "shadingRate:                    ";
    *out += "VkShadingRatePaletteEntryNV = "; // TEQ
    EnumToStringVkShadingRatePaletteEntryNV(out, pstruct->shadingRate); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->shadingRate);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t sampleCount
    IndentSpaces(out, indent);
    *out += "sampleCount:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->sampleCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t sampleLocationCount
    IndentSpaces(out, indent);
    *out += "sampleLocationCount:            ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->sampleLocationCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkCoarseSampleLocationNV* pSampleLocations
    IndentSpaces(out, indent);
    *out += "pSampleLocations:               ";
    *out += "const VkCoarseSampleLocationNV* = "; // TEQ
    if (pstruct->pSampleLocations == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pSampleLocations->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkCoarseSampleLocationNV>(out, indent+1, 1, "VkCoarseSampleLocationNV", pstruct_in.pSampleLocations->GetMetaStructPointer(), "pSampleLocations", pstruct->sampleLocationCount, false, pstruct_in.pSampleLocations->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV *pstruct = (const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkCoarseSampleOrderTypeNV sampleOrderType
    IndentSpaces(out, indent);
    *out += "sampleOrderType:                ";
    *out += "VkCoarseSampleOrderTypeNV = "; // TEQ
    EnumToStringVkCoarseSampleOrderTypeNV(out, pstruct->sampleOrderType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sampleOrderType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t customSampleOrderCount
    IndentSpaces(out, indent);
    *out += "customSampleOrderCount:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->customSampleOrderCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkCoarseSampleOrderCustomNV* pCustomSampleOrders
    IndentSpaces(out, indent);
    *out += "pCustomSampleOrders:            ";
    *out += "const VkCoarseSampleOrderCustomNV* = "; // TEQ
    if (pstruct->pCustomSampleOrders == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pCustomSampleOrders->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkCoarseSampleOrderCustomNV>(out, indent+1, 1, "VkCoarseSampleOrderCustomNV", pstruct_in.pCustomSampleOrders->GetMetaStructPointer(), "pCustomSampleOrders", pstruct->customSampleOrderCount, false, pstruct_in.pCustomSampleOrders->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkRayTracingShaderGroupCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRayTracingShaderGroupCreateInfoNV *pstruct = (const VkRayTracingShaderGroupCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkRayTracingShaderGroupTypeNV type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkRayTracingShaderGroupTypeNV = "; // TEQ
    EnumToStringVkRayTracingShaderGroupTypeNV(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: uint32_t generalShader
    IndentSpaces(out, indent);
    *out += "generalShader:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->generalShader); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t closestHitShader
    IndentSpaces(out, indent);
    *out += "closestHitShader:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->closestHitShader); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t anyHitShader
    IndentSpaces(out, indent);
    *out += "anyHitShader:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->anyHitShader); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t intersectionShader
    IndentSpaces(out, indent);
    *out += "intersectionShader:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->intersectionShader); // UYW
}

void StructureToString(std::string* out, const Decoded_VkRayTracingPipelineCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRayTracingPipelineCreateInfoNV *pstruct = (const VkRayTracingPipelineCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineCreateFlags flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineCreateFlags = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkPipelineCreateFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t stageCount
    IndentSpaces(out, indent);
    *out += "stageCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->stageCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkPipelineShaderStageCreateInfo* pStages
    IndentSpaces(out, indent);
    *out += "pStages:                        ";
    *out += "const VkPipelineShaderStageCreateInfo* = "; // TEQ
    if (pstruct->pStages == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pStages->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkPipelineShaderStageCreateInfo>(out, indent+1, 1, "VkPipelineShaderStageCreateInfo", pstruct_in.pStages->GetMetaStructPointer(), "pStages", pstruct->stageCount, false, pstruct_in.pStages->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t groupCount
    IndentSpaces(out, indent);
    *out += "groupCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->groupCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkRayTracingShaderGroupCreateInfoNV* pGroups
    IndentSpaces(out, indent);
    *out += "pGroups:                        ";
    *out += "const VkRayTracingShaderGroupCreateInfoNV* = "; // TEQ
    if (pstruct->pGroups == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pGroups->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkRayTracingShaderGroupCreateInfoNV>(out, indent+1, 1, "VkRayTracingShaderGroupCreateInfoNV", pstruct_in.pGroups->GetMetaStructPointer(), "pGroups", pstruct->groupCount, false, pstruct_in.pGroups->GetAddress());  // CCP
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxRecursionDepth
    IndentSpaces(out, indent);
    *out += "maxRecursionDepth:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxRecursionDepth); // UYW
    *out += "\n"; // GDS

    // struct member: VkPipelineLayout layout
    IndentSpaces(out, indent);
    *out += "layout:                         ";
    *out += "VkPipelineLayout = "; // TEQ
    AddrToString(out, pstruct_in.layout); // PAQ
    *out += "\n"; // GDS

    // struct member: VkPipeline basePipelineHandle
    IndentSpaces(out, indent);
    *out += "basePipelineHandle:             ";
    *out += "VkPipeline = "; // TEQ
    AddrToString(out, pstruct_in.basePipelineHandle); // PAQ
    *out += "\n"; // GDS

    // struct member: int32_t basePipelineIndex
    IndentSpaces(out, indent);
    *out += "basePipelineIndex:              ";
    *out += "int32_t = "; // TEQ
    SignedDecimalToString(out, pstruct->basePipelineIndex); //EQA
}

void StructureToString(std::string* out, const Decoded_VkGeometryTrianglesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkGeometryTrianglesNV *pstruct = (const VkGeometryTrianglesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBuffer vertexData
    IndentSpaces(out, indent);
    *out += "vertexData:                     ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.vertexData); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize vertexOffset
    IndentSpaces(out, indent);
    *out += "vertexOffset:                   ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->vertexOffset); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t vertexCount
    IndentSpaces(out, indent);
    *out += "vertexCount:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->vertexCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkDeviceSize vertexStride
    IndentSpaces(out, indent);
    *out += "vertexStride:                   ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->vertexStride); //EQA
    *out += "\n"; // GDS

    // struct member: VkFormat vertexFormat
    IndentSpaces(out, indent);
    *out += "vertexFormat:                   ";
    *out += "VkFormat = "; // TEQ
    EnumToStringVkFormat(out, pstruct->vertexFormat); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->vertexFormat);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBuffer indexData
    IndentSpaces(out, indent);
    *out += "indexData:                      ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.indexData); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize indexOffset
    IndentSpaces(out, indent);
    *out += "indexOffset:                    ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->indexOffset); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t indexCount
    IndentSpaces(out, indent);
    *out += "indexCount:                     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->indexCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkIndexType indexType
    IndentSpaces(out, indent);
    *out += "indexType:                      ";
    *out += "VkIndexType = "; // TEQ
    EnumToStringVkIndexType(out, pstruct->indexType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->indexType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBuffer transformData
    IndentSpaces(out, indent);
    *out += "transformData:                  ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.transformData); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize transformOffset
    IndentSpaces(out, indent);
    *out += "transformOffset:                ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->transformOffset); //EQA
}

void StructureToString(std::string* out, const Decoded_VkGeometryAABBNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkGeometryAABBNV *pstruct = (const VkGeometryAABBNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBuffer aabbData
    IndentSpaces(out, indent);
    *out += "aabbData:                       ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.aabbData); // PAQ
    *out += "\n"; // GDS

    // struct member: uint32_t numAABBs
    IndentSpaces(out, indent);
    *out += "numAABBs:                       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->numAABBs); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t stride
    IndentSpaces(out, indent);
    *out += "stride:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->stride); // UYW
    *out += "\n"; // GDS

    // struct member: VkDeviceSize offset
    IndentSpaces(out, indent);
    *out += "offset:                         ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->offset); //EQA
}

void StructureToString(std::string* out, const Decoded_VkGeometryDataNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkGeometryDataNV *pstruct = (const VkGeometryDataNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkGeometryTrianglesNV triangles
    IndentSpaces(out, indent);
    *out += "triangles:                      ";
    *out += "VkGeometryTrianglesNV = "; // TEQ
    StructureToString(out, *pstruct_in.triangles, indent+1,  base_addr + offsetof(VkGeometryDataNV, triangles)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkGeometryAABBNV aabbs
    IndentSpaces(out, indent);
    *out += "aabbs:                          ";
    *out += "VkGeometryAABBNV = "; // TEQ
    StructureToString(out, *pstruct_in.aabbs, indent+1,  base_addr + offsetof(VkGeometryDataNV, aabbs)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkGeometryNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkGeometryNV *pstruct = (const VkGeometryNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkGeometryTypeNV geometryType
    IndentSpaces(out, indent);
    *out += "geometryType:                   ";
    *out += "VkGeometryTypeNV = "; // TEQ
    EnumToStringVkGeometryTypeNV(out, pstruct->geometryType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->geometryType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkGeometryDataNV geometry
    IndentSpaces(out, indent);
    *out += "geometry:                       ";
    *out += "VkGeometryDataNV = "; // TEQ
    StructureToString(out, *pstruct_in.geometry, indent+1,  base_addr + offsetof(VkGeometryNV, geometry)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkGeometryFlagsNV flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkGeometryFlagsNV = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkGeometryFlagBitsNV); // URW
}

void StructureToString(std::string* out, const Decoded_VkAccelerationStructureInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAccelerationStructureInfoNV *pstruct = (const VkAccelerationStructureInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkAccelerationStructureTypeNV type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkAccelerationStructureTypeNV = "; // TEQ
    EnumToStringVkAccelerationStructureTypeNV(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBuildAccelerationStructureFlagsNV flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkBuildAccelerationStructureFlagsNV = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkBuildAccelerationStructureFlagBitsNV); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t instanceCount
    IndentSpaces(out, indent);
    *out += "instanceCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->instanceCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t geometryCount
    IndentSpaces(out, indent);
    *out += "geometryCount:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->geometryCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkGeometryNV* pGeometries
    IndentSpaces(out, indent);
    *out += "pGeometries:                    ";
    *out += "const VkGeometryNV* = "; // TEQ
    if (pstruct->pGeometries == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pGeometries->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkGeometryNV>(out, indent+1, 1, "VkGeometryNV", pstruct_in.pGeometries->GetMetaStructPointer(), "pGeometries", pstruct->geometryCount, false, pstruct_in.pGeometries->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkAccelerationStructureCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAccelerationStructureCreateInfoNV *pstruct = (const VkAccelerationStructureCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceSize compactedSize
    IndentSpaces(out, indent);
    *out += "compactedSize:                  ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->compactedSize); //EQA
    *out += "\n"; // GDS

    // struct member: VkAccelerationStructureInfoNV info
    IndentSpaces(out, indent);
    *out += "info:                           ";
    *out += "VkAccelerationStructureInfoNV = "; // TEQ
    StructureToString(out, *pstruct_in.info, indent+1,  base_addr + offsetof(VkAccelerationStructureCreateInfoNV, info)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkBindAccelerationStructureMemoryInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBindAccelerationStructureMemoryInfoNV *pstruct = (const VkBindAccelerationStructureMemoryInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkAccelerationStructureNV accelerationStructure
    IndentSpaces(out, indent);
    *out += "accelerationStructure:          ";
    *out += "VkAccelerationStructureNV = "; // TEQ
    AddrToString(out, pstruct_in.accelerationStructure); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceMemory memory
    IndentSpaces(out, indent);
    *out += "memory:                         ";
    *out += "VkDeviceMemory = "; // TEQ
    AddrToString(out, pstruct_in.memory); // PAQ
    *out += "\n"; // GDS

    // struct member: VkDeviceSize memoryOffset
    IndentSpaces(out, indent);
    *out += "memoryOffset:                   ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->memoryOffset); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t deviceIndexCount
    IndentSpaces(out, indent);
    *out += "deviceIndexCount:               ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceIndexCount); // UYW
    *out += "\n"; // GDS

    // struct member: const uint32_t* pDeviceIndices
    IndentSpaces(out, indent);
    *out += "pDeviceIndices:                 ";
    *out += "const uint32_t* = "; // TEQ
    if (pstruct->pDeviceIndices == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDeviceIndices.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pDeviceIndices = {false, false, false, nullptr};
        ArrayToString<PointerDecoder<uint32_t>>(out, indent, 1, "const uint32_t*", &pstruct_in.pDeviceIndices, "pDeviceIndices", pstruct->deviceIndexCount,  vinfo_pDeviceIndices);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkWriteDescriptorSetAccelerationStructureNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkWriteDescriptorSetAccelerationStructureNV *pstruct = (const VkWriteDescriptorSetAccelerationStructureNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t accelerationStructureCount
    IndentSpaces(out, indent);
    *out += "accelerationStructureCount:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->accelerationStructureCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkAccelerationStructureNV* pAccelerationStructures
    IndentSpaces(out, indent);
    *out += "pAccelerationStructures:        ";
    *out += "const VkAccelerationStructureNV* = "; // TEQ
    if (pstruct->pAccelerationStructures == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pAccelerationStructures.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pAccelerationStructures = {true, false, false, nullptr};
        ArrayToString<HandlePointerDecoder<VkAccelerationStructureNV>>(out, indent, 1, "const VkAccelerationStructureNV*", &pstruct_in.pAccelerationStructures, "pAccelerationStructures", pstruct->accelerationStructureCount,  vinfo_pAccelerationStructures);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkAccelerationStructureMemoryRequirementsInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkAccelerationStructureMemoryRequirementsInfoNV *pstruct = (const VkAccelerationStructureMemoryRequirementsInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkAccelerationStructureMemoryRequirementsTypeNV type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkAccelerationStructureMemoryRequirementsTypeNV = "; // TEQ
    EnumToStringVkAccelerationStructureMemoryRequirementsTypeNV(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkAccelerationStructureNV accelerationStructure
    IndentSpaces(out, indent);
    *out += "accelerationStructure:          ";
    *out += "VkAccelerationStructureNV = "; // TEQ
    AddrToString(out, pstruct_in.accelerationStructure); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceRayTracingPropertiesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceRayTracingPropertiesNV *pstruct = (const VkPhysicalDeviceRayTracingPropertiesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t shaderGroupHandleSize
    IndentSpaces(out, indent);
    *out += "shaderGroupHandleSize:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->shaderGroupHandleSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxRecursionDepth
    IndentSpaces(out, indent);
    *out += "maxRecursionDepth:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxRecursionDepth); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxShaderGroupStride
    IndentSpaces(out, indent);
    *out += "maxShaderGroupStride:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxShaderGroupStride); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t shaderGroupBaseAlignment
    IndentSpaces(out, indent);
    *out += "shaderGroupBaseAlignment:       ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->shaderGroupBaseAlignment); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t maxGeometryCount
    IndentSpaces(out, indent);
    *out += "maxGeometryCount:               ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxGeometryCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t maxInstanceCount
    IndentSpaces(out, indent);
    *out += "maxInstanceCount:               ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxInstanceCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t maxTriangleCount
    IndentSpaces(out, indent);
    *out += "maxTriangleCount:               ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTriangleCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxDescriptorSetAccelerationStructures
    IndentSpaces(out, indent);
    *out += "maxDescriptorSetAccelerationStructures: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDescriptorSetAccelerationStructures); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV *pstruct = (const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 representativeFragmentTest
    IndentSpaces(out, indent);
    *out += "representativeFragmentTest:     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->representativeFragmentTest); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineRepresentativeFragmentTestStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineRepresentativeFragmentTestStateCreateInfoNV *pstruct = (const VkPipelineRepresentativeFragmentTestStateCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 representativeFragmentTestEnable
    IndentSpaces(out, indent);
    *out += "representativeFragmentTestEnable: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->representativeFragmentTestEnable); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceImageViewImageFormatInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceImageViewImageFormatInfoEXT *pstruct = (const VkPhysicalDeviceImageViewImageFormatInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageViewType imageViewType
    IndentSpaces(out, indent);
    *out += "imageViewType:                  ";
    *out += "VkImageViewType = "; // TEQ
    EnumToStringVkImageViewType(out, pstruct->imageViewType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->imageViewType);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkFilterCubicImageViewImageFormatPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFilterCubicImageViewImageFormatPropertiesEXT *pstruct = (const VkFilterCubicImageViewImageFormatPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 filterCubic
    IndentSpaces(out, indent);
    *out += "filterCubic:                    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->filterCubic); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 filterCubicMinmax
    IndentSpaces(out, indent);
    *out += "filterCubicMinmax:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->filterCubicMinmax); //EQA
}

void StructureToString(std::string* out, const Decoded_VkDeviceQueueGlobalPriorityCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceQueueGlobalPriorityCreateInfoEXT *pstruct = (const VkDeviceQueueGlobalPriorityCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkQueueGlobalPriorityEXT globalPriority
    IndentSpaces(out, indent);
    *out += "globalPriority:                 ";
    *out += "VkQueueGlobalPriorityEXT = "; // TEQ
    EnumToStringVkQueueGlobalPriorityEXT(out, pstruct->globalPriority); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->globalPriority);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkImportMemoryHostPointerInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImportMemoryHostPointerInfoEXT *pstruct = (const VkImportMemoryHostPointerInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExternalMemoryHandleTypeFlagBits handleType
    IndentSpaces(out, indent);
    *out += "handleType:                     ";
    *out += "VkExternalMemoryHandleTypeFlagBits = "; // TEQ
    EnumToStringVkExternalMemoryHandleTypeFlagBits(out, pstruct->handleType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->handleType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pHostPointer
    IndentSpaces(out, indent);
    *out += "pHostPointer:                   ";
    *out += "void* = "; // TEQ
    if (pstruct->pHostPointer == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pHostPointer); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkMemoryHostPointerPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryHostPointerPropertiesEXT *pstruct = (const VkMemoryHostPointerPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t memoryTypeBits
    IndentSpaces(out, indent);
    *out += "memoryTypeBits:                 ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->memoryTypeBits); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExternalMemoryHostPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceExternalMemoryHostPropertiesEXT *pstruct = (const VkPhysicalDeviceExternalMemoryHostPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceSize minImportedHostPointerAlignment
    IndentSpaces(out, indent);
    *out += "minImportedHostPointerAlignment: ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->minImportedHostPointerAlignment); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineCompilerControlCreateInfoAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineCompilerControlCreateInfoAMD *pstruct = (const VkPipelineCompilerControlCreateInfoAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineCompilerControlFlagsAMD compilerControlFlags
    IndentSpaces(out, indent);
    *out += "compilerControlFlags:           ";
    *out += "VkPipelineCompilerControlFlagsAMD = "; // TEQ
    FlagsToString(out, pstruct->compilerControlFlags, EnumToStringVkPipelineCompilerControlFlagBitsAMD); // URW
}

void StructureToString(std::string* out, const Decoded_VkCalibratedTimestampInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCalibratedTimestampInfoEXT *pstruct = (const VkCalibratedTimestampInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkTimeDomainEXT timeDomain
    IndentSpaces(out, indent);
    *out += "timeDomain:                     ";
    *out += "VkTimeDomainEXT = "; // TEQ
    EnumToStringVkTimeDomainEXT(out, pstruct->timeDomain); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->timeDomain);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderCorePropertiesAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderCorePropertiesAMD *pstruct = (const VkPhysicalDeviceShaderCorePropertiesAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t shaderEngineCount
    IndentSpaces(out, indent);
    *out += "shaderEngineCount:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->shaderEngineCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t shaderArraysPerEngineCount
    IndentSpaces(out, indent);
    *out += "shaderArraysPerEngineCount:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->shaderArraysPerEngineCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t computeUnitsPerShaderArray
    IndentSpaces(out, indent);
    *out += "computeUnitsPerShaderArray:     ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->computeUnitsPerShaderArray); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t simdPerComputeUnit
    IndentSpaces(out, indent);
    *out += "simdPerComputeUnit:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->simdPerComputeUnit); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t wavefrontsPerSimd
    IndentSpaces(out, indent);
    *out += "wavefrontsPerSimd:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->wavefrontsPerSimd); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t wavefrontSize
    IndentSpaces(out, indent);
    *out += "wavefrontSize:                  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->wavefrontSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t sgprsPerSimd
    IndentSpaces(out, indent);
    *out += "sgprsPerSimd:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->sgprsPerSimd); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t minSgprAllocation
    IndentSpaces(out, indent);
    *out += "minSgprAllocation:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minSgprAllocation); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxSgprAllocation
    IndentSpaces(out, indent);
    *out += "maxSgprAllocation:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxSgprAllocation); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t sgprAllocationGranularity
    IndentSpaces(out, indent);
    *out += "sgprAllocationGranularity:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->sgprAllocationGranularity); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t vgprsPerSimd
    IndentSpaces(out, indent);
    *out += "vgprsPerSimd:                   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->vgprsPerSimd); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t minVgprAllocation
    IndentSpaces(out, indent);
    *out += "minVgprAllocation:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minVgprAllocation); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxVgprAllocation
    IndentSpaces(out, indent);
    *out += "maxVgprAllocation:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxVgprAllocation); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t vgprAllocationGranularity
    IndentSpaces(out, indent);
    *out += "vgprAllocationGranularity:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->vgprAllocationGranularity); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDeviceMemoryOverallocationCreateInfoAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDeviceMemoryOverallocationCreateInfoAMD *pstruct = (const VkDeviceMemoryOverallocationCreateInfoAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkMemoryOverallocationBehaviorAMD overallocationBehavior
    IndentSpaces(out, indent);
    *out += "overallocationBehavior:         ";
    *out += "VkMemoryOverallocationBehaviorAMD = "; // TEQ
    EnumToStringVkMemoryOverallocationBehaviorAMD(out, pstruct->overallocationBehavior); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->overallocationBehavior);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT *pstruct = (const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxVertexAttribDivisor
    IndentSpaces(out, indent);
    *out += "maxVertexAttribDivisor:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxVertexAttribDivisor); // UYW
}

void StructureToString(std::string* out, const Decoded_VkVertexInputBindingDivisorDescriptionEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkVertexInputBindingDivisorDescriptionEXT *pstruct = (const VkVertexInputBindingDivisorDescriptionEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t binding
    IndentSpaces(out, indent);
    *out += "binding:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->binding); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t divisor
    IndentSpaces(out, indent);
    *out += "divisor:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->divisor); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineVertexInputDivisorStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineVertexInputDivisorStateCreateInfoEXT *pstruct = (const VkPipelineVertexInputDivisorStateCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t vertexBindingDivisorCount
    IndentSpaces(out, indent);
    *out += "vertexBindingDivisorCount:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->vertexBindingDivisorCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkVertexInputBindingDivisorDescriptionEXT* pVertexBindingDivisors
    IndentSpaces(out, indent);
    *out += "pVertexBindingDivisors:         ";
    *out += "const VkVertexInputBindingDivisorDescriptionEXT* = "; // TEQ
    if (pstruct->pVertexBindingDivisors == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pVertexBindingDivisors->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkVertexInputBindingDivisorDescriptionEXT>(out, indent+1, 1, "VkVertexInputBindingDivisorDescriptionEXT", pstruct_in.pVertexBindingDivisors->GetMetaStructPointer(), "pVertexBindingDivisors", pstruct->vertexBindingDivisorCount, false, pstruct_in.pVertexBindingDivisors->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT *pstruct = (const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 vertexAttributeInstanceRateDivisor
    IndentSpaces(out, indent);
    *out += "vertexAttributeInstanceRateDivisor: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->vertexAttributeInstanceRateDivisor); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 vertexAttributeInstanceRateZeroDivisor
    IndentSpaces(out, indent);
    *out += "vertexAttributeInstanceRateZeroDivisor: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->vertexAttributeInstanceRateZeroDivisor); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPresentFrameTokenGGP &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPresentFrameTokenGGP *pstruct = (const VkPresentFrameTokenGGP *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint64_t frameToken
    IndentSpaces(out, indent);
    *out += "frameToken:                     ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->frameToken); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineCreationFeedbackEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineCreationFeedbackEXT *pstruct = (const VkPipelineCreationFeedbackEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkPipelineCreationFeedbackFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineCreationFeedbackFlagsEXT = "; // TEQ
    FlagsToString(out, pstruct->flags, EnumToStringVkPipelineCreationFeedbackFlagBitsEXT); // URW
    *out += "\n"; // GDS

    // struct member: uint64_t duration
    IndentSpaces(out, indent);
    *out += "duration:                       ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->duration); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineCreationFeedbackCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineCreationFeedbackCreateInfoEXT *pstruct = (const VkPipelineCreationFeedbackCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineCreationFeedbackEXT* pPipelineCreationFeedback
    IndentSpaces(out, indent);
    *out += "pPipelineCreationFeedback:      ";
    *out += "VkPipelineCreationFeedbackEXT* = "; // TEQ
    if (pstruct->pPipelineCreationFeedback == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pPipelineCreationFeedback->GetAddress()); // JHJ
        *out += ":";
        StructureToString(out, *pstruct_in.pPipelineCreationFeedback->GetMetaStructPointer(), indent+1,  base_addr + offsetof(VkPipelineCreationFeedbackCreateInfoEXT, pPipelineCreationFeedback)); // GLN
    }
    *out += "\n"; // GDS

    // struct member: uint32_t pipelineStageCreationFeedbackCount
    IndentSpaces(out, indent);
    *out += "pipelineStageCreationFeedbackCount: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->pipelineStageCreationFeedbackCount); // UYW
    *out += "\n"; // GDS

    // struct member: VkPipelineCreationFeedbackEXT* pPipelineStageCreationFeedbacks
    IndentSpaces(out, indent);
    *out += "pPipelineStageCreationFeedbacks: ";
    *out += "VkPipelineCreationFeedbackEXT* = "; // TEQ
    if (pstruct->pPipelineStageCreationFeedbacks == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pPipelineStageCreationFeedbacks->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkPipelineCreationFeedbackEXT>(out, indent+1, 1, "VkPipelineCreationFeedbackEXT", pstruct_in.pPipelineStageCreationFeedbacks->GetMetaStructPointer(), "pPipelineStageCreationFeedbacks", pstruct->pipelineStageCreationFeedbackCount, false, pstruct_in.pPipelineStageCreationFeedbacks->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV *pstruct = (const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 computeDerivativeGroupQuads
    IndentSpaces(out, indent);
    *out += "computeDerivativeGroupQuads:    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->computeDerivativeGroupQuads); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 computeDerivativeGroupLinear
    IndentSpaces(out, indent);
    *out += "computeDerivativeGroupLinear:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->computeDerivativeGroupLinear); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMeshShaderFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMeshShaderFeaturesNV *pstruct = (const VkPhysicalDeviceMeshShaderFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 taskShader
    IndentSpaces(out, indent);
    *out += "taskShader:                     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->taskShader); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 meshShader
    IndentSpaces(out, indent);
    *out += "meshShader:                     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->meshShader); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMeshShaderPropertiesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMeshShaderPropertiesNV *pstruct = (const VkPhysicalDeviceMeshShaderPropertiesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t maxDrawMeshTasksCount
    IndentSpaces(out, indent);
    *out += "maxDrawMeshTasksCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxDrawMeshTasksCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTaskWorkGroupInvocations
    IndentSpaces(out, indent);
    *out += "maxTaskWorkGroupInvocations:    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTaskWorkGroupInvocations); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTaskWorkGroupSize
    IndentSpaces(out, indent);
    *out += "maxTaskWorkGroupSize:           ";
    *out += "uint32_t[";
    *out += "3"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxTaskWorkGroupSize)); // IYY
    ScalarValueToStringStruct vinfo_maxTaskWorkGroupSize = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint32_t>>(out, indent, 0, "uint32_t", &pstruct_in.maxTaskWorkGroupSize, "maxTaskWorkGroupSize", 3, vinfo_maxTaskWorkGroupSize); // JPE
    *out += "\n"; // GDS

    // struct member: uint32_t maxTaskTotalMemorySize
    IndentSpaces(out, indent);
    *out += "maxTaskTotalMemorySize:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTaskTotalMemorySize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxTaskOutputCount
    IndentSpaces(out, indent);
    *out += "maxTaskOutputCount:             ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxTaskOutputCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxMeshWorkGroupInvocations
    IndentSpaces(out, indent);
    *out += "maxMeshWorkGroupInvocations:    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxMeshWorkGroupInvocations); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxMeshWorkGroupSize
    IndentSpaces(out, indent);
    *out += "maxMeshWorkGroupSize:           ";
    *out += "uint32_t[";
    *out += "3"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceMeshShaderPropertiesNV, maxMeshWorkGroupSize)); // IYY
    ScalarValueToStringStruct vinfo_maxMeshWorkGroupSize = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<uint32_t>>(out, indent, 0, "uint32_t", &pstruct_in.maxMeshWorkGroupSize, "maxMeshWorkGroupSize", 3, vinfo_maxMeshWorkGroupSize); // JPE
    *out += "\n"; // GDS

    // struct member: uint32_t maxMeshTotalMemorySize
    IndentSpaces(out, indent);
    *out += "maxMeshTotalMemorySize:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxMeshTotalMemorySize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxMeshOutputVertices
    IndentSpaces(out, indent);
    *out += "maxMeshOutputVertices:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxMeshOutputVertices); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxMeshOutputPrimitives
    IndentSpaces(out, indent);
    *out += "maxMeshOutputPrimitives:        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxMeshOutputPrimitives); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxMeshMultiviewViewCount
    IndentSpaces(out, indent);
    *out += "maxMeshMultiviewViewCount:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxMeshMultiviewViewCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t meshOutputPerVertexGranularity
    IndentSpaces(out, indent);
    *out += "meshOutputPerVertexGranularity: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->meshOutputPerVertexGranularity); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t meshOutputPerPrimitiveGranularity
    IndentSpaces(out, indent);
    *out += "meshOutputPerPrimitiveGranularity: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->meshOutputPerPrimitiveGranularity); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDrawMeshTasksIndirectCommandNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDrawMeshTasksIndirectCommandNV *pstruct = (const VkDrawMeshTasksIndirectCommandNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t taskCount
    IndentSpaces(out, indent);
    *out += "taskCount:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->taskCount); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t firstTask
    IndentSpaces(out, indent);
    *out += "firstTask:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->firstTask); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV *pstruct = (const VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 fragmentShaderBarycentric
    IndentSpaces(out, indent);
    *out += "fragmentShaderBarycentric:      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fragmentShaderBarycentric); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderImageFootprintFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderImageFootprintFeaturesNV *pstruct = (const VkPhysicalDeviceShaderImageFootprintFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 imageFootprint
    IndentSpaces(out, indent);
    *out += "imageFootprint:                 ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->imageFootprint); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineViewportExclusiveScissorStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineViewportExclusiveScissorStateCreateInfoNV *pstruct = (const VkPipelineViewportExclusiveScissorStateCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t exclusiveScissorCount
    IndentSpaces(out, indent);
    *out += "exclusiveScissorCount:          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->exclusiveScissorCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkRect2D* pExclusiveScissors
    IndentSpaces(out, indent);
    *out += "pExclusiveScissors:             ";
    *out += "const VkRect2D* = "; // TEQ
    if (pstruct->pExclusiveScissors == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pExclusiveScissors->GetAddress()); // WUT
        ArrayOfStructsToString<Decoded_VkRect2D>(out, indent+1, 1, "VkRect2D", pstruct_in.pExclusiveScissors->GetMetaStructPointer(), "pExclusiveScissors", pstruct->exclusiveScissorCount, false, pstruct_in.pExclusiveScissors->GetAddress());  // CCP
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceExclusiveScissorFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceExclusiveScissorFeaturesNV *pstruct = (const VkPhysicalDeviceExclusiveScissorFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 exclusiveScissor
    IndentSpaces(out, indent);
    *out += "exclusiveScissor:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->exclusiveScissor); //EQA
}

void StructureToString(std::string* out, const Decoded_VkQueueFamilyCheckpointPropertiesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkQueueFamilyCheckpointPropertiesNV *pstruct = (const VkQueueFamilyCheckpointPropertiesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineStageFlags checkpointExecutionStageMask
    IndentSpaces(out, indent);
    *out += "checkpointExecutionStageMask:   ";
    *out += "VkPipelineStageFlags = "; // TEQ
    FlagsToString(out, pstruct->checkpointExecutionStageMask, EnumToStringVkPipelineStageFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkCheckpointDataNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCheckpointDataNV *pstruct = (const VkCheckpointDataNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineStageFlagBits stage
    IndentSpaces(out, indent);
    *out += "stage:                          ";
    *out += "VkPipelineStageFlagBits = "; // TEQ
    EnumToStringVkPipelineStageFlagBits(out, pstruct->stage); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->stage);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pCheckpointMarker
    IndentSpaces(out, indent);
    *out += "pCheckpointMarker:              ";
    *out += "void* = "; // TEQ
    if (pstruct->pCheckpointMarker == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pCheckpointMarker); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL *pstruct = (const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderIntegerFunctions2
    IndentSpaces(out, indent);
    *out += "shaderIntegerFunctions2:        ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderIntegerFunctions2); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPerformanceValueDataINTEL &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPerformanceValueDataINTEL *pstruct = (const VkPerformanceValueDataINTEL *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: uint32_t value32
    IndentSpaces(out, indent);
    *out += "value32:                        ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->value32); // UYW
    *out += "\n"; // GDS

    // struct member: uint64_t value64
    IndentSpaces(out, indent);
    *out += "value64:                        ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->value64); // UYW
    *out += "\n"; // GDS

    // struct member: float valueFloat
    IndentSpaces(out, indent);
    *out += "valueFloat:                     ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->valueFloat); // PEZ
    *out += "\n"; // GDS

    // struct member: VkBool32 valueBool
    IndentSpaces(out, indent);
    *out += "valueBool:                      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->valueBool); //EQA
    *out += "\n"; // GDS

    // struct member: const char* valueString
    IndentSpaces(out, indent);
    *out += "valueString:                    ";
    *out += "const char* = "; // TEQ
    StringToQuotedString(out, pstruct->valueString); // TGI
}

void StructureToString(std::string* out, const Decoded_VkPerformanceValueINTEL &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPerformanceValueINTEL *pstruct = (const VkPerformanceValueINTEL *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkPerformanceValueTypeINTEL type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkPerformanceValueTypeINTEL = "; // TEQ
    EnumToStringVkPerformanceValueTypeINTEL(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkPerformanceValueDataINTEL data
    IndentSpaces(out, indent);
    *out += "data:                           ";
    *out += "VkPerformanceValueDataINTEL = "; // TEQ
    *out += "(Union):"; // RGT
    StructureToString(out, *pstruct_in.data, indent+1,  base_addr + offsetof(VkPerformanceValueINTEL, data)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkInitializePerformanceApiInfoINTEL &pstruct_in, int indent, uint64_t base_addr)
{
    const VkInitializePerformanceApiInfoINTEL *pstruct = (const VkInitializePerformanceApiInfoINTEL *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: void* pUserData
    IndentSpaces(out, indent);
    *out += "pUserData:                      ";
    *out += "void* = "; // TEQ
    if (pstruct->pUserData == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pUserData); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkQueryPoolCreateInfoINTEL &pstruct_in, int indent, uint64_t base_addr)
{
    const VkQueryPoolCreateInfoINTEL *pstruct = (const VkQueryPoolCreateInfoINTEL *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkQueryPoolSamplingModeINTEL performanceCountersSampling
    IndentSpaces(out, indent);
    *out += "performanceCountersSampling:    ";
    *out += "VkQueryPoolSamplingModeINTEL = "; // TEQ
    EnumToStringVkQueryPoolSamplingModeINTEL(out, pstruct->performanceCountersSampling); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->performanceCountersSampling);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPerformanceMarkerInfoINTEL &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPerformanceMarkerInfoINTEL *pstruct = (const VkPerformanceMarkerInfoINTEL *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint64_t marker
    IndentSpaces(out, indent);
    *out += "marker:                         ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->marker); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPerformanceStreamMarkerInfoINTEL &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPerformanceStreamMarkerInfoINTEL *pstruct = (const VkPerformanceStreamMarkerInfoINTEL *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t marker
    IndentSpaces(out, indent);
    *out += "marker:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->marker); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPerformanceOverrideInfoINTEL &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPerformanceOverrideInfoINTEL *pstruct = (const VkPerformanceOverrideInfoINTEL *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPerformanceOverrideTypeINTEL type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkPerformanceOverrideTypeINTEL = "; // TEQ
    EnumToStringVkPerformanceOverrideTypeINTEL(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 enable
    IndentSpaces(out, indent);
    *out += "enable:                         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->enable); //EQA
    *out += "\n"; // GDS

    // struct member: uint64_t parameter
    IndentSpaces(out, indent);
    *out += "parameter:                      ";
    *out += "uint64_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->parameter); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPerformanceConfigurationAcquireInfoINTEL &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPerformanceConfigurationAcquireInfoINTEL *pstruct = (const VkPerformanceConfigurationAcquireInfoINTEL *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPerformanceConfigurationTypeINTEL type
    IndentSpaces(out, indent);
    *out += "type:                           ";
    *out += "VkPerformanceConfigurationTypeINTEL = "; // TEQ
    EnumToStringVkPerformanceConfigurationTypeINTEL(out, pstruct->type); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->type);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDevicePCIBusInfoPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDevicePCIBusInfoPropertiesEXT *pstruct = (const VkPhysicalDevicePCIBusInfoPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t pciDomain
    IndentSpaces(out, indent);
    *out += "pciDomain:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->pciDomain); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t pciBus
    IndentSpaces(out, indent);
    *out += "pciBus:                         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->pciBus); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t pciDevice
    IndentSpaces(out, indent);
    *out += "pciDevice:                      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->pciDevice); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t pciFunction
    IndentSpaces(out, indent);
    *out += "pciFunction:                    ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->pciFunction); // UYW
}

void StructureToString(std::string* out, const Decoded_VkDisplayNativeHdrSurfaceCapabilitiesAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkDisplayNativeHdrSurfaceCapabilitiesAMD *pstruct = (const VkDisplayNativeHdrSurfaceCapabilitiesAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 localDimmingSupport
    IndentSpaces(out, indent);
    *out += "localDimmingSupport:            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->localDimmingSupport); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSwapchainDisplayNativeHdrCreateInfoAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSwapchainDisplayNativeHdrCreateInfoAMD *pstruct = (const VkSwapchainDisplayNativeHdrCreateInfoAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 localDimmingEnable
    IndentSpaces(out, indent);
    *out += "localDimmingEnable:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->localDimmingEnable); //EQA
}

void StructureToString(std::string* out, const Decoded_VkImagePipeSurfaceCreateInfoFUCHSIA &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImagePipeSurfaceCreateInfoFUCHSIA *pstruct = (const VkImagePipeSurfaceCreateInfoFUCHSIA *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImagePipeSurfaceCreateFlagsFUCHSIA flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkImagePipeSurfaceCreateFlagsFUCHSIA = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t imagePipeHandle
    IndentSpaces(out, indent);
    *out += "imagePipeHandle:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->imagePipeHandle); // UYW
}

void StructureToString(std::string* out, const Decoded_VkMetalSurfaceCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMetalSurfaceCreateInfoEXT *pstruct = (const VkMetalSurfaceCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkMetalSurfaceCreateFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkMetalSurfaceCreateFlagsEXT = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: const void* pLayer
    IndentSpaces(out, indent);
    *out += "pLayer:                         ";
    *out += "const void* = "; // TEQ
    if (pstruct->pLayer == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pLayer); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFragmentDensityMapFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceFragmentDensityMapFeaturesEXT *pstruct = (const VkPhysicalDeviceFragmentDensityMapFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 fragmentDensityMap
    IndentSpaces(out, indent);
    *out += "fragmentDensityMap:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fragmentDensityMap); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 fragmentDensityMapDynamic
    IndentSpaces(out, indent);
    *out += "fragmentDensityMapDynamic:      ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fragmentDensityMapDynamic); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 fragmentDensityMapNonSubsampledImages
    IndentSpaces(out, indent);
    *out += "fragmentDensityMapNonSubsampledImages: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fragmentDensityMapNonSubsampledImages); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFragmentDensityMapPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceFragmentDensityMapPropertiesEXT *pstruct = (const VkPhysicalDeviceFragmentDensityMapPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkExtent2D minFragmentDensityTexelSize
    IndentSpaces(out, indent);
    *out += "minFragmentDensityTexelSize:    ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.minFragmentDensityTexelSize, indent+1,  base_addr + offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, minFragmentDensityTexelSize)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkExtent2D maxFragmentDensityTexelSize
    IndentSpaces(out, indent);
    *out += "maxFragmentDensityTexelSize:    ";
    *out += "VkExtent2D = "; // TEQ
    StructureToString(out, *pstruct_in.maxFragmentDensityTexelSize, indent+1,  base_addr + offsetof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, maxFragmentDensityTexelSize)); // AZJ
    *out += "\n"; // GDS

    // struct member: VkBool32 fragmentDensityInvocations
    IndentSpaces(out, indent);
    *out += "fragmentDensityInvocations:     ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fragmentDensityInvocations); //EQA
}

void StructureToString(std::string* out, const Decoded_VkRenderPassFragmentDensityMapCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkRenderPassFragmentDensityMapCreateInfoEXT *pstruct = (const VkRenderPassFragmentDensityMapCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkAttachmentReference fragmentDensityMapAttachment
    IndentSpaces(out, indent);
    *out += "fragmentDensityMapAttachment:   ";
    *out += "VkAttachmentReference = "; // TEQ
    StructureToString(out, *pstruct_in.fragmentDensityMapAttachment, indent+1,  base_addr + offsetof(VkRenderPassFragmentDensityMapCreateInfoEXT, fragmentDensityMapAttachment)); // AZJ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceScalarBlockLayoutFeaturesEXT *pstruct = (const VkPhysicalDeviceScalarBlockLayoutFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 scalarBlockLayout
    IndentSpaces(out, indent);
    *out += "scalarBlockLayout:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->scalarBlockLayout); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT *pstruct = (const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 subgroupSizeControl
    IndentSpaces(out, indent);
    *out += "subgroupSizeControl:            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->subgroupSizeControl); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 computeFullSubgroups
    IndentSpaces(out, indent);
    *out += "computeFullSubgroups:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->computeFullSubgroups); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT *pstruct = (const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t minSubgroupSize
    IndentSpaces(out, indent);
    *out += "minSubgroupSize:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->minSubgroupSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxSubgroupSize
    IndentSpaces(out, indent);
    *out += "maxSubgroupSize:                ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxSubgroupSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t maxComputeWorkgroupSubgroups
    IndentSpaces(out, indent);
    *out += "maxComputeWorkgroupSubgroups:   ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->maxComputeWorkgroupSubgroups); // UYW
    *out += "\n"; // GDS

    // struct member: VkShaderStageFlags requiredSubgroupSizeStages
    IndentSpaces(out, indent);
    *out += "requiredSubgroupSizeStages:     ";
    *out += "VkShaderStageFlags = "; // TEQ
    FlagsToString(out, pstruct->requiredSubgroupSizeStages, EnumToStringVkShaderStageFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT *pstruct = (const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t requiredSubgroupSize
    IndentSpaces(out, indent);
    *out += "requiredSubgroupSize:           ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->requiredSubgroupSize); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderCoreProperties2AMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderCoreProperties2AMD *pstruct = (const VkPhysicalDeviceShaderCoreProperties2AMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkShaderCorePropertiesFlagsAMD shaderCoreFeatures
    IndentSpaces(out, indent);
    *out += "shaderCoreFeatures:             ";
    *out += "VkShaderCorePropertiesFlagsAMD = "; // TEQ
    FlagsToString(out, pstruct->shaderCoreFeatures, EnumToStringVkShaderCorePropertiesFlagBitsAMD); // URW
    *out += "\n"; // GDS

    // struct member: uint32_t activeComputeUnitCount
    IndentSpaces(out, indent);
    *out += "activeComputeUnitCount:         ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->activeComputeUnitCount); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCoherentMemoryFeaturesAMD &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceCoherentMemoryFeaturesAMD *pstruct = (const VkPhysicalDeviceCoherentMemoryFeaturesAMD *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 deviceCoherentMemory
    IndentSpaces(out, indent);
    *out += "deviceCoherentMemory:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->deviceCoherentMemory); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMemoryBudgetPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMemoryBudgetPropertiesEXT *pstruct = (const VkPhysicalDeviceMemoryBudgetPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceSize heapBudget
    IndentSpaces(out, indent);
    *out += "heapBudget:                     ";
    *out += "VkDeviceSize[";
    *out += "VK_MAX_MEMORY_HEAPS"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapBudget)); // IYY
    ScalarValueToStringStruct vinfo_heapBudget = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<VkDeviceSize>>(out, indent, 0, "VkDeviceSize", &pstruct_in.heapBudget, "heapBudget", VK_MAX_MEMORY_HEAPS, vinfo_heapBudget); // JPE
    *out += "\n"; // GDS

    // struct member: VkDeviceSize heapUsage
    IndentSpaces(out, indent);
    *out += "heapUsage:                      ";
    *out += "VkDeviceSize[";
    *out += "VK_MAX_MEMORY_HEAPS"; // TPK
    *out += "] = ";
    AddrToString(out, base_addr + offsetof(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapUsage)); // IYY
    ScalarValueToStringStruct vinfo_heapUsage = {false, false, false, nullptr};
    ArrayToString<PointerDecoder<VkDeviceSize>>(out, indent, 0, "VkDeviceSize", &pstruct_in.heapUsage, "heapUsage", VK_MAX_MEMORY_HEAPS, vinfo_heapUsage); // JPE
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceMemoryPriorityFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceMemoryPriorityFeaturesEXT *pstruct = (const VkPhysicalDeviceMemoryPriorityFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 memoryPriority
    IndentSpaces(out, indent);
    *out += "memoryPriority:                 ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->memoryPriority); //EQA
}

void StructureToString(std::string* out, const Decoded_VkMemoryPriorityAllocateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkMemoryPriorityAllocateInfoEXT *pstruct = (const VkMemoryPriorityAllocateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: float priority
    IndentSpaces(out, indent);
    *out += "priority:                       ";
    *out += "float = "; // TEQ
    DoubleToString(out, pstruct->priority); // PEZ
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV *pstruct = (const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 dedicatedAllocationImageAliasing
    IndentSpaces(out, indent);
    *out += "dedicatedAllocationImageAliasing: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->dedicatedAllocationImageAliasing); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT *pstruct = (const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 bufferDeviceAddress
    IndentSpaces(out, indent);
    *out += "bufferDeviceAddress:            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->bufferDeviceAddress); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 bufferDeviceAddressCaptureReplay
    IndentSpaces(out, indent);
    *out += "bufferDeviceAddressCaptureReplay: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->bufferDeviceAddressCaptureReplay); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 bufferDeviceAddressMultiDevice
    IndentSpaces(out, indent);
    *out += "bufferDeviceAddressMultiDevice: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->bufferDeviceAddressMultiDevice); //EQA
}

void StructureToString(std::string* out, const Decoded_VkBufferDeviceAddressInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBufferDeviceAddressInfoEXT *pstruct = (const VkBufferDeviceAddressInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBuffer buffer
    IndentSpaces(out, indent);
    *out += "buffer:                         ";
    *out += "VkBuffer = "; // TEQ
    AddrToString(out, pstruct_in.buffer); // PAQ
}

void StructureToString(std::string* out, const Decoded_VkBufferDeviceAddressCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkBufferDeviceAddressCreateInfoEXT *pstruct = (const VkBufferDeviceAddressCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceAddress deviceAddress
    IndentSpaces(out, indent);
    *out += "deviceAddress:                  ";
    *out += "VkDeviceAddress = "; // TEQ
    UnsignedDecimalToString(out, pstruct->deviceAddress); // UYW
}

void StructureToString(std::string* out, const Decoded_VkImageStencilUsageCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkImageStencilUsageCreateInfoEXT *pstruct = (const VkImageStencilUsageCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkImageUsageFlags stencilUsage
    IndentSpaces(out, indent);
    *out += "stencilUsage:                   ";
    *out += "VkImageUsageFlags = "; // TEQ
    FlagsToString(out, pstruct->stencilUsage, EnumToStringVkImageUsageFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkValidationFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkValidationFeaturesEXT *pstruct = (const VkValidationFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t enabledValidationFeatureCount
    IndentSpaces(out, indent);
    *out += "enabledValidationFeatureCount:  ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->enabledValidationFeatureCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkValidationFeatureEnableEXT* pEnabledValidationFeatures
    IndentSpaces(out, indent);
    *out += "pEnabledValidationFeatures:     ";
    *out += "const VkValidationFeatureEnableEXT* = "; // TEQ
    if (pstruct->pEnabledValidationFeatures == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pEnabledValidationFeatures.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pEnabledValidationFeatures = {false, true, false, EnumToStringVkValidationFeatureEnableEXT};
        ArrayToString<PointerDecoder<VkValidationFeatureEnableEXT>>(out, indent, 1, "const VkValidationFeatureEnableEXT*", &pstruct_in.pEnabledValidationFeatures, "pEnabledValidationFeatures", pstruct->enabledValidationFeatureCount,  vinfo_pEnabledValidationFeatures);  // CXC
    }
    *out += "\n"; // GDS

    // struct member: uint32_t disabledValidationFeatureCount
    IndentSpaces(out, indent);
    *out += "disabledValidationFeatureCount: ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->disabledValidationFeatureCount); // UYW
    *out += "\n"; // GDS

    // struct member: const VkValidationFeatureDisableEXT* pDisabledValidationFeatures
    IndentSpaces(out, indent);
    *out += "pDisabledValidationFeatures:    ";
    *out += "const VkValidationFeatureDisableEXT* = "; // TEQ
    if (pstruct->pDisabledValidationFeatures == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.pDisabledValidationFeatures.GetAddress()); // PAZ
        ScalarValueToStringStruct vinfo_pDisabledValidationFeatures = {false, true, false, EnumToStringVkValidationFeatureDisableEXT};
        ArrayToString<PointerDecoder<VkValidationFeatureDisableEXT>>(out, indent, 1, "const VkValidationFeatureDisableEXT*", &pstruct_in.pDisabledValidationFeatures, "pDisabledValidationFeatures", pstruct->disabledValidationFeatureCount,  vinfo_pDisabledValidationFeatures);  // CXC
    }
}

void StructureToString(std::string* out, const Decoded_VkCooperativeMatrixPropertiesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkCooperativeMatrixPropertiesNV *pstruct = (const VkCooperativeMatrixPropertiesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t MSize
    IndentSpaces(out, indent);
    *out += "MSize:                          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->MSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t NSize
    IndentSpaces(out, indent);
    *out += "NSize:                          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->NSize); // UYW
    *out += "\n"; // GDS

    // struct member: uint32_t KSize
    IndentSpaces(out, indent);
    *out += "KSize:                          ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->KSize); // UYW
    *out += "\n"; // GDS

    // struct member: VkComponentTypeNV AType
    IndentSpaces(out, indent);
    *out += "AType:                          ";
    *out += "VkComponentTypeNV = "; // TEQ
    EnumToStringVkComponentTypeNV(out, pstruct->AType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->AType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkComponentTypeNV BType
    IndentSpaces(out, indent);
    *out += "BType:                          ";
    *out += "VkComponentTypeNV = "; // TEQ
    EnumToStringVkComponentTypeNV(out, pstruct->BType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->BType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkComponentTypeNV CType
    IndentSpaces(out, indent);
    *out += "CType:                          ";
    *out += "VkComponentTypeNV = "; // TEQ
    EnumToStringVkComponentTypeNV(out, pstruct->CType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->CType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkComponentTypeNV DType
    IndentSpaces(out, indent);
    *out += "DType:                          ";
    *out += "VkComponentTypeNV = "; // TEQ
    EnumToStringVkComponentTypeNV(out, pstruct->DType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->DType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkScopeNV scope
    IndentSpaces(out, indent);
    *out += "scope:                          ";
    *out += "VkScopeNV = "; // TEQ
    EnumToStringVkScopeNV(out, pstruct->scope); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->scope);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCooperativeMatrixFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceCooperativeMatrixFeaturesNV *pstruct = (const VkPhysicalDeviceCooperativeMatrixFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 cooperativeMatrix
    IndentSpaces(out, indent);
    *out += "cooperativeMatrix:              ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->cooperativeMatrix); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 cooperativeMatrixRobustBufferAccess
    IndentSpaces(out, indent);
    *out += "cooperativeMatrixRobustBufferAccess: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->cooperativeMatrixRobustBufferAccess); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCooperativeMatrixPropertiesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceCooperativeMatrixPropertiesNV *pstruct = (const VkPhysicalDeviceCooperativeMatrixPropertiesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkShaderStageFlags cooperativeMatrixSupportedStages
    IndentSpaces(out, indent);
    *out += "cooperativeMatrixSupportedStages: ";
    *out += "VkShaderStageFlags = "; // TEQ
    FlagsToString(out, pstruct->cooperativeMatrixSupportedStages, EnumToStringVkShaderStageFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceCoverageReductionModeFeaturesNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceCoverageReductionModeFeaturesNV *pstruct = (const VkPhysicalDeviceCoverageReductionModeFeaturesNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 coverageReductionMode
    IndentSpaces(out, indent);
    *out += "coverageReductionMode:          ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->coverageReductionMode); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPipelineCoverageReductionStateCreateInfoNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineCoverageReductionStateCreateInfoNV *pstruct = (const VkPipelineCoverageReductionStateCreateInfoNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkPipelineCoverageReductionStateCreateFlagsNV flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkPipelineCoverageReductionStateCreateFlagsNV = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
    *out += "\n"; // GDS

    // struct member: VkCoverageReductionModeNV coverageReductionMode
    IndentSpaces(out, indent);
    *out += "coverageReductionMode:          ";
    *out += "VkCoverageReductionModeNV = "; // TEQ
    EnumToStringVkCoverageReductionModeNV(out, pstruct->coverageReductionMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->coverageReductionMode);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkFramebufferMixedSamplesCombinationNV &pstruct_in, int indent, uint64_t base_addr)
{
    const VkFramebufferMixedSamplesCombinationNV *pstruct = (const VkFramebufferMixedSamplesCombinationNV *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkCoverageReductionModeNV coverageReductionMode
    IndentSpaces(out, indent);
    *out += "coverageReductionMode:          ";
    *out += "VkCoverageReductionModeNV = "; // TEQ
    EnumToStringVkCoverageReductionModeNV(out, pstruct->coverageReductionMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->coverageReductionMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlagBits rasterizationSamples
    IndentSpaces(out, indent);
    *out += "rasterizationSamples:           ";
    *out += "VkSampleCountFlagBits = "; // TEQ
    EnumToStringVkSampleCountFlagBits(out, pstruct->rasterizationSamples); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->rasterizationSamples);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags depthStencilSamples
    IndentSpaces(out, indent);
    *out += "depthStencilSamples:            ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->depthStencilSamples, EnumToStringVkSampleCountFlagBits); // URW
    *out += "\n"; // GDS

    // struct member: VkSampleCountFlags colorSamples
    IndentSpaces(out, indent);
    *out += "colorSamples:                   ";
    *out += "VkSampleCountFlags = "; // TEQ
    FlagsToString(out, pstruct->colorSamples, EnumToStringVkSampleCountFlagBits); // URW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT *pstruct = (const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 fragmentShaderSampleInterlock
    IndentSpaces(out, indent);
    *out += "fragmentShaderSampleInterlock:  ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fragmentShaderSampleInterlock); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 fragmentShaderPixelInterlock
    IndentSpaces(out, indent);
    *out += "fragmentShaderPixelInterlock:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fragmentShaderPixelInterlock); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 fragmentShaderShadingRateInterlock
    IndentSpaces(out, indent);
    *out += "fragmentShaderShadingRateInterlock: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fragmentShaderShadingRateInterlock); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT *pstruct = (const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 ycbcrImageArrays
    IndentSpaces(out, indent);
    *out += "ycbcrImageArrays:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->ycbcrImageArrays); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSurfaceFullScreenExclusiveInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSurfaceFullScreenExclusiveInfoEXT *pstruct = (const VkSurfaceFullScreenExclusiveInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkFullScreenExclusiveEXT fullScreenExclusive
    IndentSpaces(out, indent);
    *out += "fullScreenExclusive:            ";
    *out += "VkFullScreenExclusiveEXT = "; // TEQ
    EnumToStringVkFullScreenExclusiveEXT(out, pstruct->fullScreenExclusive); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->fullScreenExclusive);
    *out += ")";
}

void StructureToString(std::string* out, const Decoded_VkSurfaceCapabilitiesFullScreenExclusiveEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSurfaceCapabilitiesFullScreenExclusiveEXT *pstruct = (const VkSurfaceCapabilitiesFullScreenExclusiveEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 fullScreenExclusiveSupported
    IndentSpaces(out, indent);
    *out += "fullScreenExclusiveSupported:   ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->fullScreenExclusiveSupported); //EQA
}

void StructureToString(std::string* out, const Decoded_VkSurfaceFullScreenExclusiveWin32InfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkSurfaceFullScreenExclusiveWin32InfoEXT *pstruct = (const VkSurfaceFullScreenExclusiveWin32InfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: void* hmonitor
    IndentSpaces(out, indent);
    *out += "hmonitor:                       ";
    *out += "void* = "; // TEQ
    if (pstruct->hmonitor == nullptr) // WWX
    {
        *out += "NULL";
    }
    else
    {
        AddrToString(out, pstruct_in.hmonitor); // PWR
    }
}

void StructureToString(std::string* out, const Decoded_VkHeadlessSurfaceCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkHeadlessSurfaceCreateInfoEXT *pstruct = (const VkHeadlessSurfaceCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkHeadlessSurfaceCreateFlagsEXT flags
    IndentSpaces(out, indent);
    *out += "flags:                          ";
    *out += "VkHeadlessSurfaceCreateFlagsEXT = "; // TEQ
    UnsignedDecimalToString(out, pstruct->flags); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceLineRasterizationFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceLineRasterizationFeaturesEXT *pstruct = (const VkPhysicalDeviceLineRasterizationFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 rectangularLines
    IndentSpaces(out, indent);
    *out += "rectangularLines:               ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->rectangularLines); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 bresenhamLines
    IndentSpaces(out, indent);
    *out += "bresenhamLines:                 ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->bresenhamLines); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 smoothLines
    IndentSpaces(out, indent);
    *out += "smoothLines:                    ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->smoothLines); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 stippledRectangularLines
    IndentSpaces(out, indent);
    *out += "stippledRectangularLines:       ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->stippledRectangularLines); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 stippledBresenhamLines
    IndentSpaces(out, indent);
    *out += "stippledBresenhamLines:         ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->stippledBresenhamLines); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 stippledSmoothLines
    IndentSpaces(out, indent);
    *out += "stippledSmoothLines:            ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->stippledSmoothLines); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceLineRasterizationPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceLineRasterizationPropertiesEXT *pstruct = (const VkPhysicalDeviceLineRasterizationPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: uint32_t lineSubPixelPrecisionBits
    IndentSpaces(out, indent);
    *out += "lineSubPixelPrecisionBits:      ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->lineSubPixelPrecisionBits); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPipelineRasterizationLineStateCreateInfoEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPipelineRasterizationLineStateCreateInfoEXT *pstruct = (const VkPipelineRasterizationLineStateCreateInfoEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: const void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "const void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkLineRasterizationModeEXT lineRasterizationMode
    IndentSpaces(out, indent);
    *out += "lineRasterizationMode:          ";
    *out += "VkLineRasterizationModeEXT = "; // TEQ
    EnumToStringVkLineRasterizationModeEXT(out, pstruct->lineRasterizationMode); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->lineRasterizationMode);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: VkBool32 stippledLineEnable
    IndentSpaces(out, indent);
    *out += "stippledLineEnable:             ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->stippledLineEnable); //EQA
    *out += "\n"; // GDS

    // struct member: uint32_t lineStippleFactor
    IndentSpaces(out, indent);
    *out += "lineStippleFactor:              ";
    *out += "uint32_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->lineStippleFactor); // UYW
    *out += "\n"; // GDS

    // struct member: uint16_t lineStipplePattern
    IndentSpaces(out, indent);
    *out += "lineStipplePattern:             ";
    *out += "uint16_t = "; // TEQ
    UnsignedDecimalToString(out, pstruct->lineStipplePattern); // UYW
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceHostQueryResetFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceHostQueryResetFeaturesEXT *pstruct = (const VkPhysicalDeviceHostQueryResetFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 hostQueryReset
    IndentSpaces(out, indent);
    *out += "hostQueryReset:                 ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->hostQueryReset); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceIndexTypeUint8FeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceIndexTypeUint8FeaturesEXT *pstruct = (const VkPhysicalDeviceIndexTypeUint8FeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 indexTypeUint8
    IndentSpaces(out, indent);
    *out += "indexTypeUint8:                 ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->indexTypeUint8); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT *pstruct = (const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 shaderDemoteToHelperInvocation
    IndentSpaces(out, indent);
    *out += "shaderDemoteToHelperInvocation: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->shaderDemoteToHelperInvocation); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT *pstruct = (const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkBool32 texelBufferAlignment
    IndentSpaces(out, indent);
    *out += "texelBufferAlignment:           ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->texelBufferAlignment); //EQA
}

void StructureToString(std::string* out, const Decoded_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT &pstruct_in, int indent, uint64_t base_addr)
{
    const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT *pstruct = (const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT *)pstruct_in.decoded_value; // BTB
    assert(out != nullptr);
    if (pstruct == nullptr)
    {
        return;
    }
    *out += "\n"; // UUR

    // struct member: VkStructureType sType
    IndentSpaces(out, indent);
    *out += "sType:                          ";
    *out += "VkStructureType = "; // TEQ
    EnumToStringVkStructureType(out, pstruct->sType); // VSA
    *out += " (";
    UnsignedDecimalToString(out, pstruct->sType);
    *out += ")";
    *out += "\n"; // GDS

    // struct member: void* pNext
    IndentSpaces(out, indent);
    *out += "pNext:                          ";
    *out += "void* = "; // TEQ
    if (pstruct->pNext == nullptr) // WWZ
    {
        *out += "NULL";
    }
    else
    {
        ScalarValueToStringStruct vinfo_pNext = {true, false, false, nullptr};
        uint64_t pnextLocal = pstruct_in.pNext->GetAddress(); // PNX
        ScalarValueToString(out, &pnextLocal, vinfo_pNext);
    }
    *out += "\n"; // GDS

    // struct member: VkDeviceSize storageTexelBufferOffsetAlignmentBytes
    IndentSpaces(out, indent);
    *out += "storageTexelBufferOffsetAlignmentBytes: ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->storageTexelBufferOffsetAlignmentBytes); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 storageTexelBufferOffsetSingleTexelAlignment
    IndentSpaces(out, indent);
    *out += "storageTexelBufferOffsetSingleTexelAlignment: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->storageTexelBufferOffsetSingleTexelAlignment); //EQA
    *out += "\n"; // GDS

    // struct member: VkDeviceSize uniformTexelBufferOffsetAlignmentBytes
    IndentSpaces(out, indent);
    *out += "uniformTexelBufferOffsetAlignmentBytes: ";
    *out += "VkDeviceSize = "; // TEQ
    SignedDecimalToString(out, pstruct->uniformTexelBufferOffsetAlignmentBytes); //EQA
    *out += "\n"; // GDS

    // struct member: VkBool32 uniformTexelBufferOffsetSingleTexelAlignment
    IndentSpaces(out, indent);
    *out += "uniformTexelBufferOffsetSingleTexelAlignment: ";
    *out += "VkBool32 = "; // TEQ
    SignedDecimalToString(out, pstruct->uniformTexelBufferOffsetSingleTexelAlignment); //EQA
}

GFXRECON_END_NAMESPACE(decode)
GFXRECON_END_NAMESPACE(gfxrecon)

#endif
